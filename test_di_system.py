#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DI —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from app.core.container import Container
from app.shared.config.settings import Settings

async def test_di_container():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DI —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = Container()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        settings = Settings()
        container.config.override(settings)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        services_to_test = [
            'user_service',
            'points_service', 
            'top_service',
            'games_service',
            'motivation_service',
            'trigger_service',
            'trigger_stats_service',
            'yandex_gpt_service',
            'tts_service',
            'adminlog_service',
            'allowed_chats_service'
        ]
        
        for service_name in services_to_test:
            try:
                service = getattr(container, service_name)
                print(f"‚úÖ {service_name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå {service_name} - –æ—à–∏–±–∫–∞: {e}")
        
        print("\nüéâ DI —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ DI —Å–∏—Å—Ç–µ–º–µ: {e}")
        return False

async def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–æ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        from app.domain.services.user import UserService
        from app.domain.services.gamification.points import PointsService
        from app.domain.services.gamification.top import TopService
        from app.domain.services.games import GamesService
        from app.domain.services.motivation import MotivationService
        from app.domain.services.triggers.core import TriggerService
        from app.domain.services.triggers.stats import TriggerStatsService
        
        print("‚úÖ –î–æ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        from app.infrastructure.ai.providers.yandex_gpt import YandexGPTService
        from app.infrastructure.ai.tts import TTSService
        from app.infrastructure.system.adminlog_service import AdminLogService
        from app.infrastructure.system.allowed_chats_service import AllowedChatsService
        
        print("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        from app.presentation.bot.handlers.user import UserHandler
        from app.presentation.bot.handlers.ai import AIHandler
        from app.presentation.bot.middlewares.rate_limiter import RateLimiterMiddleware
        
        print("‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "app/core/container.py",
        "app/shared/config/settings.py",
        "app/domain/services/user.py",
        "app/domain/services/gamification/points.py",
        "app/domain/services/gamification/top.py",
        "app/domain/services/games.py",
        "app/domain/services/motivation.py",
        "app/domain/services/triggers/core.py",
        "app/domain/services/triggers/stats.py",
        "app/infrastructure/ai/providers/yandex_gpt.py",
        "app/infrastructure/ai/providers/tts.py",
        "app/infrastructure/db/models.py",
        "app/infrastructure/db/session.py",
        "app/presentation/bot/handlers/user.py",
        "app/presentation/bot/handlers/ai.py",
        "app/presentation/bot/middlewares/rate_limiter.py",
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")
        return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DI —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    structure_ok = await test_file_structure()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    imports_ok = await test_imports()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    di_ok = await test_di_container()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤: {'‚úÖ' if structure_ok else '‚ùå'}")
    print(f"üì¶ –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"üîß DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {'‚úÖ' if di_ok else '‚ùå'}")
    
    if all([structure_ok, imports_ok, di_ok]):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! DI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: alembic upgrade head")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python app/main.py")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!")
        return False
    
    return True

if __name__ == "__main__":
    asyncio.run(main()) 