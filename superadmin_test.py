#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, List, Any
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SuperAdminTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
    
    def __init__(self):
        self.test_results = {}
        self.chat_id = -1002895914391  # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
        self.admin_id = 446318189  # ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        
    async def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏–∏
        await self.test_ai_functions()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —Ñ—É–Ω–∫—Ü–∏–∏
        await self.test_tts_functions()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        await self.test_commands()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã
        await self.test_games()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await self.test_admin_functions()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞–ª–ª–æ–≤
        await self.test_points_system()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        await self.test_subscriptions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_comprehensive_report()
        
    async def test_ai_functions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        try:
            from sisu_bot.bot.services.yandexgpt_service import generate_sisu_reply
            
            ai_tests = {}
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            try:
                response = await generate_sisu_reply("–ü—Ä–∏–≤–µ—Ç!")
                ai_tests["simple_response"] = bool(response and len(response) > 0)
                ai_tests["response_length"] = len(response) if response else 0
            except Exception as e:
                ai_tests["simple_response"] = False
                ai_tests["error"] = str(e)
            
            # –¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            try:
                recent_messages = ["–ö–∞–∫ –¥–µ–ª–∞?", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"]
                response = await generate_sisu_reply("–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", recent_messages)
                ai_tests["context_response"] = bool(response and len(response) > 0)
            except Exception as e:
                ai_tests["context_response"] = False
                ai_tests["context_error"] = str(e)
            
            self.test_results["ai_functions"] = ai_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI: {e}")
            self.test_results["ai_functions"] = {"error": str(e)}
    
    async def test_tts_functions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        try:
            from sisu_bot.bot.services.yandex_speechkit_tts import synthesize_sisu_voice
            
            tts_tests = {}
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ –≥–æ–ª–æ—Å–∞
            try:
                voice_data = await synthesize_sisu_voice("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞")
                tts_tests["voice_synthesis"] = bool(voice_data and len(voice_data) > 0)
                tts_tests["voice_size"] = len(voice_data) if voice_data else 0
            except Exception as e:
                tts_tests["voice_synthesis"] = False
                tts_tests["error"] = str(e)
            
            # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
            emotions = ["good", "evil", "neutral"]
            for emotion in emotions:
                try:
                    voice_data = await synthesize_sisu_voice(f"–¢–µ—Å—Ç —ç–º–æ—Ü–∏–∏ {emotion}", emotion=emotion)
                    tts_tests[f"emotion_{emotion}"] = bool(voice_data)
                except Exception as e:
                    tts_tests[f"emotion_{emotion}"] = False
                    tts_tests[f"emotion_{emotion}_error"] = str(e)
            
            self.test_results["tts_functions"] = tts_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS: {e}")
            self.test_results["tts_functions"] = {"error": str(e)}
    
    async def test_commands(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        logger.info("‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        
        try:
            from sisu_bot.bot.services.command_menu_service import CommandMenuService
            
            command_tests = {}
            
            # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
            try:
                service = CommandMenuService()
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥
                command_tests["command_service"] = True
            except Exception as e:
                command_tests["command_service"] = False
                command_tests["error"] = str(e)
            
            self.test_results["commands"] = command_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
            self.test_results["commands"] = {"error": str(e)}
    
    async def test_games(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä"""
        logger.info("üéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã...")
        
        try:
            from sisu_bot.bot.services.games_service import GamesService
            
            games_tests = {}
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏–≥—Ä
            try:
                service = GamesService()
                games_tests["games_service"] = True
            except Exception as e:
                games_tests["games_service"] = False
                games_tests["error"] = str(e)
            
            self.test_results["games"] = games_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä: {e}")
            self.test_results["games"] = {"error": str(e)}
    
    async def test_admin_functions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üëë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        try:
            from sisu_bot.bot.services.adminlog_service import AdminLogService
            from sisu_bot.bot.config import is_superadmin
            
            admin_tests = {}
            
            # –¢–µ—Å—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
            admin_tests["superadmin_rights"] = is_superadmin(self.admin_id)
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–¥–º–∏–Ω-–ª–æ–≥–æ–≤
            try:
                service = AdminLogService()
                admin_tests["adminlog_service"] = True
            except Exception as e:
                admin_tests["adminlog_service"] = False
                admin_tests["error"] = str(e)
            
            self.test_results["admin_functions"] = admin_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            self.test_results["admin_functions"] = {"error": str(e)}
    
    async def test_points_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
        logger.info("‚≠ê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞–ª–ª–æ–≤...")
        
        try:
            from sisu_bot.bot.services.points_service import PointsService
            
            points_tests = {}
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–ª–æ–≤
            try:
                service = PointsService()
                points_tests["points_service"] = True
            except Exception as e:
                points_tests["points_service"] = False
                points_tests["error"] = str(e)
            
            self.test_results["points_system"] = points_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤: {e}")
            self.test_results["points_system"] = {"error": str(e)}
    
    async def test_subscriptions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        try:
            from sisu_bot.bot.services.subscription_service import SubscriptionService
            
            subscription_tests = {}
            
            # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            try:
                service = SubscriptionService()
                subscription_tests["subscription_service"] = True
            except Exception as e:
                subscription_tests["subscription_service"] = False
                subscription_tests["error"] = str(e)
            
            self.test_results["subscriptions"] = subscription_tests
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            self.test_results["subscriptions"] = {"error": str(e)}
    
    async def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "test_results": self.test_results,
            "summary": {
                "total_modules": len(self.test_results),
                "successful_modules": sum(1 for module in self.test_results.values() 
                                        if not any("error" in str(v) for v in module.values())),
                "failed_modules": sum(1 for module in self.test_results.values() 
                                   if any("error" in str(v) for v in module.values()))
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path("superadmin_test_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìã –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"üìä –ú–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {report['summary']['total_modules']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {report['summary']['successful_modules']}")
        print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {report['summary']['failed_modules']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º
        for module_name, module_results in self.test_results.items():
            print(f"\nüîç {module_name.upper()}:")
            for test_name, result in module_results.items():
                if isinstance(result, bool):
                    status = "‚úÖ" if result else "‚ùå"
                    print(f"  {status} {test_name}")
                elif isinstance(result, str) and "error" in test_name.lower():
                    print(f"  ‚ùå {test_name}: {result}")
                else:
                    print(f"  ‚ÑπÔ∏è {test_name}: {result}")
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
        print("="*60)
        
        return report

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SuperAdminTester()
    await tester.run_comprehensive_tests()

if __name__ == "__main__":
    asyncio.run(main())
