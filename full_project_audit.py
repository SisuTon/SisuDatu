#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –ü–†–û–ï–ö–¢–ê SISU BOT - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–ì–û
"""

import os
import sys
import json
import ast
import subprocess
from pathlib import Path
from datetime import datetime
from collections import defaultdict
import sqlite3
import sqlalchemy as sa
from sqlalchemy import inspect as sqlinspect

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

class FullProjectAudit:
    def __init__(self):
        self.audit_results = defaultdict(dict)
        self.problems = []
        self.warnings = []
        self.recommendations = []
        self.stats = {
            'files_by_type': defaultdict(int),
            'lines_by_type': defaultdict(int),
            'db_tables': [],
            'db_records': 0
        }
    
    def log_audit(self, category, check_name, status, details=""):
        self.audit_results[category][check_name] = {
            'status': status,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
    
    def analyze_directory_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("üìÅ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ò–†–ï–ö–¢–û–†–ò–ô...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        all_dirs = []
        for root, dirs, files in os.walk('.'):
            for dir_name in dirs:
                if not dir_name.startswith(('.', '__')):
                    rel_path = os.path.relpath(os.path.join(root, dir_name))
                    all_dirs.append(rel_path)
        
        self.audit_results['structure']['all_directories'] = {
            'status': '‚ÑπÔ∏è',
            'details': f"–ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(all_dirs)}",
            'list': all_dirs
        }

    def analyze_file_types(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"""
        print("üìä –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –ü–û –¢–ò–ü–ê–ú...")
        
        file_types = defaultdict(list)
        total_size = 0
        
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.startswith(('.', '__')) or 'venv' in root:
                    continue
                
                file_path = Path(root) / file
                try:
                    file_size = file_path.stat().st_size
                    total_size += file_size
                    
                    ext = file_path.suffix.lower()
                    file_types[ext].append({
                        'path': str(file_path),
                        'size': file_size,
                        'lines': self.count_lines(file_path)
                    })
                    
                    self.stats['files_by_type'][ext] += 1
                    self.stats['lines_by_type'][ext] += file_types[ext][-1]['lines']
                    
                except Exception as e:
                    self.warnings.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        self.audit_results['files']['stats'] = {
            'status': '‚ÑπÔ∏è',
            'details': f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {sum(len(files) for files in file_types.values())}, –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size/1024/1024:.2f} MB",
            'by_type': {ext: len(files) for ext, files in file_types.items()}
        }

    def count_lines(self, file_path):
        """–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ"""
        try:
            if file_path.suffix in ['.py', '.json', '.txt', '.md', '.yml', '.yaml']:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    return len(f.readlines())
            return 0
        except:
            return 0

    def analyze_python_code(self):
        """–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞"""
        print("üêç –ê–ù–ê–õ–ò–ó PYTHON –ö–û–î–ê...")
        
        python_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.py') and not any(x in root for x in ['venv', '__pycache__']):
                    python_files.append(Path(root) / file)
        
        # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        imports = defaultdict(int)
        classes = []
        functions = []
        
        for py_file in python_files:
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    tree = ast.parse(f.read())
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            imports[alias.name] += 1
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            imports[node.module] += 1
                    elif isinstance(node, ast.ClassDef):
                        classes.append({
                            'file': str(py_file),
                            'class': node.name
                        })
                    elif isinstance(node, ast.FunctionDef):
                        functions.append({
                            'file': str(py_file),
                            'function': node.name
                        })
                        
            except Exception as e:
                self.warnings.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {py_file}: {e}")
        
        self.audit_results['code']['python_analysis'] = {
            'status': '‚ÑπÔ∏è',
            'details': f"Python —Ñ–∞–π–ª–æ–≤: {len(python_files)}, –ö–ª–∞—Å—Å–æ–≤: {len(classes)}, –§—É–Ω–∫—Ü–∏–π: {len(functions)}",
            'top_imports': dict(sorted(imports.items(), key=lambda x: x[1], reverse=True)[:10]),
            'classes_sample': classes[:5],
            'functions_sample': functions[:5]
        }

    def analyze_database(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üíæ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•...")
        
        try:
            from app.infrastructure.db.session import engine, Base
            from app.infrastructure.db.models import User, Donation, ChatMessage, UserLimit
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with engine.connect() as conn:
                inspector = sqlinspect(conn)
                tables = inspector.get_table_names()
                
                table_details = {}
                for table in tables:
                    columns = inspector.get_columns(table)
                    table_details[table] = {
                        'columns': [{'name': col['name'], 'type': str(col['type'])} for col in columns],
                        'records': conn.execute(sa.text(f"SELECT COUNT(*) FROM {table}")).scalar()
                    }
                    self.stats['db_records'] += table_details[table]['records']
                
                self.stats['db_tables'] = tables
                
                self.audit_results['database']['details'] = {
                    'status': '‚úÖ' if tables else '‚ùå',
                    'details': f"–¢–∞–±–ª–∏—Ü: {len(tables)}, –ó–∞–ø–∏—Å–µ–π: {self.stats['db_records']}",
                    'tables': table_details
                }
                
        except Exception as e:
            self.audit_results['database']['details'] = {
                'status': '‚ùå',
                'details': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î: {e}"
            }

    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô...")
        
        try:
            # –ß–∏—Ç–∞–µ–º requirements.txt
            requirements = {}
            if Path('requirements.txt').exists():
                with open('requirements.txt', 'r') as f:
                    for line in f:
                        if '==' in line and not line.strip().startswith('#'):
                            pkg, version = line.strip().split('==')
                            requirements[pkg] = version
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            result = subprocess.run([sys.executable, '-m', 'pip', 'freeze'], 
                                  capture_output=True, text=True)
            installed = {}
            for line in result.stdout.split('\n'):
                if '==' in line:
                    pkg, version = line.split('==')
                    installed[pkg] = version
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            missing = []
            for req in requirements:
                if req not in installed:
                    missing.append(req)
            
            self.audit_results['dependencies']['status'] = {
                'status': '‚úÖ' if not missing else '‚ùå',
                'details': f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(requirements)}, –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(missing)}",
                'missing': missing,
                'requirements': requirements
            }
            
        except Exception as e:
            self.audit_results['dependencies']['status'] = {
                'status': '‚ùå',
                'details': f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}"
            }

    def run_full_audit(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–£–î–ò–¢–ê –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.analyze_directory_structure()
        self.analyze_file_types()
        self.analyze_python_code()
        self.analyze_database()
        self.check_dependencies()
        
        self.generate_report()

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = {
            'metadata': {
                'timestamp': datetime.now().isoformat(),
                'project_path': str(Path.cwd()),
                'python_version': sys.version
            },
            'statistics': self.stats,
            'audit_results': dict(self.audit_results),
            'warnings': self.warnings,
            'problems': self.problems,
            'recommendations': self.recommendations
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f'full_project_audit_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\nüìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê:")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –§–∞–π–ª–æ–≤: {sum(self.stats['files_by_type'].values())}")
        print(f"  –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {dict(self.stats['files_by_type'])}")
        print(f"  –¢–∞–±–ª–∏—Ü –ë–î: {len(self.stats['db_tables'])}")
        print(f"  –ó–∞–ø–∏—Å–µ–π –ë–î: {self.stats['db_records']}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if self.warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings[:3]:
                print(f"  ‚Ä¢ {warning}")

        print(f"\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")

# –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
if __name__ == "__main__":
    auditor = FullProjectAudit()
    auditor.run_full_audit()
