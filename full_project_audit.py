#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ SisuDatuBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏, —Ñ–∞–π–ª—ã –∏ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
"""
import os
import json
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

class ProjectAuditor:
    """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.base = Path(".")
        self.audit_results = {
            "timestamp": datetime.now().isoformat(),
            "project_structure": {},
            "file_counts": {},
            "migration_status": {},
            "issues": [],
            "recommendations": []
        }
    
    def scan_directory(self, path: Path, max_depth: int = 5, current_depth: int = 0) -> Dict[str, Any]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if current_depth > max_depth:
            return {"type": "max_depth_reached"}
        
        result = {
            "type": "directory",
            "path": str(path),
            "exists": path.exists(),
            "files": [],
            "directories": [],
            "total_files": 0,
            "total_dirs": 0
        }
        
        if not path.exists():
            return result
        
        try:
            for item in path.iterdir():
                if item.is_file():
                    file_info = {
                        "name": item.name,
                        "size": item.stat().st_size,
                        "extension": item.suffix,
                        "is_python": item.suffix == '.py',
                        "is_json": item.suffix == '.json',
                        "is_config": item.name in ['.env', 'config.yml', 'settings.py']
                    }
                    result["files"].append(file_info)
                    result["total_files"] += 1
                    
                elif item.is_dir():
                    if not item.name.startswith('.') and not item.name in ['__pycache__', 'node_modules', '.git']:
                        sub_dir = self.scan_directory(item, max_depth, current_depth + 1)
                        result["directories"].append(sub_dir)
                        result["total_dirs"] += 1
                        
        except PermissionError:
            result["error"] = "Permission denied"
        except Exception as e:
            result["error"] = str(e)
        
        return result
    
    def audit_migration_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ
        migrated_files = [
            "app/domain/services/user.py",
            "app/domain/services/gamification/points.py",
            "app/domain/services/gamification/top.py",
            "app/domain/services/games.py",
            "app/domain/services/motivation.py",
            "app/domain/services/triggers/core.py",
            "app/domain/services/triggers/stats.py",
            "app/infrastructure/ai/providers/yandex_gpt.py",
            "app/infrastructure/db/models.py",
            "app/infrastructure/db/session.py",
            "app/shared/config/settings.py",
            "app/presentation/bot/handlers/ai.py",
            "app/presentation/bot/middlewares/rate_limiter.py"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Å—Ç–∞—Ä—ã—Ö –º–µ—Å—Ç–∞—Ö
        old_files = [
            "sisu_bot/bot/services/user_service.py",
            "sisu_bot/bot/services/points_service.py",
            "sisu_bot/bot/services/top_service.py",
            "sisu_bot/bot/services/games_service.py",
            "sisu_bot/bot/services/motivation_service.py",
            "sisu_bot/bot/services/trigger_service.py",
            "sisu_bot/bot/services/trigger_stats_service.py",
            "sisu_bot/bot/db/models.py",
            "sisu_bot/bot/db/session.py",
            "sisu_bot/core/config.py"
        ]
        
        migration_status = {
            "migrated": [],
            "not_migrated": [],
            "old_files_removed": [],
            "old_files_still_exist": []
        }
        
        for file_path in migrated_files:
            if Path(file_path).exists():
                migration_status["migrated"].append(file_path)
                print(f"‚úÖ {file_path}")
            else:
                migration_status["not_migrated"].append(file_path)
                print(f"‚ùå {file_path}")
        
        print("\nüìã –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in old_files:
            if Path(file_path).exists():
                migration_status["old_files_still_exist"].append(file_path)
                print(f"‚ö†Ô∏è {file_path} (–≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            else:
                migration_status["old_files_removed"].append(file_path)
                print(f"‚úÖ {file_path} (—É–¥–∞–ª–µ–Ω)")
        
        self.audit_results["migration_status"] = migration_status
        return migration_status
    
    def audit_file_types(self):
        """–ê—É–¥–∏—Ç —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        print("\nüìä –ê—É–¥–∏—Ç —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤...")
        
        file_types = {
            "python": 0,
            "json": 0,
            "yaml": 0,
            "markdown": 0,
            "sql": 0,
            "log": 0,
            "other": 0
        }
        
        total_files = 0
        
        for root, dirs, files in os.walk(self.base):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                total_files += 1
                file_path = Path(root) / file
                extension = file_path.suffix.lower()
                
                if extension == '.py':
                    file_types["python"] += 1
                elif extension == '.json':
                    file_types["json"] += 1
                elif extension in ['.yml', '.yaml']:
                    file_types["yaml"] += 1
                elif extension == '.md':
                    file_types["markdown"] += 1
                elif extension == '.sql':
                    file_types["sql"] += 1
                elif extension == '.log':
                    file_types["log"] += 1
                else:
                    file_types["other"] += 1
        
        print(f"üìà –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        for file_type, count in file_types.items():
            if count > 0:
                print(f"   {file_type}: {count}")
        
        self.audit_results["file_counts"] = file_types
        return file_types
    
    def audit_key_directories(self):
        """–ê—É–¥–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("\nüîç –ê—É–¥–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        key_dirs = [
            "app",
            "sisu_bot", 
            "backup_original",
            "data",
            "tests",
            "migrations",
            "scripts"
        ]
        
        for dir_name in key_dirs:
            dir_path = self.base / dir_name
            if dir_path.exists():
                files_count = len(list(dir_path.rglob("*")))
                dirs_count = len([d for d in dir_path.rglob("*") if d.is_dir()])
                print(f"üìÅ {dir_name}/: {files_count} —Ñ–∞–π–ª–æ–≤, {dirs_count} –ø–∞–ø–æ–∫")
            else:
                print(f"‚ùå {dir_name}/: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print("\nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if not Path("app/core/container.py").exists():
            recommendations.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: app/core/container.py")
        else:
            recommendations.append("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not Path("app/shared/config/settings.py").exists():
            recommendations.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: app/shared/config/settings.py")
        else:
            recommendations.append("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        core_services = [
            "app/domain/services/user.py",
            "app/domain/services/gamification/points.py",
            "app/infrastructure/db/models.py"
        ]
        
        for service in core_services:
            if Path(service).exists():
                recommendations.append(f"‚úÖ {service}")
            else:
                recommendations.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {service}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã
        if not Path("tests").exists():
            recommendations.append("‚ö†Ô∏è –ü–∞–ø–∫–∞ tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
        if not Path(".env").exists():
            recommendations.append("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.audit_results["recommendations"] = recommendations
        return recommendations
    
    def run_full_audit(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–£–î–ò–¢–ê –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)
        
        # 1. –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        project_structure = self.scan_directory(self.base)
        self.audit_results["project_structure"] = project_structure
        
        # 2. –ê—É–¥–∏—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_status = self.audit_migration_status()
        
        # 3. –ê—É–¥–∏—Ç —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        file_types = self.audit_file_types()
        
        # 4. –ê—É–¥–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.audit_key_directories()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = self.generate_recommendations()
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        audit_file = f"project_audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(audit_file, 'w', encoding='utf-8') as f:
            json.dump(self.audit_results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {audit_file}")
        
        # 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_types.get('python', 0) + file_types.get('json', 0) + file_types.get('other', 0)}")
        print(f"üêç Python —Ñ–∞–π–ª–æ–≤: {file_types.get('python', 0)}")
        print(f"üìã JSON —Ñ–∞–π–ª–æ–≤: {file_types.get('json', 0)}")
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(migration_status.get('migrated', []))}")
        print(f"‚ùå –ù–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(migration_status.get('not_migrated', []))}")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö: {len(migration_status.get('old_files_removed', []))}")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in recommendations:
            print(f"   {rec}")
        
        return self.audit_results

if __name__ == "__main__":
    auditor = ProjectAuditor()
    auditor.run_full_audit() 