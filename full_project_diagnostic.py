#!/usr/bin/env python3
"""
–ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê SISU
–ù–∞–π–¥–µ–º –≤—Å–µ –¥—É–±–ª–∏, –º—É—Å–æ—Ä, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
"""

import os
import sys
import ast
import json
import re
from pathlib import Path
from collections import defaultdict, Counter
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProjectDiagnostic:
    def __init__(self, project_root):
        self.project_root = Path(project_root)
        self.issues = []
        self.duplicates = defaultdict(list)
        self.imports = defaultdict(list)
        self.handlers = defaultdict(list)
        self.routers = defaultdict(list)
        
    def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê SISU")
        print("="*60)
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.analyze_project_structure()
        
        # 2. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
        self.find_duplicate_files()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
        self.analyze_imports()
        
        # 4. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤
        self.find_duplicate_code()
        
        # 5. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.analyze_handlers()
        
        # 6. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö
        self.find_router_conflicts()
        
        # 7. –ü–æ–∏—Å–∫ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞
        self.find_dead_code()
        
        # 8. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.analyze_configuration()
        
        # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()
        
    def analyze_project_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        key_dirs = [
            'sisu_bot',
            'sisu_bot/bot',
            'sisu_bot/bot/handlers',
            'sisu_bot/bot/middlewares',
            'sisu_bot/bot/services',
            'sisu_bot/core',
            'tests',
            'scripts'
        ]
        
        for dir_path in key_dirs:
            full_path = self.project_root / dir_path
            if full_path.exists():
                files_count = len(list(full_path.rglob('*.py')))
                print(f"‚úÖ {dir_path}: {files_count} Python —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"‚ùå {dir_path}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã
        all_files = list(self.project_root.rglob('*.py'))
        file_names = [f.name for f in all_files]
        duplicates = [name for name, count in Counter(file_names).items() if count > 1]
        
        if duplicates:
            print(f"\n‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤: {duplicates}")
            self.issues.append(f"–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã: {duplicates}")
    
    def find_duplicate_files(self):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤"""
        print("\n2Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –§–ê–ô–õ–û–í")
        print("-" * 40)
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        file_contents = {}
        duplicates_found = False
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                normalized = re.sub(r'\s+', ' ', content)
                normalized = re.sub(r'#.*?\n', '', normalized)
                
                if normalized in file_contents:
                    print(f"üîÑ –î–£–ë–õ–¨: {py_file} == {file_contents[normalized]}")
                    duplicates_found = True
                    self.duplicates[normalized].extend([str(py_file), file_contents[normalized]])
                else:
                    file_contents[normalized] = str(py_file)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {py_file}: {e}")
        
        if not duplicates_found:
            print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def analyze_imports(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í")
        print("-" * 40)
        
        import_patterns = defaultdict(list)
        circular_imports = []
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            import_patterns[alias.name].append(str(py_file))
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            import_patterns[node.module].append(str(py_file))
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {py_file}: {e}")
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        for module, files in import_patterns.items():
            if len(files) > 5:  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –º–Ω–æ–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
                print(f"üì¶ –ß–∞—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è '{module}': {len(files)} —Ñ–∞–π–ª–æ–≤")
                self.imports[module] = files
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        self.check_circular_imports()
    
    def check_circular_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        for py_file in self.project_root.rglob('*.py'):
            if 'handlers' in str(py_file):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ handlers
                    if 'from sisu_bot.bot.handlers' in content:
                        print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ {py_file}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {py_file}: {e}")
    
    def find_duplicate_code(self):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞"""
        print("\n4Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ï–ì–û–°–Ø –ö–û–î–ê")
        print("-" * 40)
        
        functions = defaultdict(list)
        classes = defaultdict(list)
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
                        func_code = ast.unparse(node)
                        normalized = re.sub(r'\s+', ' ', func_code)
                        functions[normalized].append(f"{py_file}:{node.name}")
                        
                    elif isinstance(node, ast.ClassDef):
                        class_code = ast.unparse(node)
                        normalized = re.sub(r'\s+', ' ', class_code)
                        classes[normalized].append(f"{py_file}:{node.name}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {py_file}: {e}")
        
        # –ò—â–µ–º –¥—É–±–ª–∏
        duplicate_functions = {code: files for code, files in functions.items() if len(files) > 1}
        duplicate_classes = {code: files for code, files in classes.items() if len(files) > 1}
        
        if duplicate_functions:
            print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏: {len(duplicate_functions)}")
            for code, files in list(duplicate_functions.items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  –§—É–Ω–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
        
        if duplicate_classes:
            print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã: {len(duplicate_classes)}")
            for code, files in list(duplicate_classes.items())[:3]:
                print(f"  –ö–ª–∞—Å—Å –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
    
    def analyze_handlers(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
        print("-" * 40)
        
        handler_files = list((self.project_root / 'sisu_bot/bot/handlers').glob('*.py'))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handler_files)}")
        
        for handler_file in handler_files:
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º router
                if 'router = Router()' in content:
                    print(f"‚úÖ {handler_file.name}: Router –Ω–∞–π–¥–µ–Ω")
                    self.routers[str(handler_file)] = True
                else:
                    print(f"‚ö†Ô∏è {handler_file.name}: Router –ù–ï –Ω–∞–π–¥–µ–Ω")
                    self.routers[str(handler_file)] = False
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                message_handlers = re.findall(r'@router\.message\([^)]*\)\s*\n\s*async def (\w+)', content)
                if message_handlers:
                    print(f"  üì® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_handlers}")
                    self.handlers[str(handler_file)] = message_handlers
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
                command_handlers = re.findall(r'@router\.message\(Command\("([^"]+)"\)\)', content)
                if command_handlers:
                    print(f"  ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {command_handlers}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {handler_file}: {e}")
    
    def find_router_conflicts(self):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö"""
        print("\n6Ô∏è‚É£ –ü–û–ò–°–ö –ö–û–ù–§–õ–ò–ö–¢–û–í –í –†–û–£–¢–ï–†–ê–•")
        print("-" * 40)
        
        # –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        all_commands = defaultdict(list)
        
        for handler_file in (self.project_root / 'sisu_bot/bot/handlers').glob('*.py'):
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã
                commands = re.findall(r'Command\("([^"]+)"\)', content)
                for cmd in commands:
                    all_commands[cmd].append(str(handler_file))
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {handler_file}: {e}")
        
        # –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        conflicts = {cmd: files for cmd, files in all_commands.items() if len(files) > 1}
        
        if conflicts:
            print("‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–´ –ö–û–ú–ê–ù–î:")
            for cmd, files in conflicts.items():
                print(f"  –ö–æ–º–∞–Ω–¥–∞ '{cmd}' –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
                self.issues.append(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∫–æ–º–∞–Ω–¥—ã '{cmd}': {files}")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        text_handlers = defaultdict(list)
        
        for handler_file in (self.project_root / 'sisu_bot/bot/handlers').glob('*.py'):
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º F.text –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                text_patterns = re.findall(r'F\.text == "([^"]+)"', content)
                for text in text_patterns:
                    text_handlers[text].append(str(handler_file))
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {handler_file}: {e}")
        
        text_conflicts = {text: files for text, files in text_handlers.items() if len(files) > 1}
        
        if text_conflicts:
            print("‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢–´ –¢–ï–ö–°–¢–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
            for text, files in text_conflicts.items():
                print(f"  –¢–µ–∫—Å—Ç '{text}' –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
                self.issues.append(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–µ–∫—Å—Ç–∞ '{text}': {files}")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def find_dead_code(self):
        """–ü–æ–∏—Å–∫ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞"""
        print("\n7Ô∏è‚É£ –ü–û–ò–°–ö –ú–ï–†–¢–í–û–ì–û –ö–û–î–ê")
        print("-" * 40)
        
        # –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = defaultdict(list)
        function_calls = defaultdict(int)
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        all_functions[node.name].append(str(py_file))
                    elif isinstance(node, ast.Call):
                        if isinstance(node.func, ast.Name):
                            function_calls[node.func.id] += 1
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {py_file}: {e}")
        
        # –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        unused_functions = []
        for func_name, files in all_functions.items():
            if function_calls[func_name] == 0 and not func_name.startswith('_'):
                unused_functions.append((func_name, files))
        
        if unused_functions:
            print(f"üíÄ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(unused_functions)}")
            for func_name, files in unused_functions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {func_name} –≤ {files}")
        else:
            print("‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def analyze_configuration(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n8Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
        env_file = self.project_root / '.env'
        if env_file.exists():
            print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                lines = content.split('\n')
                variables = [line.split('=')[0] for line in lines if '=' in line and not line.startswith('#')]
                duplicates = [var for var, count in Counter(variables).items() if count > 1]
                
                if duplicates:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: {duplicates}")
                else:
                    print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env –Ω–µ—Ç")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        else:
            print("‚ùå .env —Ñ–∞–π–ª –ù–ï –ù–ê–ô–î–ï–ù")
            self.issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env —Ñ–∞–π–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_files = [
            'sisu_bot/bot/config.py',
            'sisu_bot/core/config.py'
        ]
        
        for config_file in config_files:
            full_path = self.project_root / config_file
            if full_path.exists():
                print(f"‚úÖ {config_file} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {config_file} –ù–ï –ù–ê–ô–î–ï–ù")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {config_file}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*60)
        
        print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(self.issues)}")
        print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {len(self.duplicates)}")
        print(f"üì¶ –ß–∞—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π: {len(self.imports)}")
        print(f"üì® –§–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: {len(self.handlers)}")
        print(f"üîÄ –†–æ—É—Ç–µ—Ä–æ–≤: {len(self.routers)}")
        
        if self.issues:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
        
        if self.duplicates:
            print("\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –§–ê–ô–õ–´:")
            for content, files in list(self.duplicates.items())[:3]:
                print(f"  –§–∞–π–ª—ã: {files}")
        
        print("\n" + "="*60)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent
    diagnostic = ProjectDiagnostic(project_root)
    diagnostic.run_full_diagnostic()

if __name__ == "__main__":
    main()
