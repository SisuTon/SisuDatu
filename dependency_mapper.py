#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∞
"""
import ast
import os
import sys
from pathlib import Path
from collections import defaultdict
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network

class ImportAnalyzer(ast.NodeVisitor):
    def __init__(self):
        self.imports = defaultdict(set)
        self.current_file = None

    def visit_Import(self, node):
        for alias in node.names:
            self.imports[self.current_file].add(alias.name.split('.')[0])

    def visit_ImportFrom(self, node):
        if node.module:
            self.imports[self.current_file].add(node.module.split('.')[0])

def parse_file(file_path: Path) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    with open(file_path, 'r', encoding='utf-8') as f:
        try:
            tree = ast.parse(f.read())
            analyzer = ImportAnalyzer()
            analyzer.current_file = file_path.stem
            analyzer.visit(tree)
            return analyzer.imports
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {str(e)}")
            return {}

def find_python_files(root_dir: Path) -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    return [f for f in root_dir.rglob('*.py') 
            if '.venv' not in str(f) and '.git' not in str(f)]

def build_dependency_graph(files: list) -> nx.DiGraph:
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    graph = nx.DiGraph()
    all_imports = defaultdict(set)
    
    for file in files:
        imports = parse_file(file)
        for file_name, deps in imports.items():
            all_imports[file_name].update(deps)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
    for file, deps in all_imports.items():
        graph.add_node(file, size=10, title=file, group=1)
        for dep in deps:
            if dep in all_imports:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                graph.add_node(dep, size=8, title=dep, group=2)
                graph.add_edge(file, dep)
    
    return graph

def visualize_with_pyvis(graph: nx.DiGraph, output_file: str = 'dependencies.html'):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ —Å –ø–æ–º–æ—â—å—é PyVis"""
    net = Network(height='800px', width='100%', directed=True)
    net.from_nx(graph)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    net.toggle_physics(True)
    net.show_buttons(filter_=['physics'])
    net.show(output_file)
    print(f"üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")

def visualize_with_matplotlib(graph: nx.DiGraph):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ —Å –ø–æ–º–æ—â—å—é matplotlib"""
    plt.figure(figsize=(20, 15))
    pos = nx.spring_layout(graph, k=0.5, iterations=50)
    
    nx.draw_networkx_nodes(graph, pos, node_size=200, alpha=0.9)
    nx.draw_networkx_edges(graph, pos, arrowstyle='->', arrowsize=10)
    nx.draw_networkx_labels(graph, pos, font_size=8)
    
    plt.title("–ö–∞—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞", size=15)
    plt.axis('off')
    plt.tight_layout()
    plt.savefig('dependencies.png', dpi=300)
    print("üéØ –°—Ç–∞—Ç–∏—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ dependencies.png")

def export_to_dot(graph: nx.DiGraph, filename: str = 'dependencies.dot'):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤ —Ñ–æ—Ä–º–∞—Ç DOT"""
    nx.drawing.nx_pydot.write_dot(graph, filename)
    print(f"üéØ –ì—Ä–∞—Ñ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename} (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ GraphViz)")

def main():
    root_dir = Path('.')
    python_files = find_python_files(root_dir)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    graph = build_dependency_graph(python_files)
    print(f"üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ —Å {len(graph.nodes)} —É–∑–ª–∞–º–∏ –∏ {len(graph.edges)} —Å–≤—è–∑—è–º–∏")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    visualize_with_pyvis(graph)
    visualize_with_matplotlib(graph)
    export_to_dot(graph)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüîé –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print(f"   –°–∞–º—ã–π —Å–≤—è–∑–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å: {max(graph.degree, key=lambda x: x[1])[0]}")
    print(f"   –ß–∏—Å–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏: {nx.number_weakly_connected_components(graph)}")
    
    if nx.is_directed_acyclic_graph(graph):
        print("   –ì—Ä–∞—Ñ –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π (–Ω–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    else:
        print("   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        for cycle in nx.simple_cycles(graph):
            print(f"      –¶–∏–∫–ª: {' ‚Üí '.join(cycle)}")

if __name__ == '__main__':
    main() 