#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Sisu –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sisu_bot.bot.middlewares.allowed_chats_middleware import AllowedChatsMiddleware
from sisu_bot.bot.handlers.ai_handler import is_ai_dialog_message
from sisu_bot.bot.handlers.message_handler import is_non_command_and_not_sisu
from sisu_bot.bot.handlers.dialog_handler import SISU_PATTERN
from aiogram.types import Message, User, Chat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

def create_test_message(text: str, chat_type: str = "private", chat_id: int = 12345):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = User(
        id=12345,
        is_bot=False,
        first_name="Test",
        username="testuser"
    )
    
    chat = Chat(
        id=chat_id,
        type=chat_type,
        title="Test Chat" if chat_type != "private" else None
    )
    
    message = Message(
        message_id=1,
        from_user=user,
        chat=chat,
        date=1234567890,
        text=text
    )
    
    return message

async def test_persona_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É Sisu –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Sisu –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º middleware
    middleware = AllowedChatsMiddleware()
    
    # –°–æ–∑–¥–∞–µ–º FSM context
    storage = MemoryStorage()
    state = FSMContext(storage=storage, key=None)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_cases = [
        # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã
        ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "private", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ"),
        ("/start", "private", "–ö–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ"),
        ("—Å–∏—Å—É, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å", "private", "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Sisu –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ"),
        
        # –ì—Ä—É–ø–ø—ã (—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
        ("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!", "group", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ"),
        ("—Å–∏—Å—É, –ø–æ–º–æ–≥–∏", "group", "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Sisu –≤ –≥—Ä—É–ø–ø–µ"),
        
        # –ì—Ä—É–ø–ø—ã (–Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
        ("–ü—Ä–∏–≤–µ—Ç –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã", "group", "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"),
    ]
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AllowedChatsMiddleware:")
    print("-" * 40)
    
    for text, chat_type, description in test_cases:
        message = create_test_message(text, chat_type)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ middleware
        handler_called = False
        
        async def mock_handler(event, data):
            nonlocal handler_called
            handler_called = True
            return "Handler called"
        
        try:
            result = await middleware(mock_handler, message, {"state": state})
            status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" if handler_called else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
        except Exception as e:
            status = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        
        print(f"{status} | {description}")
        print(f"    –¢–µ–∫—Å—Ç: '{text}' | –¢–∏–ø —á–∞—Ç–∞: {chat_type}")
        print()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:")
    print("-" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    test_messages = [
        ("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("/start", "–ö–æ–º–∞–Ω–¥–∞"),
        ("—Å–∏—Å—É, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å", "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Sisu"),
        ("", "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
    ]
    
    for text, description in test_messages:
        message = create_test_message(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        ai_dialog = await is_ai_dialog_message(message, state)
        non_command = is_non_command_and_not_sisu(message)
        sisu_pattern = bool(SISU_PATTERN.match(text)) if text else False
        
        print(f"üìù {description}: '{text}'")
        print(f"    AI Dialog Handler: {'‚úÖ' if ai_dialog else '‚ùå'}")
        print(f"    Message Handler: {'‚úÖ' if non_command else '‚ùå'}")
        print(f"    Sisu Pattern: {'‚úÖ' if sisu_pattern else '‚ùå'}")
        print()
    
    print("=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:")
    print("‚Ä¢ –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (Sisu –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂)")
    print("‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
    print("‚Ä¢ –ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã: —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
    print("‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
    print("‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –∫ Sisu: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è dialog_handler")
    print("‚Ä¢ –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ai_handler –∏–ª–∏ message_handler")

if __name__ == "__main__":
    asyncio.run(test_persona_mode())
