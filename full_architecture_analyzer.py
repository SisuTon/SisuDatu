#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ü–†–û–ï–ö–¢–ê SISU
–ù–∞–π–¥–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã, –¥—É–±–ª–∏, –º—É—Å–æ—Ä –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import ast
import json
import re
from pathlib import Path
from collections import defaultdict, Counter
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FullProjectAnalyzer:
    def __init__(self, project_root):
        self.project_root = Path(project_root)
        self.issues = []
        self.duplicates = defaultdict(list)
        self.imports = defaultdict(list)
        self.handlers = defaultdict(list)
        self.routers = defaultdict(list)
        self.services = defaultdict(list)
        self.middlewares = defaultdict(list)
        self.models = defaultdict(list)
        self.configs = defaultdict(list)
        self.prompts = defaultdict(list)
        self.dependencies = defaultdict(list)
        
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê SISU")
        print("="*80)
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.analyze_project_structure()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (handlers)
        self.analyze_handlers()
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.analyze_services()
        
        # 4. –ê–Ω–∞–ª–∏–∑ middleware
        self.analyze_middlewares()
        
        # 5. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π
        self.analyze_models()
        
        # 6. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.analyze_configurations()
        
        # 7. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤
        self.analyze_prompts()
        
        # 8. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.analyze_dependencies()
        
        # 9. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞
        self.find_duplicate_code()
        
        # 10. –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.analyze_imports()
        
        # 11. –ü–æ–∏—Å–∫ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞
        self.find_dead_code()
        
        # 12. –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        self.analyze_business_logic()
        
        # 13. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_comprehensive_report()
        
    def analyze_project_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        print("-" * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        key_dirs = {
            'sisu_bot': '–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞',
            'sisu_bot/bot': '–õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞',
            'sisu_bot/bot/handlers': '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
            'sisu_bot/bot/middlewares': 'Middleware',
            'sisu_bot/bot/services': '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞',
            'sisu_bot/bot/db': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'sisu_bot/core': '–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã',
            'tests': '–¢–µ—Å—Ç—ã',
            'scripts': '–°–∫—Ä–∏–ø—Ç—ã',
            'alembic': '–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î'
        }
        
        for dir_path, description in key_dirs.items():
            full_path = self.project_root / dir_path
            if full_path.exists():
                files_count = len(list(full_path.rglob('*.py')))
                print(f"‚úÖ {dir_path}: {files_count} Python —Ñ–∞–π–ª–æ–≤ - {description}")
            else:
                print(f"‚ùå {dir_path}: –ù–ï –ù–ê–ô–î–ï–ù–ê - {description}")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã
        all_files = list(self.project_root.rglob('*.py'))
        file_names = [f.name for f in all_files]
        duplicates = [name for name, count in Counter(file_names).items() if count > 1]
        
        if duplicates:
            print(f"\n‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤: {duplicates}")
            self.issues.append(f"–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã: {duplicates}")
    
    def analyze_handlers(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        print("\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í (HANDLERS)")
        print("-" * 50)
        
        handlers_dir = self.project_root / 'sisu_bot/bot/handlers'
        if not handlers_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è handlers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        handler_files = list(handlers_dir.glob('*.py'))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handler_files)}")
        
        for handler_file in handler_files:
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º router
                router_found = 'router = Router()' in content
                print(f"\nüìÑ {handler_file.name}:")
                print(f"  Router: {'‚úÖ' if router_found else '‚ùå'}")
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                message_handlers = re.findall(r'@router\.message\([^)]*\)\s*\n\s*async def (\w+)', content)
                if message_handlers:
                    print(f"  üì® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_handlers}")
                    self.handlers[str(handler_file)] = message_handlers
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
                command_handlers = re.findall(r'@router\.message\(Command\("([^"]+)"\)\)', content)
                if command_handlers:
                    print(f"  ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {command_handlers}")
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                button_handlers = re.findall(r'F\.text == "([^"]+)"', content)
                if button_handlers:
                    print(f"  üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫: {button_handlers}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
                imports = re.findall(r'from ([^\s]+) import', content)
                if imports:
                    print(f"  üì¶ –ò–º–ø–æ—Ä—Ç—ã: {len(imports)} –º–æ–¥—É–ª–µ–π")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {handler_file}: {e}")
    
    def analyze_services(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ï–†–í–ò–°–û–í")
        print("-" * 50)
        
        services_dir = self.project_root / 'sisu_bot/bot/services'
        if not services_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        service_files = list(services_dir.glob('*.py'))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(service_files)}")
        
        for service_file in service_files:
            try:
                with open(service_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º –∫–ª–∞—Å—Å—ã
                classes = re.findall(r'class (\w+)', content)
                if classes:
                    print(f"\nüìÑ {service_file.name}:")
                    print(f"  üèóÔ∏è –ö–ª–∞—Å—Å—ã: {classes}")
                    self.services[str(service_file)] = classes
                
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                functions = re.findall(r'def (\w+)', content)
                if functions:
                    print(f"  üîß –§—É–Ω–∫—Ü–∏–∏: {len(functions)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                external_deps = re.findall(r'import (requests|aiohttp|yandexcloud|aiogram)', content)
                if external_deps:
                    print(f"  üåê –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {external_deps}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {service_file}: {e}")
    
    def analyze_middlewares(self):
        """–ê–Ω–∞–ª–∏–∑ middleware"""
        print("\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó MIDDLEWARE")
        print("-" * 50)
        
        middlewares_dir = self.project_root / 'sisu_bot/bot/middlewares'
        if not middlewares_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è middlewares –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        middleware_files = list(middlewares_dir.glob('*.py'))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ middleware: {len(middleware_files)}")
        
        for middleware_file in middleware_files:
            try:
                with open(middleware_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º –∫–ª–∞—Å—Å—ã middleware
                middleware_classes = re.findall(r'class (\w+Middleware)', content)
                if middleware_classes:
                    print(f"\nüìÑ {middleware_file.name}:")
                    print(f"  üîß Middleware –∫–ª–∞—Å—Å—ã: {middleware_classes}")
                    self.middlewares[str(middleware_file)] = middleware_classes
                
                # –ò—â–µ–º –º–µ—Ç–æ–¥—ã
                methods = re.findall(r'async def (\w+)', content)
                if methods:
                    print(f"  üìã –ú–µ—Ç–æ–¥—ã: {len(methods)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {middleware_file}: {e}")
    
    def analyze_models(self):
        """–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π"""
        print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ï–ô")
        print("-" * 50)
        
        models_file = self.project_root / 'sisu_bot/bot/db/models.py'
        if not models_file.exists():
            print("‚ùå –§–∞–π–ª models.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            with open(models_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –º–æ–¥–µ–ª–∏ SQLAlchemy
            models = re.findall(r'class (\w+)\(Base\)', content)
            if models:
                print(f"üìÑ {models_file.name}:")
                print(f"  üóÑÔ∏è –ú–æ–¥–µ–ª–∏ –ë–î: {models}")
                self.models[str(models_file)] = models
            
            # –ò—â–µ–º –ø–æ–ª—è –º–æ–¥–µ–ª–µ–π
            fields = re.findall(r'(\w+)\s*=\s*Column', content)
            if fields:
                print(f"  üìä –ü–æ–ª—è: {len(fields)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {models_file}: {e}")
    
    def analyze_configurations(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 50)
        
        config_files = [
            'sisu_bot/bot/config.py',
            'sisu_bot/core/config.py',
            '.env'
        ]
        
        for config_file in config_files:
            full_path = self.project_root / config_file
            if full_path.exists():
                try:
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    print(f"\nüìÑ {config_file}:")
                    
                    if config_file == '.env':
                        # –ê–Ω–∞–ª–∏–∑ .env
                        lines = content.split('\n')
                        variables = [line.split('=')[0] for line in lines if '=' in line and not line.startswith('#')]
                        print(f"  üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {len(variables)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
                        duplicates = [var for var, count in Counter(variables).items() if count > 1]
                        if duplicates:
                            print(f"  ‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {duplicates}")
                    else:
                        # –ê–Ω–∞–ª–∏–∑ Python –∫–æ–Ω—Ñ–∏–≥–æ–≤
                        classes = re.findall(r'class (\w+)', content)
                        if classes:
                            print(f"  üèóÔ∏è –ö–ª–∞—Å—Å—ã: {classes}")
                        
                        constants = re.findall(r'([A-Z_]+)\s*=', content)
                        if constants:
                            print(f"  üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: {len(constants)}")
                    
                    self.configs[str(full_path)] = content
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {config_file}: {e}")
            else:
                print(f"‚ùå {config_file}: –ù–ï –ù–ê–ô–î–ï–ù")
                self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {config_file}")
    
    def analyze_prompts(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        print("\n7Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ú–ü–¢–û–í")
        print("-" * 50)
        
        prompts_dir = self.project_root / 'sisu_bot/bot/ai/prompts'
        if prompts_dir.exists():
            prompt_files = list(prompts_dir.glob('*.txt'))
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompt_files)}")
            
            for prompt_file in prompt_files:
                try:
                    with open(prompt_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    print(f"\nüìÑ {prompt_file.name}:")
                    print(f"  üìù –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"  üìã –°—Ç—Ä–æ–∫: {len(content.splitlines())}")
                    
                    self.prompts[str(prompt_file)] = content
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {prompt_file}: {e}")
        else:
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è prompts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ò—â–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ –∫–æ–¥–µ
        print("\nüîç –ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –∫–æ–¥–µ:")
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
                prompts_in_code = re.findall(r'["\']([^"\']*—Å–∏—Å—É[^"\']*)["\']', content, re.IGNORECASE)
                if prompts_in_code:
                    print(f"  üìÑ {py_file.name}: {len(prompts_in_code)} –ø—Ä–æ–º–ø—Ç–æ–≤")
                    
            except Exception as e:
                continue
    
    def analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\n8Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
        print("-" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ requirements.txt
        req_file = self.project_root / 'requirements.txt'
        if req_file.exists():
            try:
                with open(req_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                lines = [line.strip() for line in content.split('\n') if line.strip() and not line.startswith('#')]
                print(f"üì¶ requirements.txt: {len(lines)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
                
                for line in lines:
                    print(f"  üìã {line}")
                    self.dependencies['requirements'] = lines
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ requirements.txt: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ pyproject.toml
        pyproject_file = self.project_root / 'pyproject.toml'
        if pyproject_file.exists():
            try:
                with open(pyproject_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                print(f"\nüì¶ pyproject.toml –Ω–∞–π–¥–µ–Ω")
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                deps = re.findall(r'([a-zA-Z0-9_-]+)\s*=', content)
                if deps:
                    print(f"  üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(deps)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ pyproject.toml: {e}")
    
    def find_duplicate_code(self):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞"""
        print("\n9Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ï–ì–û–°–Ø –ö–û–î–ê")
        print("-" * 50)
        
        functions = defaultdict(list)
        classes = defaultdict(list)
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
                        func_code = ast.unparse(node)
                        normalized = re.sub(r'\s+', ' ', func_code)
                        functions[normalized].append(f"{py_file}:{node.name}")
                        
                    elif isinstance(node, ast.ClassDef):
                        class_code = ast.unparse(node)
                        normalized = re.sub(r'\s+', ' ', class_code)
                        classes[normalized].append(f"{py_file}:{node.name}")
                        
            except Exception as e:
                continue
        
        # –ò—â–µ–º –¥—É–±–ª–∏
        duplicate_functions = {code: files for code, files in functions.items() if len(files) > 1}
        duplicate_classes = {code: files for code, files in classes.items() if len(files) > 1}
        
        if duplicate_functions:
            print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏: {len(duplicate_functions)}")
            for code, files in list(duplicate_functions.items())[:3]:
                print(f"  –§—É–Ω–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
        
        if duplicate_classes:
            print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã: {len(duplicate_classes)}")
            for code, files in list(duplicate_classes.items())[:3]:
                print(f"  –ö–ª–∞—Å—Å –≤ —Ñ–∞–π–ª–∞—Ö: {files}")
    
    def analyze_imports(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîü –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í")
        print("-" * 50)
        
        import_patterns = defaultdict(list)
        circular_imports = []
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            import_patterns[alias.name].append(str(py_file))
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            import_patterns[node.module].append(str(py_file))
                            
            except Exception as e:
                continue
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        for module, files in import_patterns.items():
            if len(files) > 5:  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –º–Ω–æ–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
                print(f"üì¶ –ß–∞—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è '{module}': {len(files)} —Ñ–∞–π–ª–æ–≤")
                self.imports[module] = files
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        self.check_circular_imports()
    
    def check_circular_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        for py_file in self.project_root.rglob('*.py'):
            if 'handlers' in str(py_file):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ handlers
                    if 'from sisu_bot.bot.handlers' in content:
                        print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ {py_file}")
                        
                except Exception as e:
                    continue
    
    def find_dead_code(self):
        """–ü–æ–∏—Å–∫ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞"""
        print("\n1Ô∏è‚É£1Ô∏è‚É£ –ü–û–ò–°–ö –ú–ï–†–¢–í–û–ì–û –ö–û–î–ê")
        print("-" * 50)
        
        # –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = defaultdict(list)
        function_calls = defaultdict(int)
        
        for py_file in self.project_root.rglob('*.py'):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        all_functions[node.name].append(str(py_file))
                    elif isinstance(node, ast.Call):
                        if isinstance(node.func, ast.Name):
                            function_calls[node.func.id] += 1
                            
            except Exception as e:
                continue
        
        # –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        unused_functions = []
        for func_name, files in all_functions.items():
            if function_calls[func_name] == 0 and not func_name.startswith('_'):
                unused_functions.append((func_name, files))
        
        if unused_functions:
            print(f"üíÄ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(unused_functions)}")
            for func_name, files in unused_functions[:5]:
                print(f"  {func_name} –≤ {files}")
        else:
            print("‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def analyze_business_logic(self):
        """–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        print("\n1Ô∏è‚É£2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò")
        print("-" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        business_processes = {
            'points': '–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤',
            'checkin': '–ß–µ–∫-–∏–Ω —Å–∏—Å—Ç–µ–º–∞',
            'referral': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'donate': '–î–æ–Ω–∞—Ç —Å–∏—Å—Ç–µ–º–∞',
            'games': '–ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'ai': 'AI —Å–∏—Å—Ç–µ–º–∞',
            'tts': '–ì–æ–ª–æ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'learning': '–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è'
        }
        
        for process, description in business_processes.items():
            files_with_process = []
            for py_file in self.project_root.rglob('*.py'):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if process in content.lower():
                        files_with_process.append(str(py_file))
                        
                except Exception as e:
                    continue
            
            print(f"üìä {description}: {len(files_with_process)} —Ñ–∞–π–ª–æ–≤")
            if files_with_process:
                for file in files_with_process[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"  üìÑ {Path(file).name}")
    
    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–ï–ö–¢–£ SISU")
        print("="*80)
        
        print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(self.issues)}")
        print(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {len(self.duplicates)}")
        print(f"üì¶ –ß–∞—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π: {len(self.imports)}")
        print(f"üì® –§–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: {len(self.handlers)}")
        print(f"üîß –§–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏: {len(self.services)}")
        print(f"üõ°Ô∏è –§–∞–π–ª–æ–≤ —Å middleware: {len(self.middlewares)}")
        print(f"üóÑÔ∏è –ú–æ–¥–µ–ª–µ–π –ë–î: {len(self.models)}")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(self.configs)}")
        print(f"üìù –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏: {len(self.prompts)}")
        print(f"üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(self.dependencies)}")
        
        if self.issues:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
        
        print("\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –†–∞–∑–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        print("  2. –í—ã–Ω–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å—ã")
        print("  3. –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã")
        print("  5. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥")
        
        print("\n" + "="*80)
        print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("="*80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent
    analyzer = FullProjectAnalyzer(project_root)
    analyzer.run_full_analysis()

if __name__ == "__main__":
    main()
