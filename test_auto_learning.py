#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sisu_bot.bot.services.auto_learning_service import auto_learning_service
from sisu_bot.bot.services.message_service import message_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_auto_learning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è SisuDatuBot")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
    print("\n1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
    stats = auto_learning_service.get_learning_stats()
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {stats['triggers_count']}")
    print(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_responses']}")
    print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_processed']}")
    print(f"   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n2. –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    unprocessed = message_service.get_unprocessed_messages(limit=10)
    print(f"   - –ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(unprocessed)}")
    
    if unprocessed:
        print("   - –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
        for i, msg in enumerate(unprocessed[:3]):
            print(f"     {i+1}. [{msg.timestamp}] {msg.message_text[:50]}...")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    print("\n3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
    popular_phrases = message_service.get_popular_phrases(days=7, min_count=2)
    print(f"   - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑: {len(popular_phrases)}")
    
    if popular_phrases:
        print("   - –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑:")
        for i, phrase in enumerate(popular_phrases[:5]):
            print(f"     {i+1}. '{phrase['text']}' (—É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {phrase['count']}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {phrase['unique_users']})")
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ
    print("\n4. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è:")
    result = auto_learning_service.auto_learn_from_messages(
        days=7, 
        min_count=2, 
        max_new_triggers=5
    )
    
    if result['success']:
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {result['new_triggers']} –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        print(f"   ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {result['total_responses']}")
        print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è: {result['error']}")
        print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n5. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    updated_stats = auto_learning_service.get_learning_stats()
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {updated_stats['triggers_count']}")
    print(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {updated_stats['total_responses']}")
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_auto_learning()
