import os
from dotenv import load_dotenv
from pathlib import Path
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import QueuePool
from sisu_bot.bot.db.models import Base, User, EmojiMovie, BotState
from sisu_bot.bot.db.session import session_scope
from alembic.config import Config
from alembic import command
from datetime import datetime
from sisu_bot.core.config import TestConfig, PROJECT_ROOT

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.test –ü–ï–†–ï–î –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ (alembic, sqlalchemy) –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
PROJECT_ROOT = Path(__file__).parent.parent.absolute()
dotenv_path = PROJECT_ROOT / ".env.test"

if dotenv_path.exists():
    load_dotenv(dotenv_path=dotenv_path, override=True)
    print(f"Loaded test environment from {dotenv_path}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    os.environ["TEST_MODE"] = "True"
else:
    print(f"Warning: Test environment file not found at {dotenv_path}")

import pytest

# Use test configuration
config = TestConfig()

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞
print(f"DATABASE_URL for tests: {config.DATABASE_URL}")

# Create test engine
test_engine = create_engine(config.DATABASE_URL)
TestSessionLocal = sessionmaker(bind=test_engine)

# –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú engine –≤ session.py, —á—Ç–æ–±—ã –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
import sisu_bot.bot.db.session as session_module
session_module.engine = test_engine
session_module.SessionLocal = TestSessionLocal

def run_migrations():
    """Applies all Alembic migrations."""
    alembic_cfg = Config("alembic.ini")
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º Alembic –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Ñ–∏–∫—Å: —Ä–∞–Ω—å—à–µ alembic –≤—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–µ–ª –Ω–∞ sisu_bot.db –∏–∑ alembic.ini
    alembic_cfg.set_main_option("sqlalchemy.url", config.DATABASE_URL)
    # –û–±—Ö–æ–¥–∏–º –æ—à–∏–±–∫—É "Multiple heads" —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–≤–∏–∑–∏–∏
    command.upgrade(alembic_cfg, "3058c9b24eb1")

@pytest.fixture(scope="session", autouse=True)
def create_test_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –û–î–ò–ù –†–ê–ó –∑–∞ —Å–µ—Å—Å–∏—é."""
    test_db_path = Path(config.DATABASE_URL.replace("sqlite:///", ""))
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if test_db_path.exists():
        os.remove(test_db_path)
    
    print(f"Running migrations on {config.DATABASE_URL}...")
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations()
    print("Migrations applied.")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("Populating database with test data...")
    with session_scope() as session:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [
            User(
                id=1,
                username="user1",
                first_name="Test User 1",
                points=100,
                rank="novice",
                active_days=1,
                referrals=0,
                message_count=10,
                is_supporter=0,
                role="user",
                supporter_tier="none",
                photo_count=0,
                video_count=0,
                is_banned=0,
                created_at=datetime.now(),
                updated_at=datetime.now()
            ),
            User(
                id=2,
                username="user2",
                first_name="Test User 2",
                points=200,
                rank="novice",
                active_days=2,
                referrals=1,
                message_count=20,
                is_supporter=1,
                role="user",
                supporter_tier="basic",
                photo_count=1,
                video_count=1,
                is_banned=0,
                created_at=datetime.now(),
                updated_at=datetime.now()
            ),
            User(
                id=3,
                username="admin",
                first_name="Admin",
                points=300,
                rank="admin",
                active_days=3,
                referrals=2,
                message_count=30,
                is_supporter=1,
                role="admin",
                supporter_tier="premium",
                photo_count=2,
                video_count=2,
                is_banned=0,
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
        ]
        session.add_all(users)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏-—Ñ–∏–ª—å–º—ã
        emoji_movies = [
            EmojiMovie(id=1, emoji="üé¨", answers="—Ñ–∏–ª—å–º,–∫–∏–Ω–æ"),
            EmojiMovie(id=2, emoji="ü¶Åüëë", answers="–∫–æ—Ä–æ–ª—å –ª–µ–≤,the lion king"),
            EmojiMovie(id=3, emoji="üßô‚Äç‚ôÇÔ∏èüíç", answers="–≤–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü,the lord of the rings")
        ]
        session.add_all(emoji_movies)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        bot_states = [
            BotState(key='mood', value='happy'),
            BotState(key='setting1', value='value1'),
            BotState(key='setting2', value='value2')
        ]
        session.add_all(bot_states)
    
    yield
    
    print(f"Deleting test database: {test_db_path}")
    # –£–¥–∞–ª—è–µ–º –±–∞–∑—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if test_db_path.exists():
        os.remove(test_db_path)

@pytest.fixture(scope="session")
def engine():
    """Create test database engine."""
    return test_engine

@pytest.fixture(scope="function")
def session() -> Session:
    """Create test database session."""
    session = TestSessionLocal()
    
    try:
        yield session
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        for table in reversed(Base.metadata.sorted_tables):
            session.execute(table.delete())
        session.commit()
        session.close()

@pytest.fixture
def test_user(session: Session) -> User:
    """Create test user."""
    user = User(
        id=1,
        username="test_user",
        first_name="Test User",
        points=0,
        rank="–Ω–æ–≤–∏—á–æ–∫",
        active_days=0,
        referrals=0,
        message_count=0,
        is_supporter=False,
        role="user",
        supporter_tier="none",
        photo_count=0,
        video_count=0,
        is_banned=False,
        created_at=datetime.now(),
        updated_at=datetime.now()
    )
    session.add(user)
    session.commit()
    return user

@pytest.fixture
def db_session():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    with session_scope() as session:
        yield session