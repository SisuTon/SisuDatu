import pytest
from unittest.mock import MagicMock
from sisu_bot.bot.services import games_service
from sisu_bot.bot.db.models import EmojiMovie

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture
def db_session():
    session_mock = MagicMock()
    # –ü–∞—Ç—á–∏–º Session —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ games_service
    with pytest.MonkeyPatch.context() as mp:
        mp.setattr('sisu_bot.bot.services.games_service.Session', MagicMock(return_value=session_mock))
        yield session_mock

def test_bulk_add_emoji_movies(db_session):
    movies_data = [
        {"emoji": "üòÄüé¨", "answers": ["movie1", "—Ñ–∏–ª—å–º1"]},
        {"emoji": "üöóüí®", "answers": ["fast and furious", "—Ñ–æ—Ä—Å–∞–∂"]}
    ]
    games_service.bulk_add_emoji_movies(movies_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã add –∏ commit –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
    assert db_session.add.call_count == len(movies_data)
    assert db_session.commit.called
    assert db_session.close.called

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ add
    # –í–∞–∂–Ω–æ: mock.add.call_args_list[0].args[0] –±—É–¥–µ—Ç mock-–æ–±—ä–µ–∫—Ç–æ–º, –µ—Å–ª–∏ EmojiMovie —Ç–æ–∂–µ –º–æ–∫–Ω—É—Ç—å
    # –ï—Å–ª–∏ EmojiMovie –Ω–µ –º–æ–∫–∞–µ—Ç—Å—è, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä EmojiMovie, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    added_movie = db_session.add.call_args_list[0].args[0]
    assert isinstance(added_movie, EmojiMovie)
    assert added_movie.emoji == "üòÄüé¨"
    assert added_movie.answers == "movie1,—Ñ–∏–ª—å–º1"

def test_get_random_emoji_movie(db_session):
    # –ú–æ–∫–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ query.all()
    mock_movie1 = EmojiMovie(id=1, emoji="üé¨", answers="—Ñ–∏–ª—å–º")
    mock_movie2 = EmojiMovie(id=2, emoji="üöó", answers="–º–∞—à–∏–Ω–∞")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ query().all() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—à —Å–ø–∏—Å–æ–∫ –º–æ–∫–æ–≤
    db_session.query.return_value.all.return_value = [mock_movie1, mock_movie2]

    movie = games_service.get_random_emoji_movie()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –º–æ–∫–æ–≤ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    assert movie.id in [mock_movie1.id, mock_movie2.id]
    assert movie.emoji in [mock_movie1.emoji, mock_movie2.emoji]
    assert movie.answers in [mock_movie1.answers, mock_movie2.answers]
    assert db_session.query.called
    assert db_session.close.called

def test_get_random_emoji_movie_no_movies(db_session):
    # –ú–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ query().all() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    db_session.query.return_value.all.return_value = []

    movie = games_service.get_random_emoji_movie()
    assert movie is None
    assert db_session.query.called
    assert db_session.close.called

def test_check_emoji_movie_answer_correct(db_session):
    mock_movie = EmojiMovie(id=1, emoji="üé¨", answers="—Ñ–∏–ª—å–º,–∫–∏–Ω–æ")
    db_session.query.return_value.filter_by.return_value.first.return_value = mock_movie

    assert games_service.check_emoji_movie_answer(1, "—Ñ–∏–ª—å–º") is True
    assert games_service.check_emoji_movie_answer(1, "–ö–∏–Ω–æ") is True # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
    assert db_session.query.called
    assert db_session.close.called

def test_check_emoji_movie_answer_incorrect(db_session):
    mock_movie = EmojiMovie(id=1, emoji="üé¨", answers="—Ñ–∏–ª—å–º,–∫–∏–Ω–æ")
    db_session.query.return_value.filter_by.return_value.first.return_value = mock_movie

    assert games_service.check_emoji_movie_answer(1, "–º—É–ª—å—Ç—Ñ–∏–ª—å–º") is False
    assert db_session.query.called
    assert db_session.close.called

def test_check_emoji_movie_answer_movie_not_found(db_session):
    db_session.query.return_value.filter_by.return_value.first.return_value = None

    assert games_service.check_emoji_movie_answer(99, "–ª—é–±–æ–π –æ—Ç–≤–µ—Ç") is False
    assert db_session.query.called
    assert db_session.close.called

# –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π games_service –∑–¥–µ—Å—å 