import os
import json
import importlib.util
import sys
from pathlib import Path
from typing import Dict, List
import datetime

class ProjectAuditor:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.report = {
            "metadata": {
                "timestamp": datetime.datetime.now().isoformat(),
                "project_root": str(self.project_root)
            },
            "structure": {},
            "di_analysis": {},
            "migration_status": {},
            "dependencies": [],
            "docker_files": [],
            "issues": []
        }

    def scan_structure(self) -> Dict:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏."""
        structure = {}
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not d.startswith(('.', '__'))]
            files = [f for f in files if not f.startswith('.')]
            rel_path = os.path.relpath(root, self.project_root)
            structure[rel_path] = {
                "files": files,
                "dirs": dirs,
                "size": sum(os.path.getsize(os.path.join(root, f)) for f in files 
                          if os.path.isfile(os.path.join(root, f)))
            }
        self.report["structure"] = structure
        return structure

    def analyze_di(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤."""
        di_data = {}
        for di_file in self.project_root.glob("**/*container*.py"):
            try:
                spec = importlib.util.spec_from_file_location("di_module", di_file)
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                providers = []
                for name, obj in module.__dict__.items():
                    if "Container" in name or "Provider" in name:
                        providers.append(name)
                di_data[str(di_file.relative_to(self.project_root))] = {
                    "providers": providers,
                    "dependencies": self._find_di_dependencies(di_file)
                }
            except Exception as e:
                self.report["issues"].append(f"DI analysis failed for {di_file}: {str(e)}")
        self.report["di_analysis"] = di_data
        return di_data

    def check_migration(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π."""
        old_new_map = {
            "sisu_bot/bot/services/": "app/domain/services/",
            "sisu_bot/core/config.py": "app/shared/config/settings.py"
        }
        migration_status = {"migrated": [], "not_migrated": []}
        for old_path, new_path in old_new_map.items():
            old_file = self.project_root / old_path
            if old_file.exists():
                new_file = self.project_root / new_path
                status = "migrated" if new_file.exists() else "not_migrated"
                migration_status[status].append(str(old_file.relative_to(self.project_root)))
        self.report["migration_status"] = migration_status
        return migration_status

    def generate_report(self, format: str = "all") -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å."""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        json_report_path = self.project_root / f"audit_report_{timestamp}.json"
        md_report_path = self.project_root / f"audit_report_{timestamp}.md"
        with open(json_report_path, 'w', encoding='utf-8') as f:
            json.dump(self.report, f, indent=4, ensure_ascii=False)
        if format in ("md", "all"):
            self._generate_markdown_report(md_report_path)
            # –í—ã–≤–æ–¥–∏–º Markdown-–æ—Ç—á—ë—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            with open(md_report_path, 'r', encoding='utf-8') as f:
                print("\n" + "="*40 + "\n–ê–£–î–ò–¢ (Markdown):\n" + "="*40)
                print(f.read())
        self.print_summary()
        print(f"\nüìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n- JSON: {json_report_path}\n- Markdown: {md_report_path}")
        if self.report["issues"]:
            sys.exit(1)  # –î–ª—è CI/CD

    def print_summary(self):
        print("\n=== –ö–†–ê–¢–ö–û–ï SUMMARY ===")
        print(f"–î–∞—Ç–∞: {self.report['metadata']['timestamp']}")
        print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {sum(len(data['files']) for data in self.report['structure'].values())}")
        print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(self.report['migration_status']['migrated'])}")
        print(f"–ù–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(self.report['migration_status']['not_migrated'])}")
        if self.report['issues']:
            print("–ü—Ä–æ–±–ª–µ–º—ã:")
            for issue in self.report['issues']:
                print(" -", issue)
        else:
            print("–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")

    def _find_di_dependencies(self, di_file: Path) -> List[str]:
        dependencies = []
        with open(di_file, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            for line in lines:
                if "import" in line or "from" in line:
                    dependencies.append(line.strip())
                elif "providers." in line or "Factory(" in line:
                    dependencies.append(line.strip())
        return dependencies

    def _generate_markdown_report(self, path: Path) -> None:
        md_content = f"""# –ê—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root.name}

## üìå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
- **–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞**: {self.report['metadata']['timestamp']}
- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤**: {sum(len(data['files']) for data in self.report['structure'].values())}

## üèó –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```json
{json.dumps(self.report['structure'], indent=2)}
```

## ‚öôÔ∏è DI-–∞–Ω–∞–ª–∏–∑
```json
{json.dumps(self.report['di_analysis'], indent=2)}
```

## üö¶ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
- **–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ**: {len(self.report['migration_status']['migrated'])}
- **–ù–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ**: {len(self.report['migration_status']['not_migrated'])}

## üö® –ü—Ä–æ–±–ª–µ–º—ã
{'- ' + '\n- '.join(self.report['issues']) if self.report['issues'] else '–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º'}
"""
        with open(path, 'w', encoding='utf-8') as f:
            f.write(md_content)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    auditor = ProjectAuditor(os.getcwd())
    auditor.scan_structure()
    auditor.analyze_di()
    auditor.check_migration()
    auditor.generate_report() 