#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π–¥–æ–≤ –∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_raid_support():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–π–¥–æ–≤"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–π–¥–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–π–¥–∞ –±–µ–∑ –∞–¥–º–∏–Ω–∞
    print("1. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–π–¥–∞ –±–µ–∑ –∞–¥–º–∏–Ω–∞:")
    for i in range(5):
        raid_support = meme_persona_service.get_raid_support("raidleader")
        print(f"{i+1}. {raid_support}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–π–¥–∞ —Å –∞–¥–º–∏–Ω–æ–º
    print("\n2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–π–¥–∞ —Å –∞–¥–º–∏–Ω–æ–º:")
    for i in range(5):
        raid_support = meme_persona_service.get_raid_support("raidleader", "admin")
        print(f"{i+1}. {raid_support}")
    
    # –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–π–¥–æ–≤
    print("\n3. –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–π–¥–æ–≤:")
    raid_users = ["crypto_king", "ton_hodler", "moon_raider", "pump_master", "diamond_hands"]
    for user in raid_users:
        raid_support = meme_persona_service.get_raid_support(user, "admin")
        print(f"@{user}: {raid_support}")

async def test_admin_quotes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤"""
    print("\nüëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –¶–∏—Ç–∞—Ç—ã –∞–¥–º–∏–Ω–æ–≤
    print("1. –¶–∏—Ç–∞—Ç—ã –∞–¥–º–∏–Ω–æ–≤:")
    admin_usernames = ["admin1", "admin2", "admin3", "moderator", "owner"]
    
    for admin in admin_usernames:
        admin_quote = meme_persona_service.get_admin_quote(admin)
        print(f"@{admin}: {admin_quote}")
    
    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    print("\n2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    for i in range(5):
        admin_quote = meme_persona_service.get_admin_quote("admin")
        print(f"{i+1}. {admin_quote}")

async def test_raid_detection_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–π–¥–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–π–¥–æ–≤")
    print("=" * 50)
    
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–π–¥–æ–≤
    twitter_patterns = [
        r'https?://twitter\.com/',
        r'https?://x\.com/',
        r'https?://t\.co/',
        r'@\w+.*twitter',
        r'@\w+.*x\.com',
        r'—Ä–µ–π–¥',
        r'raid'
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        "https://twitter.com/user/status/123456",
        "https://x.com/user/status/123456",
        "https://t.co/abc123",
        "@elonmusk twitter post",
        "@user x.com link",
        "–†–µ–π–¥ –Ω–∞ —Ç–≤–∏—Ç—Ç–µ—Ä!",
        "Raid time!",
        "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!"
    ]
    
    print("–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å —Ä–µ–π–¥–∞:")
    for message in test_messages:
        is_raid = any(re.search(pattern, message, re.IGNORECASE) for pattern in twitter_patterns)
        status = "üöÄ –†–ï–ô–î" if is_raid else "‚ùå –ù–ï –†–ï–ô–î"
        print(f"{status}: {message}")

async def test_admin_quote_probability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤"""
    print("\nüé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    quote_count = 0
    total_tests = 1000
    
    for i in range(total_tests):
        if meme_persona_service.should_quote_admin():
            quote_count += 1
    
    probability = (quote_count / total_tests) * 100
    print(f"–ò–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–ª–∞ –∞–¥–º–∏–Ω–∞ {quote_count} —Ä–∞–∑ ({probability:.1f}%)")
    
    if 8 <= probability <= 12:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ (8-12%)")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ –≤ –Ω–æ—Ä–º–µ")

async def test_raid_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–µ–π–¥–æ–≤"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–µ–π–¥–æ–≤")
    print("=" * 50)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –†–µ–π–¥ —Å –∞–¥–º–∏–Ω–æ–º
    print("–°—Ü–µ–Ω–∞—Ä–∏–π 1: –†–µ–π–¥ —Å –∞–¥–º–∏–Ω–æ–º")
    raid_support = meme_persona_service.get_raid_support("crypto_king", "admin")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {raid_support}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–µ–π–¥ –±–µ–∑ –∞–¥–º–∏–Ω–∞
    print("\n–°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–µ–π–¥ –±–µ–∑ –∞–¥–º–∏–Ω–∞")
    raid_support = meme_persona_service.get_raid_support("moon_raider")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {raid_support}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –¶–∏—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
    print("\n–°—Ü–µ–Ω–∞—Ä–∏–π 3: –¶–∏—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω–∞")
    admin_quote = meme_persona_service.get_admin_quote("moderator")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {admin_quote}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    print("\n–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
    learned_response = "—É–ø–∞–ª –Ω–µ –±–∏—Ç–æ–∫, –∞ –º–æ—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞"
    admin_quote = meme_persona_service.get_admin_quote("admin")
    combined_response = f"{learned_response} {admin_quote}"
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {combined_response}")

async def test_raid_keywords():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–µ–π–¥–æ–≤"""
    print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ä–µ–π–¥–æ–≤")
    print("=" * 50)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–π–¥–æ–≤
    raid_keywords = [
        "—Ä–µ–π–¥",
        "raid",
        "twitter",
        "x.com",
        "—Ç–≤–∏—Ç—Ç–µ—Ä",
        "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support",
        "–∏–¥–µ–º",
        "let's go",
        "–≤–º–µ—Å—Ç–µ"
    ]
    
    print("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–π–¥–æ–≤:")
    for keyword in raid_keywords:
        print(f"- {keyword}")
    
    print("\n–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
    example_messages = [
        "–†–µ–π–¥ –Ω–∞ —Ç–≤–∏—Ç—Ç–µ—Ä! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º!",
        "Raid time! Let's go to twitter!",
        "–ò–¥–µ–º –≤ —Ç–≤–∏—Ç—Ç–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!",
        "Support the raid on x.com!",
        "–í–º–µ—Å—Ç–µ —Ä–µ–π–¥–∏–º —Ç–≤–∏—Ç—Ç–µ—Ä!"
    ]
    
    for message in example_messages:
        print(f"üìù {message}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–π–¥–æ–≤ –∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_raid_support()
        await test_admin_quotes()
        await test_raid_detection_patterns()
        await test_admin_quote_probability()
        await test_raid_scenarios()
        await test_raid_keywords()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–π–¥—ã –∏ —Ü–∏—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–æ–≤! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
