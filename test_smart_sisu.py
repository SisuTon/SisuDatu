#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_smart_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –°–∏—Å—É"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É")
    print("=" * 60)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏
    print("1. –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏):")
    normal_questions = [
        "–°–∏—Å—É –∫–∞–∫ –¥–µ–ª–∞?",
        "–°–∏—Å—É –∫–∞–∫ —Ç—ã?",
        "–°–∏—Å—É —á—Ç–æ –¥–µ–ª–∞–µ—à—å?",
        "–°–∏—Å—É –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?"
    ]
    
    for question in normal_questions:
        response = await meme_persona_service.generate_smart_response(question, user_id, chat_id)
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
    print("\n2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º):")
    greetings = [
        "–°–∏—Å—É –ø—Ä–∏–≤–µ—Ç!",
        "–°–∏—Å—É –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!",
        "–°–∏—Å—É –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    ]
    
    for greeting in greetings:
        response = await meme_persona_service.generate_smart_response(greeting, user_id, chat_id)
        print(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {greeting}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 3: –ö—Ä–∏–ø—Ç–æ-–º–µ–º—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–≥–µ–Ω—Å–∫–∏–º–∏
    print("\n3. –ö—Ä–∏–ø—Ç–æ-–º–µ–º—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–≥–µ–Ω—Å–∫–∏–º–∏):")
    crypto_messages = [
        "–°–∏—Å—É –±–∏—Ç–æ–∫ —É–ø–∞–ª",
        "–°–∏—Å—É –¢–û–ù –∫ –ª—É–Ω–µ!",
        "–°–∏—Å—É –≤–∑—è–ª —à–æ—Ä—Ç",
        "–°–∏—Å—É —Ö–æ–ª–¥–∏–º?",
        "–°–∏—Å—É –∫—Ä–∏–ø—Ç–∞ —Ä—É–ª–∏—Ç"
    ]
    
    for crypto_msg in crypto_messages:
        response = await meme_persona_service.generate_smart_response(crypto_msg, user_id, chat_id)
        print(f"–ö—Ä–∏–ø—Ç–æ: {crypto_msg}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 4: –ü–æ–¥–∫–æ–ª—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–≥–µ–Ω—Å–∫–∏–º–∏ –ø–æ–¥–∫–æ–ª–∞–º–∏
    print("\n4. –ü–æ–¥–∫–æ–ª—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–≥–µ–Ω—Å–∫–∏–º–∏ –ø–æ–¥–∫–æ–ª–∞–º–∏):")
    teasing_messages = [
        "–°–∏—Å—É –ª–æ—Ö",
        "–°–∏—Å—É –¥—É—Ä–∞–∫",
        "–°–∏—Å—É –∏–¥–∏–æ—Ç",
        "–°–∏—Å—É —Ç—É–ø–æ–π",
        "–°–∏—Å—É –∑–∞—Ç–∫–Ω–∏—Å—å"
    ]
    
    for teasing_msg in teasing_messages:
        response = await meme_persona_service.generate_smart_response(teasing_msg, user_id, chat_id)
        print(f"–ü–æ–¥–∫–æ–ª: {teasing_msg}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 5: –í–æ–ø—Ä–æ—Å—ã –º–Ω–µ–Ω–∏—è - –º–µ–º–Ω–æ, –Ω–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ
    print("\n5. –í–æ–ø—Ä–æ—Å—ã –º–Ω–µ–Ω–∏—è (–º–µ–º–Ω–æ, –Ω–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ):")
    opinion_questions = [
        "–°–∏—Å—É —á—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É?",
        "–°–∏—Å—É —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ —Ä—ã–Ω–∫–µ?",
        "–°–∏—Å—É —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –±—É–¥—É—â–µ–º?"
    ]
    
    for opinion_q in opinion_questions:
        response = await meme_persona_service.generate_smart_response(opinion_q, user_id, chat_id)
        print(f"–ú–Ω–µ–Ω–∏–µ: {opinion_q}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ - –∞–¥–µ–∫–≤–∞—Ç–Ω–æ
    print("\n6. –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ (–∞–¥–µ–∫–≤–∞—Ç–Ω–æ):")
    help_requests = [
        "–°–∏—Å—É —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç—É",
        "–°–∏—Å—É –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω",
        "–°–∏—Å—É –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"
    ]
    
    for help_req in help_requests:
        response = await meme_persona_service.generate_smart_response(help_req, user_id, chat_id)
        print(f"–ü–æ–º–æ—â—å: {help_req}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 7: –û—Å—Ç–∞–ª—å–Ω–æ–µ - —Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    print("\n7. –û—Å—Ç–∞–ª—å–Ω–æ–µ (—Å–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã):")
    other_messages = [
        "–°–∏—Å—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        "–°–∏—Å—É –ø–æ–Ω—è—Ç–Ω–æ",
        "–°–∏—Å—É –∞–≥–∞"
    ]
    
    for other_msg in other_messages:
        response = await meme_persona_service.generate_smart_response(other_msg, user_id, chat_id)
        print(f"–û—Å—Ç–∞–ª—å–Ω–æ–µ: {other_msg}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)

async def test_response_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(3):
        response = meme_persona_service._get_normal_response()
        print(f"{i+1}. {response}")
    
    print("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(3):
        response = meme_persona_service._get_greeting_response()
        print(f"{i+1}. {response}")
    
    print("\n–ö—Ä–∏–ø—Ç–æ-–¥–µ–≥–µ–Ω—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(3):
        response = meme_persona_service._get_crypto_degen_response()
        print(f"{i+1}. {response}")
    
    print("\n–ü–æ–¥–∫–æ–ª—ã:")
    for i in range(3):
        response = meme_persona_service._get_teasing_response()
        print(f"{i+1}. {response}")
    
    print("\n–ú–Ω–µ–Ω–∏—è:")
    for i in range(3):
        response = meme_persona_service._get_opinion_response()
        print(f"{i+1}. {response}")
    
    print("\n–ü–æ–º–æ—â—å:")
    for i in range(3):
        response = meme_persona_service._get_help_response()
        print(f"{i+1}. {response}")
    
    print("\n–°–º–µ—à–∞–Ω–Ω—ã–µ:")
    for i in range(3):
        response = meme_persona_service._get_mixed_response()
        print(f"{i+1}. {response}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_smart_responses()
        await test_response_types()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å —É–º–Ω–∞—è –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
