#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ SisuDatuBot
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é, –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
"""

import asyncio
import json
import logging
import sys
import time
import timeit
from pathlib import Path
from unittest.mock import patch, MagicMock
from typing import Dict, Any, Optional
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
try:
    from app.shared.config.settings import Settings
    from app.infrastructure.db.models import User
    from app.infrastructure.db.session import Session
    from app.shared.config import DB_PATH
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class FullBusinessLogicTester:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é –∏ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.settings = Settings()
        self.test_user_id = 999999999
        self.test_results: Dict[str, bool] = {}
        self.engine = create_engine(f'sqlite:///{DB_PATH}')
        self.Session = sessionmaker(bind=self.engine)
        self.session = self.Session()
        self.test_user: Optional[User] = None
        
    def setUp(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = self.session.query(User).filter_by(id=self.test_user_id).first()
            if existing_user:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.test_user = existing_user
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.test_user = User(
                    id=self.test_user_id,
                    username="test_user",
                    first_name="Test User",
                    points=100,
                    rank="novice",
                    active_days=5,
                    referrals=2
                )
                self.session.add(self.test_user)
                self.session.commit()
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.session.rollback()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.session.query(User).filter_by(id=self.test_user_id).delete()
            self.session.commit()
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            self.session.close()

    async def test_voice_synthesis_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)...")
        try:
            from app.infrastructure.ai.providers.yandex_speechkit_tts import synthesize_sisu_voice
            
            # –ú–æ–∫–∏—Ä—É–µ–º aiohttp —Å–µ—Å—Å–∏—é
            with patch('aiohttp.ClientSession') as mock_session:
                mock_response = MagicMock()
                mock_response.status = 200
                mock_response.read.return_value = b"fake_audio_data"
                
                mock_session.return_value.__aenter__.return_value.post.return_value.__aenter__.return_value = mock_response
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                result = await synthesize_sisu_voice("–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞")
                
                if result:
                    logger.info("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑: —Ä–∞–±–æ—Ç–∞–µ—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)")
                    self.test_results['voice_synthesis_async'] = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.test_results['voice_synthesis_async'] = False
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            self.test_results['voice_synthesis_async'] = False
            return False

    def test_points_workflow_with_db_check(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤...")
        try:
            from app.domain.services.gamification.points import add_points, get_user
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
            initial_user = get_user(self.test_user_id)
            initial_points = initial_user.points if initial_user else 0
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
            points_to_add = 50
            add_points(self.test_user_id, points_to_add, username="test_user")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
            updated_user = get_user(self.test_user_id)
            if not updated_user:
                logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
                self.test_results['points_workflow'] = False
                return False
            
            expected_points = initial_points + points_to_add
            if updated_user.points == expected_points:
                logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç (–±—ã–ª–æ {initial_points}, —Å—Ç–∞–ª–æ {updated_user.points})")
                self.test_results['points_workflow'] = True
                return True
            else:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –±–∞–ª–ª—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_points}, –ø–æ–ª—É—á–µ–Ω–æ {updated_user.points}")
                self.test_results['points_workflow'] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ workflow —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤: {e}")
            self.test_results['points_workflow'] = False
            return False

    def test_rank_system_parametrized(self):
        """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–≥–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–≥–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ)...")
        try:
            from app.domain.services.gamification.points import get_rank_by_points
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏: (–±–∞–ª–ª—ã, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–Ω–≥) - –∏–∑ ranks.json
            test_cases = [
                (0, "novice"),
                (100, "seeker"), 
                (500, "guardian"),
                (1000, "dragonlead"),
                (5000, "shugosha")
            ]
            
            all_passed = True
            for points, expected_rank in test_cases:
                rank_info = get_rank_by_points(points)
                actual_rank = rank_info.get("main_rank", "unknown")
                
                if actual_rank == expected_rank:
                    logger.info(f"‚úÖ –†–∞–Ω–≥ –¥–ª—è {points} –±–∞–ª–ª–æ–≤: {actual_rank}")
                else:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è {points} –±–∞–ª–ª–æ–≤: –æ–∂–∏–¥–∞–ª—Å—è {expected_rank}, –ø–æ–ª—É—á–µ–Ω {actual_rank}")
                    all_passed = False
            
            self.test_results['rank_system_parametrized'] = all_passed
            return all_passed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–≥–æ–≤: {e}")
            self.test_results['rank_system_parametrized'] = False
            return False

    def test_json_files_validation(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)...")
        try:
            required_files = {
                "phrases.json": (dict, "–°–ª–æ–≤–∞—Ä—å —Ñ—Ä–∞–∑"),
                "troll_triggers.json": (dict, "–¢—Ä–æ–ª–ª—å —Ç—Ä–∏–≥–≥–µ—Ä—ã"),
                "learning_data.json": (dict, "–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"),
                "sisu_persona.json": (dict, "–ü–µ—Ä—Å–æ–Ω–∞ –°–∏—Å—É"),
                "games_data.json": (dict, "–î–∞–Ω–Ω—ã–µ –∏–≥—Ä"),
                "ranks.json": (dict, "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤")
            }
            
            all_valid = True
            for file_name, (expected_type, description) in required_files.items():
                file_path = self.settings.data_dir / file_name
                
                if not file_path.exists():
                    logger.error(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    all_valid = False
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    if isinstance(data, expected_type):
                        logger.info(f"‚úÖ {file_name}: {description} - –≤–∞–ª–∏–¥–µ–Ω")
                    else:
                        logger.error(f"‚ùå {file_name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                        all_valid = False
                        
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå {file_name}: –æ—à–∏–±–∫–∞ JSON - {e}")
                    all_valid = False
                except Exception as e:
                    logger.error(f"‚ùå {file_name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
                    all_valid = False
            
            self.test_results['json_files_validation'] = all_valid
            return all_valid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON —Ñ–∞–π–ª–æ–≤: {e}")
            self.test_results['json_files_validation'] = False
            return False

    def test_configuration_validation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)...")
        try:
            required_settings = [
                ('telegram_bot_token', str, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞"),
                ('yandex_api_key', str, "API –∫–ª—é—á Yandex"),
                ('yandex_folder_id', str, "Folder ID Yandex"),
                ('superadmin_ids', list, "ID —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤"),
                ('data_dir', Path, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö")
            ]
            
            all_valid = True
            for setting_name, expected_type, description in required_settings:
                if not hasattr(self.settings, setting_name):
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_name} ({description})")
                    all_valid = False
                    continue
                
                setting_value = getattr(self.settings, setting_name)
                if not setting_value:
                    logger.error(f"‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {setting_name} ({description})")
                    all_valid = False
                    continue
                
                if not isinstance(setting_value, expected_type):
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø {setting_name}: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {type(setting_value)}")
                    all_valid = False
                    continue
                
                logger.info(f"‚úÖ {setting_name}: {description} - –≤–∞–ª–∏–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            from app.shared.config.settings import REQUIRED_SUBSCRIPTIONS
            if REQUIRED_SUBSCRIPTIONS:
                subs_count = len(REQUIRED_SUBSCRIPTIONS)
                logger.info(f"‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subs_count} –∫–∞–Ω–∞–ª–æ–≤")
                for sub in REQUIRED_SUBSCRIPTIONS:
                    logger.info(f"   - {sub['title']}: {sub['chat_id']}")
            else:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
                all_valid = False
            
            self.test_results['configuration_validation'] = all_valid
            return all_valid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['configuration_validation'] = False
            return False

    def test_dependencies_validation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            required_packages = [
                ('aiogram', 'aiogram'),
                ('sqlalchemy', 'sqlalchemy'),
                ('pydantic', 'pydantic'),
                ('dependency_injector', 'dependency_injector'),
                ('aiohttp', 'aiohttp'),
                ('requests', 'requests')
            ]
            
            all_installed = True
            for package_name, import_name in required_packages:
                try:
                    __import__(import_name)
                    logger.info(f"‚úÖ {package_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except ImportError:
                    logger.error(f"‚ùå {package_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    all_installed = False
            
            self.test_results['dependencies_validation'] = all_installed
            return all_installed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.test_results['dependencies_validation'] = False
            return False

    def test_performance_critical_functions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        try:
            from app.domain.services.gamification.points import add_points
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
            def test_add_points():
                add_points(self.test_user_id, 1)
            
            execution_time = timeit.timeit(test_add_points, number=100)
            
            if execution_time < 1.0:  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è 100 –æ–ø–µ—Ä–∞—Ü–∏–π
                logger.info(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å add_points: {execution_time:.3f} —Å–µ–∫ –¥–ª—è 100 –æ–ø–µ—Ä–∞—Ü–∏–π")
                self.test_results['performance_test'] = True
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å add_points: {execution_time:.3f} —Å–µ–∫")
                self.test_results['performance_test'] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.test_results['performance_test'] = False
            return False

    async def test_ai_generation_with_mocking(self):
        """–¢–µ—Å—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º API"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º)...")
        try:
            from app.infrastructure.ai.providers.yandex_gpt import generate_sisu_reply
            
            # –ú–æ–∫–∏—Ä—É–µ–º aiohttp —Å–µ—Å—Å–∏—é
            with patch('aiohttp.ClientSession') as mock_session:
                mock_response = MagicMock()
                mock_response.status = 200
                mock_response.json.return_value = {
                    "result": {
                        "alternatives": [{"message": {"text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ –°–∏—Å—É?"}}]
                    }
                }
                
                mock_session.return_value.__aenter__.return_value.post.return_value.__aenter__.return_value = mock_response
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                result = await generate_sisu_reply("–ü—Ä–∏–≤–µ—Ç")
                
                if result and "–ü—Ä–∏–≤–µ—Ç" in result:
                    logger.info("‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º)")
                    self.test_results['ai_generation_mocked'] = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.test_results['ai_generation_mocked'] = False
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['ai_generation_mocked'] = False
            return False

    def test_database_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            from sqlalchemy import inspect
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            
            required_tables = ['users', 'chat_points']
            missing_tables = [table for table in required_tables if table not in tables]
            
            if missing_tables:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                self.test_results['database_integrity'] = False
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_count = self.session.query(User).count()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            if 'users' in tables:
                columns = [col['name'] for col in inspector.get_columns('users')]
                required_columns = ['id', 'username', 'points', 'rank']
                missing_columns = [col for col in required_columns if col not in columns]
                
                if missing_columns:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤ users: {missing_columns}")
                    self.test_results['database_integrity'] = False
                    return False
                else:
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            self.test_results['database_integrity'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
            self.test_results['database_integrity'] = False
            return False

    async def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ SisuDatuBot")
        logger.info("=" * 70)
        
        start_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.setUp()
        
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            tests = [
                ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration_validation),
                ("JSON —Ñ–∞–π–ª—ã", self.test_json_files_validation),
                ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.test_dependencies_validation),
                ("–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤", self.test_points_workflow_with_db_check),
                ("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤", self.test_rank_system_parametrized),
                ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_performance_critical_functions),
                ("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î", self.test_database_integrity),
            ]
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            async_tests = [
                ("–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑", self.test_voice_synthesis_async),
                ("AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", self.test_ai_generation_with_mocking),
            ]
            
            # –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            for test_name, test_func in tests:
                logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
                try:
                    success = test_func()
                    if success:
                        logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    else:
                        logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                    self.test_results[test_name.lower().replace(' ', '_')] = False
            
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            for test_name, test_func in async_tests:
                logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
                try:
                    success = await test_func()
                    if success:
                        logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    else:
                        logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                    self.test_results[test_name.lower().replace(' ', '_')] = False
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.tearDown()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        execution_time = time.time() - start_time
        self._print_final_report(execution_time)
        
        return all(self.test_results.values())

    def _print_final_report(self, execution_time: float):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 70)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 70)
        
        passed_tests = sum(1 for result in self.test_results.values() if result)
        total_tests = len(self.test_results)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name}: {status}")
        
        logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            logger.warning(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON
        report_data = {
            "timestamp": time.time(),
            "execution_time": execution_time,
            "passed_tests": passed_tests,
            "total_tests": total_tests,
            "results": self.test_results
        }
        
        report_file = Path("test_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ SisuDatuBot')
    parser.add_argument('--test', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç')
    parser.add_argument('--async', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--sync', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--performance', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    
    args = parser.parse_args()
    
    tester = FullBusinessLogicTester()
    
    if args.test:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        test_method = getattr(tester, args.test, None)
        if test_method:
            if asyncio.iscoroutinefunction(test_method):
                success = asyncio.run(test_method())
            else:
                success = test_method()
            exit(0 if success else 1)
        else:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{args.test}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            exit(1)
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        success = asyncio.run(tester.run_all_tests())
        exit(0 if success else 1)


if __name__ == "__main__":
    main() 