#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π SisuDatuBot
–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!
"""

import asyncio
import logging
from datetime import datetime
from sisu_bot.bot.services.persistence_service import persistence_service
from sisu_bot.bot.services.antifraud_service import antifraud_service
from sisu_bot.bot.services.ai_limits_service import ai_limits_service
from sisu_bot.core.config import DB_PATH
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

class BotTester:
    def __init__(self):
        self.test_results = []
        self.session = Session()
    
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        result = f"{status} | {test_name}"
        if details:
            result += f" | {details}"
        
        self.test_results.append(result)
        logger.info(result)
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            result = self.session.execute(text("SELECT 1")).fetchone()
            self.log_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", True)
            return True
        except Exception as e:
            self.log_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", False, str(e))
            return False
    
    def test_persistence_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        try:
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
            test_data = {"test": "value", "timestamp": datetime.now().isoformat()}
            persistence_service.save_data("test_key", test_data)
            
            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
            loaded_data = persistence_service.load_data("test_key")
            
            if loaded_data == test_data:
                self.log_test("–°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", True)
                return True
            else:
                self.log_test("–°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", False, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return False
                
        except Exception as e:
            self.log_test("–°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", False, str(e))
            return False
    
    def test_antifraud_service(self):
        """–¢–µ—Å—Ç –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            can_refer, reason = antifraud_service.check_referral_fraud(
                user_id=12345, 
                ref_id=67890,
                username="test_user",
                first_name="Test"
            )
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            can_activate, reason = antifraud_service.check_activation_fraud(12345)
            
            # –¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ
            antifraud_service.mark_suspicious(12345, "Test suspicious activity")
            
            self.log_test("–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–µ—Ä–≤–∏—Å", True)
            return True
            
        except Exception as e:
            self.log_test("–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–µ—Ä–≤–∏—Å", False, str(e))
            return False
    
    def test_ai_limits_service(self):
        """–¢–µ—Å—Ç AI –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            limits = ai_limits_service.get_user_limits(12345)
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            can_use, reason = ai_limits_service.can_use_ai(12345)
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            ai_limits_service.record_ai_usage(12345)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            usage_info = ai_limits_service.get_usage_info(12345)
            
            self.log_test("AI –ª–∏–º–∏—Ç—ã —Å–µ—Ä–≤–∏—Å", True)
            return True
            
        except Exception as e:
            self.log_test("AI –ª–∏–º–∏—Ç—ã —Å–µ—Ä–≤–∏—Å", False, str(e))
            return False
    
    def test_user_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                id=999999,
                points=100,
                rank='novice',
                active_days=1,
                referrals=0,
                message_count=5,
                username='test_user',
                first_name='Test'
            )
            
            self.session.add(test_user)
            self.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            user = self.session.query(User).filter(User.id == 999999).first()
            if user and user.username == 'test_user':
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True)
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.points = 200
            user.message_count = 10
            self.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_user = self.session.query(User).filter(User.id == 999999).first()
            if updated_user.points == 200 and updated_user.message_count == 10:
                self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True)
            else:
                self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, "–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.session.delete(user)
            self.session.commit()
            
            self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", True)
            return True
            
        except Exception as e:
            self.log_test("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", False, str(e))
            return False
    
    def test_donation_tiers(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ–Ω–∞—Ç–æ–≤"""
        try:
            from sisu_bot.core.config import DONATION_TIERS
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–Ω–∞—Ç-—Ç–∏—Ä–æ–≤
            required_keys = ['title', 'min_amount_ton', 'duration_days', 'benefits', 'tts_limit', 'points_multiplier']
            
            for tier_name, tier_data in DONATION_TIERS.items():
                for key in required_keys:
                    if key not in tier_data:
                        self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–Ω–∞—Ç-—Ç–∏—Ä–æ–≤", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ {tier_name}")
                        return False
            
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–Ω–∞—Ç-—Ç–∏—Ä–æ–≤", True)
            return True
            
        except Exception as e:
            self.log_test("–°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤", False, str(e))
            return False
    
    def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from sisu_bot.core.config import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = [
                'TELEGRAM_BOT_TOKEN',
                'SUPERADMIN_IDS',
                'REQUIRED_SUBSCRIPTIONS',
                'DONATION_TIERS'
            ]
            
            for field in required_fields:
                if not hasattr(config, field):
                    self.log_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
                    return False
            
            self.log_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", True)
            return True
            
        except Exception as e:
            self.log_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, str(e))
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SISUDATUBOT")
        logger.info("=" * 50)
        
        tests = [
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", self.test_database_connection),
            ("–°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", self.test_persistence_service),
            ("–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ —Å–µ—Ä–≤–∏—Å", self.test_antifraud_service),
            ("AI –ª–∏–º–∏—Ç—ã —Å–µ—Ä–≤–∏—Å", self.test_ai_limits_service),
            ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", self.test_user_operations),
            ("–°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤", self.test_donation_tiers),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                self.log_test(test_name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("=" * 50)
        logger.info(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
        
        if passed == total:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            persistence_service.delete_data("test_key")
        except:
            pass
        
        self.session.close()
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!")
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DEPLOYMENT_CHECKLIST.md –¥–ª—è –¥–µ–ø–ª–æ—è")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")

if __name__ == "__main__":
    main() 