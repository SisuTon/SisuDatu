#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_character_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –°–∏—Å—É"""
    print("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –°–∏—Å—É")
    print("=" * 60)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–º–Ω—ã–º–∏ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–º–∏
    print("1. –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–º–µ–º–Ω—ã–µ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ):")
    normal_questions = [
        "–°–∏—Å—É –∫–∞–∫ –¥–µ–ª–∞?",
        "–°–∏—Å—É –∫–∞–∫ —Ç—ã?",
        "–°–∏—Å—É —á—Ç–æ –¥–µ–ª–∞–µ—à—å?",
        "–°–∏—Å—É –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?"
    ]
    
    for question in normal_questions:
        response = await meme_persona_service.generate_smart_response(question, user_id, chat_id)
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º
    print("\n2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¥–µ—Ä–∑–∫–æ–µ):")
    greetings = [
        "–°–∏—Å—É –ø—Ä–∏–≤–µ—Ç!",
        "–°–∏—Å—É –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!",
        "–°–∏—Å—É –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    ]
    
    for greeting in greetings:
        response = await meme_persona_service.generate_smart_response(greeting, user_id, chat_id)
        print(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {greeting}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º–∏ (–Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–º–∏)
    print("\n3. –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ (–¥–µ—Ä–∑–∫–∏–µ, –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ):")
    help_requests = [
        "–°–∏—Å—É —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç—É",
        "–°–∏—Å—É –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω",
        "–°–∏—Å—É –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"
    ]
    
    for help_req in help_requests:
        response = await meme_persona_service.generate_smart_response(help_req, user_id, chat_id)
        print(f"–ü–æ–º–æ—â—å: {help_req}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 4: –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º–∏
    print("\n4. –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–µ—Ä–∑–∫–∏–µ):")
    other_messages = [
        "–°–∏—Å—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        "–°–∏—Å—É –ø–æ–Ω—è—Ç–Ω–æ",
        "–°–∏—Å—É –∞–≥–∞"
    ]
    
    for other_msg in other_messages:
        response = await meme_persona_service.generate_smart_response(other_msg, user_id, chat_id)
        print(f"–û—Å—Ç–∞–ª—å–Ω–æ–µ: {other_msg}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)

async def test_response_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–º–µ–º–Ω—ã–µ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ)
    print("–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–º–µ–º–Ω—ã–µ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ):")
    for i in range(5):
        response = meme_persona_service._get_normal_response()
        print(f"{i+1}. {response}")
    
    print("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–µ—Ä–∑–∫–∏–µ):")
    for i in range(5):
        response = meme_persona_service._get_greeting_response()
        print(f"{i+1}. {response}")
    
    print("\n–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ (–¥–µ—Ä–∑–∫–∏–µ, –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ):")
    for i in range(5):
        response = meme_persona_service._get_help_response()
        print(f"{i+1}. {response}")
    
    print("\n–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–µ—Ä–∑–∫–∏–µ):")
    for i in range(5):
        response = meme_persona_service._get_mixed_response()
        print(f"{i+1}. {response}")

async def test_random_interjections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è"""
    print("\nüé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤–∫–∏–¥—ã–≤–∞–Ω–∏–π")
    print("=" * 50)
    
    print("–†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è –≤ —á—É–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏:")
    for i in range(10):
        response = meme_persona_service.get_random_interjection()
        print(f"{i+1}. {response}")
    
    print("\n–¢–µ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è:")
    interjection_count = 0
    total_tests = 100
    
    for i in range(total_tests):
        if meme_persona_service.should_interject():
            interjection_count += 1
    
    probability = (interjection_count / total_tests) * 100
    print(f"–ò–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤ –≤–∫–∏–Ω—É–ª–∞ {interjection_count} —Ä–∞–∑ ({probability:.1f}%)")

async def test_character_traits():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
    print("=" * 50)
    
    print("–ú–µ–º–Ω–∞—è –∏—Ä–æ–Ω–∏—á–Ω–∞—è –°–∏—Å—É:")
    responses = []
    for i in range(10):
        response = meme_persona_service._get_normal_response()
        responses.append(response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç—ã –º–µ–º–Ω—ã–µ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ
    for i, response in enumerate(responses, 1):
        print(f"{i}. {response}")
    
    print("\n–î–µ—Ä–∑–∫–∞—è –°–∏—Å—É (–Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):")
    help_responses = []
    for i in range(10):
        response = meme_persona_service._get_help_response()
        help_responses.append(response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑
    for i, response in enumerate(help_responses, 1):
        print(f"{i}. {response}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å"
    executor_phrases = ["—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å", "–ø–æ–º–æ–≥—É", "–∫–æ–Ω–µ—á–Ω–æ", "–¥–∞, —á–µ–º –ø–æ–º–æ—á—å"]
    has_executor = any(phrase in response.lower() for response in help_responses for phrase in executor_phrases)
    
    if has_executor:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã!")
    else:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û: –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_character_responses()
        await test_response_types()
        await test_random_interjections()
        await test_character_traits()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å –º–µ–º–Ω–∞—è –∏—Ä–æ–Ω–∏—á–Ω–∞—è –¥–µ—Ä–∑–∫–∞—è —Å–º–µ–ª–∞—è —Å–º–µ—à–Ω–∞—è –º—É–¥—Ä–∞—è —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
