#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_learning_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –°–∏—Å—É")
    print("=" * 60)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("1. –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞:")
    test_messages = [
        "–∫–µ–∫ –ª–æ–ª –∞—Ö–∞—Ö–∞",
        "–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "—É–ø–∞–ª –Ω–µ –±–∏—Ç–æ–∫, –∞ –º–æ—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "–Ω–∞ –¥–Ω–æ. —è —É–∂–µ —Ç–∞–º, –º–æ–≥—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å",
        "—à–æ—Ä—Ç–∞–Ω—É–ª —à—Ç–∞–Ω—ã —Ç–æ–∂–µ?",
        "—è –Ω–µ —Ö–æ–ª–¥–µ—Ä, —è –∑–∞–ª–æ–∂–Ω–∏–∫",
        "–º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ª–µ–≥—á–µ –≤–æ–∑–¥—É—Ö–∞",
        "—É –º–µ–Ω—è –Ω–µ –º–∏–Ω—É—Å, –∞ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–π –ø–ª—é—Å",
        "—Ç—ã —Ç–æ—á–Ω–æ –≤ –∫—Ä–∏–ø—Ç–µ –∏–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ?",
        "–ø–∞–º–ø –±—ã–ª, –ø–æ–∫–∞ —Ç—ã —Å–ø–∞–ª"
    ]
    
    for message in test_messages:
        meme_persona_service.remember_chat_message(message, user_id, chat_id)
        print(f"–ó–∞–ø–æ–º–Ω–∏–ª–∞: {message}")
    
    print(f"\n–í—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–∞: {len(test_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    for i in range(5):
        learned_response = meme_persona_service.get_learned_response(chat_id)
        print(f"{i+1}. {learned_response}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏:")
    if hasattr(meme_persona_service, 'chat_memory') and chat_id in meme_persona_service.chat_memory:
        memory_count = len(meme_persona_service.chat_memory[chat_id])
        print(f"–í –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞ {chat_id}: {memory_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        print("–°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏:")
        for i, msg_data in enumerate(meme_persona_service.chat_memory[chat_id], 1):
            print(f"{i}. {msg_data['message']} (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_data['user_id']})")
    else:
        print("–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞")

async def test_large_templates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —à–∞–±–ª–æ–Ω—ã"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (20 —à–∞–±–ª–æ–Ω–æ–≤):")
    normal_responses = set()
    for i in range(30):
        response = meme_persona_service._get_normal_response()
        normal_responses.add(response)
        print(f"{i+1}. {response}")
    
    print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(normal_responses)} –∏–∑ 30")
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (20 —à–∞–±–ª–æ–Ω–æ–≤):")
    greeting_responses = set()
    for i in range(30):
        response = meme_persona_service._get_greeting_response()
        greeting_responses.add(response)
        print(f"{i+1}. {response}")
    
    print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(greeting_responses)} –∏–∑ 30")
    
    # –¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–º–æ—â—å
    print("\n–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–º–æ—â—å (20 —à–∞–±–ª–æ–Ω–æ–≤):")
    help_responses = set()
    for i in range(30):
        response = meme_persona_service._get_help_response()
        help_responses.add(response)
        print(f"{i+1}. {response}")
    
    print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(help_responses)} –∏–∑ 30")
    
    # –¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("\n–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (20 —à–∞–±–ª–æ–Ω–æ–≤):")
    mixed_responses = set()
    for i in range(30):
        response = meme_persona_service._get_mixed_response()
        mixed_responses.add(response)
        print(f"{i+1}. {response}")
    
    print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(mixed_responses)} –∏–∑ 30")

async def test_new_user_greetings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å username
    print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å username:")
    for i in range(5):
        greeting = meme_persona_service.get_new_user_greeting("testuser")
        print(f"{i+1}. {greeting}")
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–µ–∑ username
    print("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ username:")
    for i in range(5):
        greeting = meme_persona_service.get_new_user_greeting("–ò–≤–∞–Ω")
        print(f"{i+1}. {greeting}")

async def test_raid_greetings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Ä–µ–π–¥–∞—Ö"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–π–¥–∞—Ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–π–¥–∞
    print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–π–¥–∞:")
    for i in range(5):
        greeting = meme_persona_service.get_raid_greeting("raidleader")
        print(f"{i+1}. {greeting}")

async def test_memory_cleanup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏"""
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏")
    print("=" * 50)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        "—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1",
        "—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2",
        "—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 3"
    ]
    
    for message in test_messages:
        meme_persona_service.remember_chat_message(message, user_id, chat_id)
    
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(test_messages)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –¥–æ –æ—á–∏—Å—Ç–∫–∏
    if hasattr(meme_persona_service, 'chat_memory') and chat_id in meme_persona_service.chat_memory:
        memory_before = len(meme_persona_service.chat_memory[chat_id])
        print(f"–ü–∞–º—è—Ç—å –¥–æ –æ—á–∏—Å—Ç–∫–∏: {memory_before} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    meme_persona_service.clean_old_memory(max_age_hours=0)  # –û—á–∏—â–∞–µ–º –≤—Å–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if hasattr(meme_persona_service, 'chat_memory') and chat_id in meme_persona_service.chat_memory:
        memory_after = len(meme_persona_service.chat_memory[chat_id])
        print(f"–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {memory_after} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: –ø—É—Å—Ç–∞")

async def test_priority_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ª–æ–≥–∏–∫—É"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏")
    print("=" * 50)
    
    print("–ù–û–í–ê–Ø –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê:")
    print("1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–±—É—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ (–∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
    print("2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò–ò —Å –ø—Ä–æ–º—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
    print("3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—à–∞–±–ª–æ–Ω—ã)")
    print("4. –ü–†–ò–û–†–ò–¢–ï–¢ 4: –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è (5% —à–∞–Ω—Å)")
    print("5. –§–ò–ù–ê–õ–¨–ù–´–ô FALLBACK: –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ò —É–ø–∞–ª)")
    print()
    
    print("–û–ë–£–ß–ï–ù–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢!")
    print("–°–∏—Å—É –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –∏ –≤–∫–∏–¥—ã–≤–∞–µ—Ç –∏—Ö!")
    print("–ë–æ–ª—å—à–µ —à–∞–±–ª–æ–Ω–æ–≤ = –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_learning_system()
        await test_large_templates()
        await test_new_user_greetings()
        await test_raid_greetings()
        await test_memory_cleanup()
        await test_priority_logic()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å –æ–±—É—á–∞–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç –±–æ–ª—å—à–∏–µ —à–∞–±–ª–æ–Ω—ã! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
