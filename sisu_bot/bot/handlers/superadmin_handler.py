from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json
from sisu_bot.core.config import DB_PATH, DATA_DIR
from sisu_bot.bot.services.allowed_chats_service import list_allowed_chats, remove_allowed_chat, add_allowed_chat
from sisu_bot.bot.services import points_service
from sisu_bot.bot.services.adminlog_service import get_admin_logs
from sisu_bot.bot.services.trigger_stats_service import get_trigger_stats, suggest_new_triggers, auto_add_suggested_triggers
from sisu_bot.bot.services.state_service import get_state, update_state, get_mood, set_mood
import logging
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User
from sisu_bot.bot.config import SUPERADMIN_IDS, is_superadmin

AI_DIALOG_ENABLED = False
PRIVATE_ENABLED = False

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

SUPERADMIN_COMMANDS = {
    '/ai_dialog_on': '–í–∫–ª—é—á–∏—Ç—å AI-–¥–∏–∞–ª–æ–≥',
    '/ai_dialog_off': '–í—ã–∫–ª—é—á–∏—Ç—å AI-–¥–∏–∞–ª–æ–≥',
    '/enable_private': '–í–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ',
    '/disable_private': '–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ',
    '/superadmin_help': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞',
    '/ban': '–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '/unban': '–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '/addadmin': '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞',
    '/removeadmin': '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞',
    '/sendto': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã',
    '/allow_chat': '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö',
    '/list_chats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤',
    '/disallow_chat': '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö',
    '/stats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞',
    '/adminlog': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤',
    '/trigger_stats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞',
    '/suggest_triggers': '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    '/auto_add_triggers': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    '/remove_trigger': '–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä',
    '/get_mood': '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É',
    '/set_mood': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É'
}

router = Router()

BANS_PATH = DATA_DIR / 'bans.json'
ADMINS_PATH = DATA_DIR / 'admins.json'

def load_bans():
    if BANS_PATH.exists():
        with open(BANS_PATH, encoding='utf-8') as f:
            return json.load(f)["banned"]
    return []

def save_bans(banned):
    with open(BANS_PATH, 'w', encoding='utf-8') as f:
        json.dump({"banned": banned}, f, ensure_ascii=False, indent=2)

def load_admins():
    if ADMINS_PATH.exists():
        with open(ADMINS_PATH, encoding='utf-8') as f:
            return json.load(f)["admins"]
    return []

def save_admins(admins):
    with open(ADMINS_PATH, 'w', encoding='utf-8') as f:
        json.dump({"admins": admins}, f, ensure_ascii=False, indent=2)

async def notify_admins(text: str, bot):
    for admin_id in SUPERADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logging.error(f"Error notifying admin {admin_id}: {e}")

class SuperAdminStates(StatesGroup):
    waiting_sendto = State()

@router.message(Command("superadmin_help"))
async def superadmin_help(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    text = "üëë –®–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ SisuDatuBot\n\n"
    text += "/addpoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
    text += "/removepoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã\n"
    text += "/setstreak [user_id|@username] [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é\n"
    text += "/broadcast [—Ç–µ–∫—Å—Ç] ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n"
    text += "/challenge [—Ç–µ–∫—Å—Ç] ‚Äî —á–µ–ª–ª–µ–Ω–¥–∂ –≤—Å–µ–º\n"
    text += "/list_games ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä\n"
    text += "/games_admin ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏ (bulk, delete, stats)\n"
    text += "/market ‚Äî —Ä—ã–Ω–æ–∫ —Ä–∞–Ω–≥–æ–≤ –∏ NFT\n"
    text += "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
    text += "/set_required_subs [—Å—Å—ã–ª–∫–∏] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
    text += "/check_subs ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    text += "/ref ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    text += "/allow_chat ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç–µ\n"
    text += "/disallow_chat ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç–µ\n"
    text += "/list_chats ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
    text += "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
    text += "/adminlog ‚Äî –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤\n"
    text += "/addadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "/removeadmin ‚Äî —É–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
    text += "/auto_add_triggers ‚Äî –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
    text += "/remove_trigger ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
    text += "/get_mood ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É\n"
    text += "/set_mood ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É\n"
    await msg.answer(text)

@router.message(Command("ai_dialog_on"))
async def ai_dialog_on(msg: Message):
    logging.info(f"Command /ai_dialog_on from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(ai_dialog_enabled=True)
    await msg.answer("AI-–¥–∏–∞–ª–æ–≥ –≤–∫–ª—é—á—ë–Ω!")

@router.message(Command("ai_dialog_off"))
async def ai_dialog_off(msg: Message):
    logging.info(f"Command /ai_dialog_off from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(ai_dialog_enabled=False)
    await msg.answer("AI-–¥–∏–∞–ª–æ–≥ –≤—ã–∫–ª—é—á–µ–Ω!")

@router.message(Command("enable_private"))
async def enable_private(msg: Message):
    logging.info(f"Command /enable_private from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(private_enabled=True)
    await msg.answer("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ –≤–∫–ª—é—á–µ–Ω–∞!")

@router.message(Command("disable_private"))
async def disable_private(msg: Message):
    logging.info(f"Command /disable_private from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(private_enabled=False)
    await msg.answer("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

@router.message(Command("ban"))
async def ban_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /ban –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /ban [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    banned = load_bans()
    if user_id in banned:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –±–∞–Ω–µ.")
        return
    banned.append(user_id)
    save_bans(banned)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")

@router.message(Command("unban"))
async def unban_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /unban –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /unban [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    banned = load_bans()
    if user_id not in banned:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ –±–∞–Ω–µ.")
        return
    banned.remove(user_id)
    save_bans(banned)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

@router.message(Command("addadmin"))
async def addadmin_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /addadmin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addadmin [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    admins = load_admins()
    if user_id in admins:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–¥–º–∏–Ω.")
        return
    admins.append(user_id)
    save_admins(admins)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")

@router.message(Command("removeadmin"))
async def removeadmin_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /removeadmin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /removeadmin [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    admins = load_admins()
    if user_id not in admins:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω.")
        return
    admins.remove(user_id)
    save_admins(admins)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")

@router.message(Command("sendto"))
async def sendto_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /sendto –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /sendto [chat_id1] [chat_id2] ... (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
        return
    chat_ids = args[1:]
    await state.update_data(sendto_chat_ids=chat_ids)
    await msg.answer(f"–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Å—ã–ª–∫—É), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {', '.join(chat_ids)}.")
    await state.set_state(SuperAdminStates.waiting_sendto)

@router.message(StateFilter(SuperAdminStates.waiting_sendto))
async def sendto_send(msg: Message, state: FSMContext):
    data = await state.get_data()
    chat_ids = data.get("sendto_chat_ids", [])
    await state.clear()
    count = 0
    for chat_id in chat_ids:
        try:
            if msg.text:
                await msg.bot.send_message(chat_id, msg.text)
            elif msg.photo:
                await msg.bot.send_photo(chat_id, msg.photo[-1].file_id, caption=msg.caption or "")
            elif msg.video:
                await msg.bot.send_video(chat_id, msg.video[-1].file_id, caption=msg.caption or "")
            elif msg.document:
                await msg.bot.send_document(chat_id, msg.document.file_id, caption=msg.caption or "")
        except Exception as e:
            await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")
            continue
        count += 1
    await msg.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

@router.message(Command("allow_chat"))
async def allow_chat_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /allow_chat –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /allow_chat [chat_id]")
        return
    chat_id = args[1]
    add_allowed_chat(chat_id)
    await msg.answer(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")

@router.message(Command("list_chats"))
async def list_chats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    chats = list_allowed_chats()
    if not chats:
        await msg.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        text = "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n" + "\n".join(chats)
        await msg.answer(text)

@router.message(Command("disallow_chat"))
async def disallow_chat_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /disallow_chat –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /disallow_chat [chat_id]")
        return
    chat_id = args[1]
    remove_allowed_chat(chat_id)
    await msg.answer(f"‚úÖ –ß–∞—Ç {chat_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")

@router.message(Command("stats"))
async def stats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    session = Session()
    total_users = session.query(User).count()
    total_points = session.query(User).with_entities(func.sum(User.points)).scalar() or 0
    total_messages = session.query(User).with_entities(func.sum(User.message_count)).scalar() or 0
    session.close()
    text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üíé –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points}\n"
    text += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
    await msg.answer(text)

@router.message(Command("adminlog"))
async def adminlog_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    logs = get_admin_logs()
    if not logs:
        await msg.answer("–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
    else:
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤:\n\n"
        for log in logs:
            text += f"{log}\n"
        await msg.answer(text)

@router.message(Command("trigger_stats"))
async def trigger_stats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    stats = get_trigger_stats()
    if not stats:
        await msg.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
    else:
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
        for trigger, count in stats.items():
            text += f"{trigger}: {count}\n"
        await msg.answer(text)

@router.message(Command("suggest_triggers"))
async def suggest_triggers_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    triggers = suggest_new_triggers()
    if not triggers:
        await msg.answer("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
    else:
        text = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n"
        for trigger in triggers:
            text += f"{trigger}\n"
        await msg.answer(text)

@router.message(Command("auto_add_triggers"))
async def auto_add_triggers_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    added = auto_add_suggested_triggers()
    if not added:
        await msg.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    else:
        text = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n"
        for trigger in added:
            text += f"{trigger}\n"
        await msg.answer(text)

@router.message(Command("remove_trigger"))
async def remove_trigger_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remove_trigger [trigger]")
        return
    trigger = " ".join(args[1:])
    # TODO: Implement trigger removal
    await msg.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É–¥–∞–ª—ë–Ω.")

@router.message(Command("get_mood"))
async def get_mood_handler(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    mood = get_mood()
    await msg.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É: {mood}")

@router.message(Command("set_mood"))
async def set_mood_handler(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /set_mood <mood>")
        return
    new_mood = args[1].strip()
    set_mood(new_mood)
    await msg.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_mood}") 