print("‚úÖ ref_handler.py –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù")

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import logging
import os
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User
from sisu_bot.core.config import DB_PATH
from sisu_bot.bot.db.init_db import Session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –û–î–ò–ù —Ä–∞–∑
router = Router()

@router.message(Command("ref"))
async def handle_ref_command(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ref - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    """
    try:
        print("!!! REF HANDLER –í–´–ó–í–ê–ù !!!")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info("!!! REF HANDLER –í–´–ó–í–ê–ù !!!")
        logging.info(f"REF HANDLER START: User {msg.from_user.id}")
        
        if msg.chat.type != "private":
            logging.info(f"REF: Command in non-private chat from user {msg.from_user.id}")
            await msg.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
            return
        
        session = Session()
        user_id = msg.from_user.id
        user = session.query(User).filter(User.id == user_id).first()
        
        logging.info(f"REF: Loading users data for {user_id}")
        
        if not user:
            logging.info(f"REF: Creating new user entry for {user_id}")
            user = User(
                id=user_id,
                points=0,
                active_days=0,
                referrals=0,
                username=msg.from_user.username or "unknown"
            )
            session.add(user)
            session.commit()
        
        bot_username = (await msg.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref{user_id}"
        
        logging.info(f"REF: Generated ref link for {user_id}: {ref_link}")
        
        response = (
            f"üéØ –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"<code>{ref_link}</code>\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
            f"‚Ä¢ 100 –±–∞–ª–ª–æ–≤\n"
            f"‚Ä¢ +1 –∫ —Å—á—ë—Ç—á–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            f"–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏! üöÄ"
        )
        
        logging.info(f"REF: Sending response to {user_id}")
        await msg.answer(response)
        logging.info(f"REF: Successfully sent ref link to {user_id}")
        
        session.close()
        
    except Exception as e:
        logging.error(f"REF: Error in ref_handler: {e}", exc_info=True)
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 