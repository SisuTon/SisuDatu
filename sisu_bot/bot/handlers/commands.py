from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionSender
from pathlib import Path
import json
from bot.services import top_service, points_service

router = Router()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_DIR = Path(__file__).parent.parent.parent / 'data'
RANKS_PATH = DATA_DIR / 'ranks.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–≥–æ–≤
try:
    with open(RANKS_PATH, 'r', encoding='utf-8') as f:
        RANKS = json.load(f)
except Exception:
    RANKS = {}

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
GROUP_COMMANDS = {
    "checkin": "–û—Ç–º–µ—Ç–∏—Å—å –≤ —Å—Ç—Ä–æ—é –∏ –ø–æ–ª—É—á–∏ –±–∞–ª–ª—ã",
    "top": "–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    "donate": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
}

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–∫–∏
PRIVATE_COMMANDS = {
    "start": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
    "help": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    "myrank": "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥ –∏ –±–∞–ª–ª—ã",
    "market": "–†—ã–Ω–æ–∫ —Ä–∞–Ω–≥–æ–≤ –∏ NFT",
    "donate": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
}

@router.message(Command("help"))
async def help_handler(msg: Message):
    if msg.chat.type == "private":
        text = "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫–µ:\n\n"
        for cmd, desc in PRIVATE_COMMANDS.items():
            text += f"/{cmd} ‚Äî {desc}\n"
    else:
        text = "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:\n\n"
        for cmd, desc in GROUP_COMMANDS.items():
            text += f"/{cmd} ‚Äî {desc}\n"
    
    async with ChatActionSender.typing(bot=msg.bot, chat_id=msg.chat.id):
        await msg.answer(text)

@router.message(Command("start"))
async def start_handler(msg: Message):
    if msg.chat.type != "private":
        return
        
    text = (
        "üêâ –ü—Ä–∏–≤–µ—Ç! –Ø –°–∏—Å—É ‚Äî –¥—Ä–∞–∫–æ–Ω–∏—Ö–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Å–∂–∏–≥–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã—Ö.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /checkin ‚Äî –æ—Ç–º–µ—á–∞–π—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã\n"
        "‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –¥–µ–ª–∏—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –ø–æ–ª—É—á–∞–π —Ä–∞–Ω–≥–∏\n"
        "‚Ä¢ /top ‚Äî —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ Hall of Fame\n"
        "‚Ä¢ /donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã\n"
        "‚Ä¢ /market ‚Äî —Ä—ã–Ω–æ–∫ —Ä–∞–Ω–≥–æ–≤ (—Å–∫–æ—Ä–æ!)\n\n"
        "‚ö°Ô∏è –°–∏—Å—É –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç, –∫—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫, –∞ –∫—Ç–æ —Ö–∞–ª—è–≤—â–∏–∫. –ù–µ –±—É–¥—å –∫–∞–∫ –≤—Å–µ ‚Äî —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π —á–∞—Ç–∞!\n\n"
        "üî• –í –±—É–¥—É—â–µ–º: NFT-–∞–≤–∞—Ç–∞—Ä–∫–∏, DAO, –∞–∏—Ä–¥—Ä–æ–ø—ã, —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
    )
    
    async with ChatActionSender.typing(bot=msg.bot, chat_id=msg.chat.id):
        await msg.answer(text)

@router.message(Command("myrank"))
async def myrank_handler(msg: Message):
    user_id = str(msg.from_user.id)
    user_rank = RANKS.get(user_id, {"rank": "–ù–æ–≤–∏—á–æ–∫", "points": 0})
    
    text = (
        f"üë§ {msg.from_user.full_name}\n"
        f"üèÜ –†–∞–Ω–≥: {user_rank['rank']}\n"
        f"üíé –ë–∞–ª–ª—ã: {user_rank['points']}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∞–∫—Ç–∏–≤–Ω–∏—á–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–Ω–≥!"
    )
    
    async with ChatActionSender.typing(bot=msg.bot, chat_id=msg.chat.id):
        await msg.answer(text)

@router.message(Command("market"))
async def market_handler(msg: Message):
    text = (
        "üõç –†—ã–Ω–æ–∫ —Ä–∞–Ω–≥–æ–≤ (—Å–∫–æ—Ä–æ!)\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:\n"
        "‚Ä¢ –û–±–º–µ–Ω —Ä–∞–Ω–≥–∞–º–∏\n"
        "‚Ä¢ NFT-–∞–≤–∞—Ç–∞—Ä–∫–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–µ–π–¥–∂–∏\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
    )
    
    async with ChatActionSender.typing(bot=msg.bot, chat_id=msg.chat.id):
        await msg.answer(text)

@router.message(Command("top"))
async def top_handler(msg: Message):
    try:
        top_list = top_service.get_top_users(limit=15)
        text = "<b>üèÜ –¢–û–ü SISU:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (user_id, user) in enumerate(top_list, 1):
            username = user.get("username")
            first_name = user.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            points = float(user.get("points", 0))
            rank_code = user.get("rank", "novice")
            rank = points_service.RANKS.get(rank_code, {}).get("title", "–ë–µ–∑ —Ä–∞–Ω–≥–∞")
            active_days = user.get("active_days", 0)
            referrals = user.get("referrals", 0)
            if i <= 3:
                medal = medals[i - 1]
            else:
                medal = f"{i}."
            if username:
                tag = f"{medal} @{username}"
            else:
                tag = f'{medal} <a href="tg://user?id={user_id}">{first_name}</a>'
            text += f"{tag} ‚Äî {points}‚≠ê {active_days}üìÖ {referrals}üë• ‚Äî {rank}\n"
        if not top_list:
            text += "\n–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç! –ë—É–¥—å –ø–µ—Ä–≤—ã–º!"
        else:
            text += "\n–•–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø? –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–µ–µ –∏ –∑–æ–≤–∏ –¥—Ä—É–∑–µ–π!"
        await msg.answer(text[:4096], parse_mode="HTML")
    except Exception as e:
        await msg.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞ üò¢")

@router.message(Command("donate"))
async def donate_handler(msg: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å SISU —á–µ—Ä–µ–∑ TON Trading Bot", url="https://t.me/tontrade?start=HeeuA1fNBh")]
        ]
    )
    await msg.answer(
        "–ó–∞–¥–æ–Ω–∞—Ç—å —Å–µ–±–µ –Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî –∫—É–ø–∏ —Ç–æ–∫–µ–Ω SISU —á–µ—Ä–µ–∑ TON Trading Bot!\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–∞–ª–ª—ã –∏ —Å–º–æ–∂–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø.",
        reply_markup=kb
    ) 