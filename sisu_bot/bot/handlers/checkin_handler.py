import json
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sisu_bot.bot.services import points_service
from sisu_bot.core.config import DB_PATH, DATA_DIR
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User

router = Router()

FIRST_CHECKIN_POINTS = 50
REGULAR_CHECKIN_POINTS = 10
PHRASES_PATH = DATA_DIR / 'phrases.json'
with open(PHRASES_PATH, encoding='utf-8') as f:
    PHRASES = json.load(f)

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

async def check_and_activate_referral(user_id: int, bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    """
    session = Session()
    user = session.query(User).filter(User.id == user_id).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª
    if not user or not user.pending_referral:
        session.close()
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if (user.message_count >= 5 and  # –ú–∏–Ω–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        user.last_checkin):  # –ë—ã–ª —á–µ–∫-–∏–Ω
        
        ref_id = user.pending_referral
        ref_user = session.query(User).filter(User.id == ref_id).first()
        if ref_user:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            user.invited_by = ref_id
            user.pending_referral = None
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            ref_user.points += 100
            ref_user.referrals += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                await bot.send_message(ref_id, 
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    "‚Ä¢ +100 –±–∞–ª–ª–æ–≤\n"
                    "‚Ä¢ +1 –∫ —Å—á—ë—Ç—á–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
                )
                await bot.send_message(user_id,
                    "üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    "–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
            session.close()
            return True
    
    session.close()
    return False

@router.message(Command("checkin"))
async def checkin_handler(msg: Message):
    if msg.chat.type == "private":
        phrase = random.choice(PHRASES["checkin"])
        await msg.answer(f"{phrase}\n\n–ß–µ–∫-–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ! –ó–∞—Ö–æ–¥–∏ –∏ –æ—Ç–º–µ—á–∞–π—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∏ —Å—Ç–∞—Ç—É—Å.")
        return
    
    user_id = msg.from_user.id
    session = Session()
    user = session.query(User).filter(User.id == user_id).first()
    
    if not user:
        user = User(id=user_id)
        session.add(user)
    
    now = datetime.utcnow()
    
    # –ï—Å–ª–∏ –±—ã–ª —á–µ–∫-–∏–Ω —Ä–∞–Ω–µ–µ
    if user.last_checkin:
        # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if now - user.last_checkin > timedelta(hours=48):
            user.active_days = 0
        # –ï—Å–ª–∏ —á–µ–∫-–∏–Ω —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è
        if now - user.last_checkin < timedelta(hours=24):
            phrase = random.choice(PHRASES["checkin"])
            await msg.answer(f"{phrase}\n\n–¢—ã —É–∂–µ —á–µ–∫-–∏–Ω–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞.")
            session.close()
            return
        # –û–±—ã—á–Ω—ã–π —á–µ–∫-–∏–Ω
        points = REGULAR_CHECKIN_POINTS
    else:
        # –ü–µ—Ä–≤—ã–π —á–µ–∫-–∏–Ω
        points = FIRST_CHECKIN_POINTS
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.points += points
    user.active_days += 1
    user.last_checkin = now
    user.rank = points_service.get_rank_by_points(user.points)
    if msg.from_user.username:
        user.username = msg.from_user.username
    if msg.from_user.first_name:
        user.first_name = msg.from_user.first_name
    
    session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await check_and_activate_referral(user_id, msg.bot)
    
    phrase = random.choice(PHRASES["checkin"])
    builder = InlineKeyboardBuilder()
    builder.button(text="–ß–µ–∫-–∏–Ω ‚òëÔ∏è", callback_data="checkin_done")
    await msg.answer(
        f"{phrase}\n\n"
        f"+{points} –±–∞–ª–ª–æ–≤\n"
        f"–¢–≤–æ–π —Ä–∞–Ω–≥: {points_service.RANKS[user.rank]['title']}\n"
        f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user.points}", 
        reply_markup=builder.as_markup()
    )
    session.close() 