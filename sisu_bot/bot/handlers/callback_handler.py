import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery

from sisu_bot.bot.formatters.user_formatters import format_my_rank, format_top_users
from sisu_bot.bot.handlers.checkin_handler import handle_checkin_command
from sisu_bot.bot.handlers.donate_handler import handle_donate_command_new
from sisu_bot.bot.handlers.ref_handler import handle_ref_command
from sisu_bot.bot.services import points_service, top_service

router = Router()


async def handle_myrank_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    try:
        position_tuple = top_service.get_user_position(user_id)
        if not position_tuple:
            await callback.message.answer("–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ –±–∞–∑–µ. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç–æ–ø–µ!")
            return

        with points_service.session_scope() as session:
            user = session.query(points_service.User).filter(points_service.User.id == user_id).first()
            if not user:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            rank_info = points_service.get_rank_info(user.id)
            global_rank = position_tuple[0]
            text = format_my_rank(user, rank_info, global_rank)
            await callback.message.answer(text, parse_mode="HTML")

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ handle_myrank_callback")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ üò¢")


async def handle_top_players_callback(callback: CallbackQuery):
    try:
        top_users = top_service.get_top_users(limit=10)
        text = format_top_users(top_users)
        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ handle_top_players_callback")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞ üò¢")


async def show_help_callback(callback: CallbackQuery):
    help_text = (
        "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/myrank - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤\n"
        "/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/checkin - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
        "/ref - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "/donate - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"
    )
    await callback.message.answer(help_text, parse_mode="HTML")


async def show_games_info_callback(callback: CallbackQuery):
    await callback.message.answer("–†–∞–∑–¥–µ–ª '–ò–≥—Ä—ã' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.callback_query(F.data.in_([
    "my_rank", "top_players", "checkin", "games", "donate", "referral", "help"
]))
async def handle_main_menu_callbacks(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –ª–∏–±–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ
    –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ (–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏), –ª–∏–±–æ
    –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ—Å—Ç—ã–µ.
    """
    command_map = {
        "my_rank": handle_myrank_callback,
        "top_players": handle_top_players_callback,
        "checkin": handle_checkin_command,
        "donate": handle_donate_command_new,
        "referral": handle_ref_command,
        "help": show_help_callback,
        "games": show_games_info_callback,
    }

    handler = command_map.get(callback.data)

    if handler:
        try:
            # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç `Message`
            if callback.data in ["checkin", "donate", "referral"]:
                 await handler(callback.message)
            # –î–ª—è –Ω–æ–≤—ã—Ö, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç `CallbackQuery`
            else:
                await handler(callback)
        except Exception as e:
            logging.error(f"Error handling callback {callback.data}: {e}", exc_info=True)
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer() 