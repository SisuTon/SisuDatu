from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import json
import os
from typing import Dict, List, Optional

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä
class GameStates(StatesGroup):
    waiting_emoji_answer = State()
    waiting_word_answer = State()
    waiting_riddle_answer = State()
    waiting_new_emoji = State()
    waiting_new_emoji_answer = State()
    waiting_new_riddle = State()
    waiting_new_riddle_answer = State()
    waiting_new_word = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    waiting_bulk_emoji = State()
    waiting_bulk_riddle = State()
    waiting_bulk_word = State()
    waiting_delete_emoji = State()
    waiting_delete_riddle = State()
    waiting_delete_word = State()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä
GAMES_DATA_FILE = "data/games_data.json"

# –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
SUPERADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
def is_superadmin(user_id: int) -> bool:
    return user_id in SUPERADMIN_IDS

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
def load_games_data():
    if not os.path.exists(GAMES_DATA_FILE):
        return {
            "emoji_movies": [],
            "word_game_words": [],
            "riddles": []
        }
    with open(GAMES_DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
def save_games_data(data):
    os.makedirs(os.path.dirname(GAMES_DATA_FILE), exist_ok=True)
    with open(GAMES_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games: Dict[int, Dict] = {}

# –§–∏–ª—å–º—ã —Å —ç–º–æ–¥–∑–∏
EMOJI_MOVIES = [
    {"emoji": "üëªüëªüëª", "answer": "–¢—Ä–∏ –±–æ–≥–∞—Ç—ã—Ä—è"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"},
    {"emoji": "üë®‚Äçüë¶üê†", "answer": "–í –ø–æ–∏—Å–∫–∞—Ö –î–æ—Ä–∏"}
]

# –°–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞
WORD_GAME_WORDS = [
    "–¥—Ä–∞–∫–æ–Ω", "–º–∞–≥–∏—è", "—Ç–æ–∫–µ–Ω", "—Ç–æ–Ω", "–≤–∞–π–±", "—Å–Ω—É–ø", "–¥–æ–≥–≥", "—Ç–æ–∫–∏–æ",
    "–∫—Ä–∏–ø—Ç–∞", "–±–ª–æ–∫—á–µ–π–Ω", "–º–µ–º", "–ø–∞–º", "–ª—É–Ω–∞", "—Å–æ–ª–Ω—Ü–µ", "–∑–≤–µ–∑–¥–∞",
    "–∫–æ—Å–º–æ—Å", "–≤—Ä–µ–º—è", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—ç–Ω–µ—Ä–≥–∏—è", "—Å–∏–ª–∞", "–º—É–¥—Ä–æ—Å—Ç—å",
    "–∑–Ω–∞–Ω–∏–µ", "–∏—Å—Ç–∏–Ω–∞", "–ø—É—Ç—å", "—Å—É–¥—å–±–∞", "–∂–∏–∑–Ω—å", "—Å–º–µ—Ä—Ç—å", "–ª—é–±–æ–≤—å",
    "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "—Ä–∞–¥–æ—Å—Ç—å", "–ø–µ—á–∞–ª—å", "—Å—á–∞—Å—Ç—å–µ", "–≥–æ—Ä–µ", "—É–¥–∞—á–∞",
    "–Ω–µ—É–¥–∞—á–∞", "–ø–æ–±–µ–¥–∞", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—á–∞–ª–æ", "–∫–æ–Ω–µ—Ü", "–≤–µ—á–Ω–æ—Å—Ç—å"
]

# –ó–∞–≥–∞–¥–∫–∏
RIDDLES = [
    {
        "riddle": "–Ø –Ω–µ –∂–∏–≤–∞—è, –Ω–æ —Ä–∞—Å—Ç—É; –Ω–µ –¥—ã—à—É, –Ω–æ —É–º–∏—Ä–∞—é. –ß—Ç–æ —è?",
        "answer": "—Å–≤–µ—á–∞"
    },
    {
        "riddle": "–ß–µ–º –±–æ–ª—å—à–µ –±–µ—Ä—ë—à—å, —Ç–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è. –ß—Ç–æ —ç—Ç–æ?",
        "answer": "—è–º–∞"
    },
    {
        "riddle": "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å, –¥–∞–∂–µ –Ω–µ –ø—Ä–∏–∫–æ—Å–Ω—É–≤—à–∏—Å—å –∫ —ç—Ç–æ–º—É?",
        "answer": "–æ–±–µ—â–∞–Ω–∏–µ"
    },
    {
        "riddle": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç?",
        "answer": "–≤—Ä–µ–º—è"
    },
    {
        "riddle": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?",
        "answer": "—Å–æ–Ω"
    }
]

# –§—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
CORRECT_ANSWERS = [
    "–í–æ—Ç —ç—Ç–æ –¥–∞! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–Ω–∞—Ç–æ–∫! üéØ",
    "–ë—Ä–∞–≤–æ! –¢—ã —É–≥–∞–¥–∞–ª! üéâ",
    "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üåü",
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üëè",
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä! üèÜ"
]

# –§—Ä–∞–∑—ã –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
WRONG_ANSWERS = [
    "–£–≤—ã, —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ü§î",
    "–ù–µ —É–≥–∞–¥–∞–ª! –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! üí™",
    "–ü–æ—á—Ç–∏, –Ω–æ –Ω–µ —Ç–æ! –î—É–º–∞–π –¥–∞–ª—å—à–µ! üß†",
    "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–æ —Ç—ã –±–ª–∏–∑–∫–æ! üîç",
    "–ù–µ —Ç–æ! –ù–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üéØ"
]

# –§—Ä–∞–∑—ã –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∏–≥—Ä—ã
DECLINE_PHRASES = [
    "–°–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å –¥–ª—è –∏–≥—Ä. –ú–æ–∂–µ—Ç, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!",
    "–ù–µ —Ö–æ—á—É, –Ω–µ –±—É–¥—É! –Ø –¥—Ä–∞–∫–æ–Ω, –∞ –Ω–µ –∞–Ω–∏–º–∞—Ç–æ—Ä!",
    "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∏–º–∏ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± –∏–≥—Ä–∞—Ö!",
    "–Ø –±—ã —Å—ã–≥—Ä–∞–ª–∞, –Ω–æ –≤–∞–π–± –Ω–µ —Ç–æ—Ç...",
    "–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –≤–∞–π–±–∞!"
]

@router.message(Command("emoji_movie"))
async def emoji_movie_start(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–∞
    if chat_id in active_games:
        await msg.answer("–£ –Ω–∞—Å —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return
    
    # –°–ª—É—á–∞–π–Ω–æ —Ä–µ—à–∞–µ–º, –±—É–¥–µ—Ç –ª–∏ –°–∏—Å—É –∏–≥—Ä–∞—Ç—å
    if random.random() > 0.6:
        await msg.answer(random.choice(DECLINE_PHRASES))
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä
    games_data = load_games_data()
    if not games_data["emoji_movies"]:
        await msg.answer("–û–π, —è –∑–∞–±—ã–ª–∞ –≤—Å–µ —Ñ–∏–ª—å–º—ã! –ú–æ–∂–µ—Ç, –Ω–∞—É—á–∏—à—å –º–µ–Ω—è –Ω–æ–≤—ã–º?")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º
    movie = random.choice(games_data["emoji_movies"])
    active_games[chat_id] = {
        "type": "emoji_movie",
        "answer": movie["answer"].lower()
    }
    
    await msg.answer(f"–õ–æ–≤–∏ –∑–∞–≥–∞–¥–∫—É! –û—Ç–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–≤–µ—Ç—å –º–Ω–µ –≤ reply:\n{movie['emoji']}")
    await state.set_state(GameStates.waiting_emoji_answer)

@router.message(Command("teach_emoji"))
async def teach_emoji_start(msg: Message, state: FSMContext):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—É—á–∏–º –º–µ–Ω—è –Ω–æ–≤–æ–º—É —Ñ–∏–ª—å–º—É! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞.")
    await state.set_state(GameStates.waiting_new_emoji)

@router.message(GameStates.waiting_new_emoji)
async def teach_emoji_emoji(msg: Message, state: FSMContext):
    emoji = msg.text.strip()
    await state.update_data(new_emoji=emoji)
    await msg.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
    await state.set_state(GameStates.waiting_new_emoji_answer)

@router.message(GameStates.waiting_new_emoji_answer)
async def teach_emoji_answer(msg: Message, state: FSMContext):
    answer = msg.text.strip()
    data = await state.get_data()
    emoji = data["new_emoji"]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    games_data = load_games_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º
    games_data["emoji_movies"].append({
        "emoji": emoji,
        "answer": answer
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_games_data(games_data)
    
    await msg.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ {emoji} ‚Äî —ç—Ç–æ {answer}! üé¨")
    await state.clear()

@router.message(Command("teach_riddle"))
async def teach_riddle_start(msg: Message, state: FSMContext):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—É—á–∏–º –º–µ–Ω—è –Ω–æ–≤–æ–π –∑–∞–≥–∞–¥–∫–µ! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–∞–º—É –∑–∞–≥–∞–¥–∫—É.")
    await state.set_state(GameStates.waiting_new_riddle)

@router.message(GameStates.waiting_new_riddle)
async def teach_riddle_riddle(msg: Message, state: FSMContext):
    riddle = msg.text.strip()
    await state.update_data(new_riddle=riddle)
    await msg.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É.")
    await state.set_state(GameStates.waiting_new_riddle_answer)

@router.message(GameStates.waiting_new_riddle_answer)
async def teach_riddle_answer(msg: Message, state: FSMContext):
    answer = msg.text.strip()
    data = await state.get_data()
    riddle = data["new_riddle"]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    games_data = load_games_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–≥–∞–¥–∫—É
    games_data["riddles"].append({
        "riddle": riddle,
        "answer": answer
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_games_data(games_data)
    
    await msg.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –Ω–æ–≤—É—é –∑–∞–≥–∞–¥–∫—É! üéØ")
    await state.clear()

@router.message(Command("teach_word"))
async def teach_word_start(msg: Message, state: FSMContext):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—É—á–∏–º –º–µ–Ω—è –Ω–æ–≤–æ–º—É —Å–ª–æ–≤—É –¥–ª—è –∏–≥—Ä—ã! –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ.")
    await state.set_state(GameStates.waiting_new_word)

@router.message(GameStates.waiting_new_word)
async def teach_word_word(msg: Message, state: FSMContext):
    word = msg.text.strip().lower()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    games_data = load_games_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    if word not in games_data["word_game_words"]:
        games_data["word_game_words"].append(word)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_games_data(games_data)
        await msg.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: {word}! üìö")
    else:
        await msg.answer("–û–π, —è —É–∂–µ –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ! ü§î")
    
    await state.clear()

@router.message(Command("list_games"))
async def list_games(msg: Message):
    games_data = load_games_data()
    response = "üéÆ –ú–æ–∏ –∏–≥—Ä—ã:\n\n"
    response += f"üé¨ –§–∏–ª—å–º–æ–≤: {len(games_data['emoji_movies'])}\n"
    response += f"üìö –°–ª–æ–≤: {len(games_data['word_game_words'])}\n"
    response += f"üéØ –ó–∞–≥–∞–¥–æ–∫: {len(games_data['riddles'])}\n\n"
    response += "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:\n"
    response += "/teach_emoji - –Ω–∞—É—á–∏—Ç—å –Ω–æ–≤–æ–º—É —Ñ–∏–ª—å–º—É\n"
    response += "/teach_riddle - –Ω–∞—É—á–∏—Ç—å –Ω–æ–≤–æ–π –∑–∞–≥–∞–¥–∫–µ\n"
    response += "/teach_word - –Ω–∞—É—á–∏—Ç—å –Ω–æ–≤–æ–º—É —Å–ª–æ–≤—É"
    await msg.answer(response)

@router.message(GameStates.waiting_emoji_answer)
async def emoji_movie_answer(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    if chat_id not in active_games or active_games[chat_id]["type"] != "emoji_movie":
        await state.clear()
        return
    
    user_answer = msg.text.lower().strip()
    correct_answer = active_games[chat_id]["answer"]
    
    if user_answer == correct_answer:
        await msg.answer(random.choice(CORRECT_ANSWERS))
    else:
        await msg.answer(random.choice(WRONG_ANSWERS))
    
    del active_games[chat_id]
    await state.clear()

@router.message(Command("word_game"))
async def word_game_start(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    if chat_id in active_games:
        await msg.answer("–£ –Ω–∞—Å —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return
    
    if random.random() > 0.6:
        await msg.answer(random.choice(DECLINE_PHRASES))
        return
    
    word = random.choice(WORD_GAME_WORDS)
    active_games[chat_id] = {
        "type": "word_game",
        "answer": word
    }
    
    await msg.answer(f"–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ —Å–ª–æ–≤–∞! –Ø –∑–∞–≥–∞–¥–∞–ª–∞ —Å–ª–æ–≤–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å –µ–≥–æ, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.\n\n–ù–∞—á–Ω–∏ —Å –≤–æ–ø—Ä–æ—Å–∞!")
    await state.set_state(GameStates.waiting_word_answer)

@router.message(GameStates.waiting_word_answer)
async def word_game_answer(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    if chat_id not in active_games or active_games[chat_id]["type"] != "word_game":
        await state.clear()
        return
    
    word = active_games[chat_id]["answer"]
    question = msg.text.lower().strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if "—ç—Ç–æ" in question and word in question:
        await msg.answer("–î–∞! –¢—ã —É–≥–∞–¥–∞–ª! üéâ")
        del active_games[chat_id]
        await state.clear()
    elif word in question:
        await msg.answer("–î–∞! üî•")
    elif any(letter in word for letter in question):
        await msg.answer("–í–æ–∑–º–æ–∂–Ω–æ! ü§î")
    else:
        await msg.answer("–ù–µ—Ç! ‚ùå")

@router.message(Command("riddle"))
async def riddle_start(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    if chat_id in active_games:
        await msg.answer("–£ –Ω–∞—Å —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return
    
    if random.random() > 0.6:
        await msg.answer(random.choice(DECLINE_PHRASES))
        return
    
    riddle = random.choice(RIDDLES)
    active_games[chat_id] = {
        "type": "riddle",
        "answer": riddle["answer"]
    }
    
    await msg.answer(f"–ó–∞–≥–∞–¥–∫–∞:\n{riddle['riddle']}\n\n–û—Ç–≤–µ—á–∞–π –≤ reply!")
    await state.set_state(GameStates.waiting_riddle_answer)

@router.message(GameStates.waiting_riddle_answer)
async def riddle_answer(msg: Message, state: FSMContext):
    chat_id = msg.chat.id
    if chat_id not in active_games or active_games[chat_id]["type"] != "riddle":
        await state.clear()
        return
    
    user_answer = msg.text.lower().strip()
    correct_answer = active_games[chat_id]["answer"]
    
    if user_answer == correct_answer:
        await msg.answer(random.choice(CORRECT_ANSWERS))
    else:
        await msg.answer(random.choice(WRONG_ANSWERS))
    
    del active_games[chat_id]
    await state.clear()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
@router.message(Command("games_admin"))
async def games_admin_help(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    help_text = "üéÆ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤):\n\n"
    help_text += "üìù –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\n"
    help_text += "/bulk_emoji - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤\n"
    help_text += "/bulk_riddle - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≥–∞–¥–æ–∫\n"
    help_text += "/bulk_word - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤\n\n"
    help_text += "üóë –£–¥–∞–ª–µ–Ω–∏–µ:\n"
    help_text += "/delete_emoji - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º\n"
    help_text += "/delete_riddle - —É–¥–∞–ª–∏—Ç—å –∑–∞–≥–∞–¥–∫—É\n"
    help_text += "/delete_word - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
    help_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    help_text += "/games_stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä"
    
    await msg.answer(help_text)

@router.message(Command("bulk_emoji"))
async def bulk_emoji_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "—ç–º–æ–¥–∑–∏ | –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "—ç–º–æ–¥–∑–∏ | –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üëªüëªüëª | –¢—Ä–∏ –±–æ–≥–∞—Ç—ã—Ä—è\n"
        "üë®‚Äçüë¶üê† | –í –ø–æ–∏—Å–∫–∞—Ö –ù–µ–º–æ"
    )
    await state.set_state(GameStates.waiting_bulk_emoji)

@router.message(GameStates.waiting_bulk_emoji)
async def bulk_emoji_process(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await state.clear()
        return
    
    lines = msg.text.strip().split('\n')
    games_data = load_games_data()
    added = 0
    skipped = 0
    
    for line in lines:
        if '|' not in line:
            continue
        emoji, answer = [part.strip() for part in line.split('|', 1)]
        if not emoji or not answer:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if not any(m["emoji"] == emoji and m["answer"].lower() == answer.lower() for m in games_data["emoji_movies"]):
            games_data["emoji_movies"].append({
                "emoji": emoji,
                "answer": answer
            })
            added += 1
        else:
            skipped += 1
    
    save_games_data(games_data)
    await msg.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {added}\n‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped}")
    await state.clear()

@router.message(Command("bulk_riddle"))
async def bulk_riddle_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–∑–∞–≥–∞–¥–∫–∞ | –æ—Ç–≤–µ—Ç\n"
        "–∑–∞–≥–∞–¥–∫–∞ | –æ—Ç–≤–µ—Ç\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–Ø –Ω–µ –∂–∏–≤–∞—è, –Ω–æ —Ä–∞—Å—Ç—É; –Ω–µ –¥—ã—à—É, –Ω–æ —É–º–∏—Ä–∞—é. | —Å–≤–µ—á–∞\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –±–µ—Ä—ë—à—å, —Ç–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è. | —è–º–∞"
    )
    await state.set_state(GameStates.waiting_bulk_riddle)

@router.message(GameStates.waiting_bulk_riddle)
async def bulk_riddle_process(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await state.clear()
        return
    
    lines = msg.text.strip().split('\n')
    games_data = load_games_data()
    added = 0
    skipped = 0
    
    for line in lines:
        if '|' not in line:
            continue
        riddle, answer = [part.strip() for part in line.split('|', 1)]
        if not riddle or not answer:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if not any(r["riddle"].lower() == riddle.lower() for r in games_data["riddles"]):
            games_data["riddles"].append({
                "riddle": riddle,
                "answer": answer.lower()
            })
            added += 1
        else:
            skipped += 1
    
    save_games_data(games_data)
    await msg.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–≥–∞–¥–æ–∫: {added}\n‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped}")
    await state.clear()

@router.message(Command("bulk_word"))
async def bulk_word_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–¥—Ä–∞–∫–æ–Ω\n"
        "–º–∞–≥–∏—è\n"
        "—Ç–æ–∫–µ–Ω"
    )
    await state.set_state(GameStates.waiting_bulk_word)

@router.message(GameStates.waiting_bulk_word)
async def bulk_word_process(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await state.clear()
        return
    
    words = [word.strip().lower() for word in msg.text.strip().split('\n') if word.strip()]
    games_data = load_games_data()
    added = 0
    skipped = 0
    
    for word in words:
        if word not in games_data["word_game_words"]:
            games_data["word_game_words"].append(word)
            added += 1
        else:
            skipped += 1
    
    save_games_data(games_data)
    await msg.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: {added}\n‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped}")
    await state.clear()

@router.message(Command("delete_emoji"))
async def delete_emoji_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    games_data = load_games_data()
    if not games_data["emoji_movies"]:
        await msg.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    movies_list = "\n".join(f"{i+1}. {m['emoji']} | {m['answer']}" 
                           for i, m in enumerate(games_data["emoji_movies"]))
    await msg.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{movies_list}")
    await state.set_state(GameStates.waiting_delete_emoji)

@router.message(GameStates.waiting_delete_emoji)
async def delete_emoji_process(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id):
        await state.clear()
        return
    
    try:
        index = int(msg.text.strip()) - 1
        games_data = load_games_data()
        if 0 <= index < len(games_data["emoji_movies"]):
            deleted = games_data["emoji_movies"].pop(index)
            save_games_data(games_data)
            await msg.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∏–ª—å–º: {deleted['emoji']} | {deleted['answer']}")
        else:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞!")
    except ValueError:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞!")
    
    await state.clear()

@router.message(Command("games_stats"))
async def games_stats(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    games_data = load_games_data()
    stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å–º–∞–º
    stats += "üé¨ –§–∏–ª—å–º—ã:\n"
    stats += f"–í—Å–µ–≥–æ: {len(games_data['emoji_movies'])}\n"
    if games_data["emoji_movies"]:
        stats += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n"
        for movie in games_data["emoji_movies"][-5:]:
            stats += f"- {movie['emoji']} | {movie['answer']}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≥–∞–¥–∫–∞–º
    stats += "\nüéØ –ó–∞–≥–∞–¥–∫–∏:\n"
    stats += f"–í—Å–µ–≥–æ: {len(games_data['riddles'])}\n"
    if games_data["riddles"]:
        stats += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n"
        for riddle in games_data["riddles"][-5:]:
            stats += f"- {riddle['riddle']} | {riddle['answer']}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
    stats += "\nüìö –°–ª–æ–≤–∞:\n"
    stats += f"–í—Å–µ–≥–æ: {len(games_data['word_game_words'])}\n"
    if games_data["word_game_words"]:
        stats += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n"
        for word in games_data["word_game_words"][-5:]:
            stats += f"- {word}\n"
    
    await msg.answer(stats) 