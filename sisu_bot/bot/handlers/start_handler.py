from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sisu_bot.bot.services.user_service import update_user_info, get_user
from sisu_bot.bot.services import points_service
import logging
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User
from sisu_bot.core.config import DB_PATH, REQUIRED_SUBSCRIPTIONS, SUBSCRIPTION_GREETING, SUBSCRIPTION_DENY
from sisu_bot.bot.config import is_superadmin
from sisu_bot.bot.handlers.donate_handler import get_donate_keyboard, TON_WALLET
from aiogram.exceptions import TelegramBadRequest
from sisu_bot.bot.services.antifraud_service import antifraud_service

router = Router()

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

REQUIRED_CHANNELS = [
    {'title': '–ö–∞–Ω–∞–ª SISU', 'url': 'https://t.me/SisuDatuTon'},
    {'title': '–ß–∞—Ç SISU', 'url': 'https://t.me/+F_kH9rcBxL02ZWFi'}
]

async def check_user_subs(user_id, bot=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –∏–∑ REQUIRED_SUBSCRIPTIONS
    # bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    if bot is None:
        return False
    for ch in REQUIRED_SUBSCRIPTIONS:
        chat_id = ch.get("chat_id")
        try:
            member = await bot.get_chat_member(chat_id, user_id)
            if member.status in ("left", "kicked"):
                return False
        except TelegramBadRequest:
            return False
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    return True

@router.message(Command("start"))
async def start_handler(msg: Message):
    args = msg.text.split(maxsplit=1)[1] if len(msg.text.split(maxsplit=1)) > 1 else ""
    user_id = msg.from_user.id
    session = Session()
    user = session.query(User).filter(User.id == user_id).first()

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        user = User(
            id=user_id,
            points=0,
            rank='novice',
            active_days=0,
            referrals=0,
            message_count=0,
            last_checkin=None,
            pending_referral=None
        )
        session.add(user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    is_referral_visit = False
    if args and args.startswith("ref"):
        ref_id = int(args[3:])  # –£–±–∏—Ä–∞–µ–º "ref" –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ—Ä–æ–¥
        can_refer, reason = antifraud_service.check_referral_fraud(
            user_id, ref_id, 
            username=msg.from_user.username,
            first_name=msg.from_user.first_name
        )
        
        if not can_refer:
            antifraud_service.mark_suspicious(user_id, f"Referral fraud attempt: {reason}")
            await msg.answer(f"‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {reason}")
            session.close()
            return
        
        if ref_id != user_id:
            if not user.invited_by:
                user.pending_referral = ref_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ
                is_referral_visit = True
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≥–ª–∞—à—ë–Ω {ref_id}, –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                await msg.answer(
                    "üéØ –¢—ã –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ SisuDatuBot!\n\n"
                    "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:\n"
                    "1. –°–¥–µ–ª–∞–π —á–µ–∫-–∏–Ω –≤ –≥—Ä—É–ø–ø–µ (/checkin)\n"
                    "2. –û—Ç–ø—Ä–∞–≤—å –º–∏–Ω–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "3. –ë—É–¥—å –∞–∫—Ç–∏–≤–µ–Ω –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç –Ω–∞–≥—Ä–∞–¥—É!"
                )
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω {user.invited_by}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    update_user_info(user_id, msg.from_user.username, msg.from_user.first_name)
    session.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
    is_subscribed = await check_user_subs(user_id, bot=msg.bot)
    if not is_subscribed:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_referral_visit:
            greeting_text = (
                "üéØ –¢—ã –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ SisuDatuBot!\n\n"
                "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
                "1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –Ω–∏–∂–µ\n"
                "2. –°–¥–µ–ª–∞–π —á–µ–∫-–∏–Ω –≤ –≥—Ä—É–ø–ø–µ (/checkin)\n"
                "3. –û—Ç–ø—Ä–∞–≤—å –º–∏–Ω–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "4. –ë—É–¥—å –∞–∫—Ç–∏–≤–µ–Ω –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç –Ω–∞–≥—Ä–∞–¥—É!\n\n"
                "üêâ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            )
            greeting_text += "\n".join([f"‚Ä¢ <a href='{ch['url']}'>{ch['title']}</a>" for ch in REQUIRED_SUBSCRIPTIONS])
            greeting_text += "\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."
        else:
            greeting_text = SUBSCRIPTION_GREETING
            
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=ch['title'], url=ch['url'])] for ch in REQUIRED_SUBSCRIPTIONS
            ] + [[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]]
        )
        await msg.answer(greeting_text, reply_markup=kb, parse_mode="HTML")
        session.close()
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å –∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –≤–∏–∑–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_referral_visit:
        await msg.answer(
            "üéØ –¢—ã –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ SisuDatuBot!\n\n"
            "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É:\n"
            "1. –°–¥–µ–ª–∞–π —á–µ–∫-–∏–Ω –≤ –≥—Ä—É–ø–ø–µ (/checkin)\n"
            "2. –û—Ç–ø—Ä–∞–≤—å –º–∏–Ω–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "3. –ë—É–¥—å –∞–∫—Ç–∏–≤–µ–Ω –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç –Ω–∞–≥—Ä–∞–¥—É!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    else:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ SisuDatuBot. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    
    session.close()

# Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "check_subs")
async def check_subs_callback(call):
    user_id = call.from_user.id
    is_subscribed = await check_user_subs(user_id, bot=call.bot)
    if is_subscribed:
        await call.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help.")
    else:
        await call.answer(SUBSCRIPTION_DENY, show_alert=True)

# --- –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---

REQUIRED_SUBS_STORAGE = "required_subs.json"

def load_required_subs():
    import json, os
    if os.path.exists(REQUIRED_SUBS_STORAGE):
        with open(REQUIRED_SUBS_STORAGE, "r", encoding="utf-8") as f:
            return json.load(f)
    return REQUIRED_SUBSCRIPTIONS

def save_required_subs(subs):
    import json
    with open(REQUIRED_SUBS_STORAGE, "w", encoding="utf-8") as f:
        json.dump(subs, f, ensure_ascii=False, indent=2)

@router.message(Command("set_required_subs"))
async def set_required_subs(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    lines = msg.text.split("\n")[1:]
    subs = []
    for line in lines:
        parts = line.strip().split("|", 1)
        if len(parts) == 2:
            title = parts[0].strip()
            url = parts[1].strip()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏–∑ URL
            if url.startswith("https://t.me/+"):
                chat_id = url.replace("https://t.me/+", "")
            elif url.startswith("https://t.me/"):
                chat_id = "@" + url.replace("https://t.me/", "")
            else:
                chat_id = url
            subs.append({
                "title": title, 
                "url": url,
                "chat_id": chat_id
            })
    if not subs:
        await msg.answer("–§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞")
        return
    save_required_subs(subs)
    await msg.answer("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

@router.message(Command("list_required_subs"))
async def list_required_subs(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    subs = load_required_subs()
    text = "–¢–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"{ch['title']}: {ch['url']}" for ch in subs])
    await msg.answer(text)

@router.message(Command("remove_required_sub"))
async def remove_required_sub(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    url = msg.text.split(" ", 1)[1].strip() if " " in msg.text else None
    if not url:
        await msg.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_required_sub <—Å—Å—ã–ª–∫–∞>")
        return
    subs = load_required_subs()
    new_subs = [ch for ch in subs if ch['url'] != url]
    save_required_subs(new_subs)
    await msg.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

@router.message(Command("add_channel"))
async def add_channel(msg: Message):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_superadmin(msg.from_user.id):
        return
    
    try:
        parts = msg.text.split(" ", 2)
        if len(parts) < 3:
            await msg.answer("–§–æ—Ä–º–∞—Ç: /add_channel <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—Å—ã–ª–∫–∞>")
            return
        
        title = parts[1].strip()
        url = parts[2].strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏–∑ URL
        if url.startswith("https://t.me/+"):
            chat_id = url.replace("https://t.me/+", "")
        elif url.startswith("https://t.me/"):
            chat_id = "@" + url.replace("https://t.me/", "")
        else:
            chat_id = url
        
        subs = load_required_subs()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
        for sub in subs:
            if sub['url'] == url or sub['chat_id'] == chat_id:
                await msg.answer(f"‚ùå –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!")
                return
        
        new_channel = {
            "title": title,
            "url": url,
            "chat_id": chat_id
        }
        
        subs.append(new_channel)
        save_required_subs(subs)
        
        await msg.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏!")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")

@router.message(Command("remove_channel"))
async def remove_channel(msg: Message):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not is_superadmin(msg.from_user.id):
        return
    
    try:
        parts = msg.text.split(" ", 1)
        if len(parts) < 2:
            await msg.answer("–§–æ—Ä–º–∞—Ç: /remove_channel <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–ª–∏_—Å—Å—ã–ª–∫–∞>")
            return
        
        search_term = parts[1].strip()
        subs = load_required_subs()
        
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫–µ
        removed_channels = []
        remaining_subs = []
        
        for sub in subs:
            if (search_term.lower() in sub['title'].lower() or 
                search_term in sub['url'] or 
                search_term in sub['chat_id']):
                removed_channels.append(sub['title'])
            else:
                remaining_subs.append(sub)
        
        if not removed_channels:
            await msg.answer(f"‚ùå –ö–∞–Ω–∞–ª '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!")
            return
        
        save_required_subs(remaining_subs)
        
        if len(removed_channels) == 1:
            await msg.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{removed_channels[0]}' —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!")
        else:
            await msg.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {', '.join(removed_channels)}")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")

@router.message(Command("channel_help"))
async def channel_help(msg: Message):
    """–ü–æ–º–æ—â—å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞–º–∏"""
    if not is_superadmin(msg.from_user.id):
        return
    
    help_text = """üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:

üìã –ü—Ä–æ—Å–º–æ—Ç—Ä:
‚Ä¢ /list_required_subs - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏

‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ /add_channel <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—Å—ã–ª–∫–∞> - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç
‚Ä¢ /set_required_subs - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ)

‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ:
‚Ä¢ /remove_channel <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–ª–∏_—Å—Å—ã–ª–∫–∞> - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç
‚Ä¢ /remove_required_sub <—Å—Å—ã–ª–∫–∞> - —É–¥–∞–ª–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ

üìù –§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://t.me/channel_name
‚Ä¢ https://t.me/+invite_link
‚Ä¢ @channel_name

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /add_channel "–ö–∞–Ω–∞–ª SISU" https://t.me/SisuDatuTon
‚Ä¢ /remove_channel "SISU"
‚Ä¢ /remove_channel https://t.me/SisuDatuTon"""
    
    await msg.answer(help_text) 