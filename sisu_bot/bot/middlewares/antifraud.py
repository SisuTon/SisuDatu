from typing import Callable, Dict, Any, Awaitable
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Message
import logging
from datetime import datetime, timedelta
from sisu_bot.bot.db.models import User
from sisu_bot.bot.config import is_superadmin, is_any_admin
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from sisu_bot.core.config import DB_PATH

logger = logging.getLogger(__name__)

engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞
user_activity: Dict[int, Dict] = {}  # user_id -> {"messages": [], "last_checkin": timestamp, "suspicious_count": 0}

class AntiFraudMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id

        # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Ñ—Ä–æ–¥
        if is_superadmin(user_id) or is_any_admin(user_id):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–æ–≤ (Telegram API is_bot flag)
        if event.from_user.is_bot:
            logger.warning(f"AntiFraud: Blocking message from bot user {user_id}")
            return # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–æ–≤

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if await self._is_suspicious_activity(user_id, event):
            logger.warning(f"AntiFraud: Blocking suspicious activity from user {user_id}")
            await event.answer("üö´ –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        return await handler(event, data)
    
    async def _is_suspicious_activity(self, user_id: int, event: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = datetime.utcnow()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if user_id not in user_activity:
            user_activity[user_id] = {
                "messages": [],
                "last_checkin": None,
                "suspicious_count": 0,
                "created_at": current_time
            }
        
        activity = user_activity[user_id]
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
        activity["messages"] = [
            msg_time for msg_time in activity["messages"] 
            if current_time - msg_time < timedelta(hours=1)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        activity["messages"].append(current_time)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        # 1. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        if len(activity["messages"]) > 30:  # –ë–æ–ª—å—à–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
            activity["suspicious_count"] += 1
            logger.warning(f"AntiFraud: User {user_id} sent too many messages ({len(activity['messages'])} in 1 hour)")
        
        # 2. –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω—å—à–µ 2 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        if len(activity["messages"]) >= 2:
            time_diff = (activity["messages"][-1] - activity["messages"][-2]).total_seconds()
            if time_diff < 2:
                activity["suspicious_count"] += 1
                logger.warning(f"AntiFraud: User {user_id} sending messages too fast ({time_diff:.1f}s between messages)")
        
        # 3. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        user_age = current_time - activity["created_at"]
        if user_age < timedelta(hours=1) and len(activity["messages"]) > 20:
            activity["suspicious_count"] += 1
            logger.warning(f"AntiFraud: New user {user_id} with high activity ({len(activity['messages'])} messages in {user_age})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
        session = Session()
        try:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ë–î
                if user.message_count > 100 and user.active_days < 1:
                    activity["suspicious_count"] += 1
                    logger.warning(f"AntiFraud: User {user_id} has high message_count ({user.message_count}) but low active_days ({user.active_days})")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if user.referrals > 5 and user.message_count < 10:
                    activity["suspicious_count"] += 1
                    logger.warning(f"AntiFraud: User {user_id} has many referrals ({user.referrals}) but low activity ({user.message_count} messages)")
        finally:
            session.close()
        
        # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if activity["suspicious_count"] >= 3:
            logger.error(f"AntiFraud: User {user_id} blocked due to suspicious activity (count: {activity['suspicious_count']})")
            return True
        
        return False 