import json
import logging
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from sisu_bot.core.config import DATA_DIR

logger = logging.getLogger(__name__)

class ChatStyleAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∏–ª—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–Ω–µ—Ä—ã –æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self):
        self.data_dir = DATA_DIR
        self.style_file = self.data_dir / 'chat_style_data.json'
        self.style_data = self._load_style_data()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
        self.style_patterns = {
            'emoji_usage': r'[üòÄ-üôèüåÄ-üóø]',
            'caps_usage': r'[A-Z–ê-–Ø]{3,}',
            'punctuation': r'[!?]{2,}',
            'numbers': r'\d+',
            'crypto_terms': r'\b(—Ç–æ–Ω|ton|—Ç–æ–∫–µ–Ω|–∫—Ä–∏–ø—Ç–∞|–±–ª–æ–∫—á–µ–π–Ω|–¥–µ—Ñ–∏|–Ω—Ñ—Ç|–ø–∞–º–ø|–¥–∞–º–ø|—Ö–æ–ª–¥|hodl|moon|–ª—É–Ω–∞)\b',
            'memes': r'\b(–∫–µ–∫|–ª–æ–ª|—Ä–æ—Ñ–ª|–∞—Ö–∞—Ö–∞|—Ö–∞—Ö–∞|—Ö–µ—Ö|–æ–º–≥|–≤–∞—É|–æ–≥–æ|–¥–µ–≥–µ–Ω|–¥–µ–≥–µ–Ω—Å–∫–∏–π|–¥–µ–≥–µ–Ω—á–∏–∫|–¥–µ–≥–µ–Ω–∫–∞|–¥–µ–≥–µ–Ω—Å—Ç–≤–æ)\b',
            'english_words': r'\b[a-zA-Z]+\b',
            'repeated_chars': r'(.)\1{2,}',
            'question_words': r'\b(—á—Ç–æ|–∫–∞–∫|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–æ–≥–¥–∞|–≥–¥–µ|–∫—Ç–æ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–∏–µ)\b',
            'exclamations': r'[!]{1,3}',
            'questions': r'[?]{1,3}'
        }
        
    def _load_style_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª—è —á–∞—Ç–∞"""
        try:
            if self.style_file.exists():
                with open(self.style_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return {
                    "chat_styles": {},
                    "common_patterns": {},
                    "meme_database": {},
                    "anger_triggers": {},
                    "style_history": []
                }
        except Exception as e:
            logger.error(f"Error loading style data: {e}")
            return {"chat_styles": {}, "common_patterns": {}, "meme_database": {}, "anger_triggers": {}, "style_history": []}
    
    def _save_style_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª—è"""
        try:
            with open(self.style_file, 'w', encoding='utf-8') as f:
                json.dump(self.style_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving style data: {e}")
    
    def analyze_message_style(self, message: str, chat_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        style_analysis = {
            'emoji_count': len(re.findall(self.style_patterns['emoji_usage'], message)),
            'caps_words': len(re.findall(self.style_patterns['caps_usage'], message)),
            'punctuation_intensity': len(re.findall(self.style_patterns['punctuation'], message)),
            'crypto_terms': len(re.findall(self.style_patterns['crypto_terms'], message.lower())),
            'meme_words': len(re.findall(self.style_patterns['memes'], message.lower())),
            'english_words': len(re.findall(self.style_patterns['english_words'], message)),
            'repeated_chars': len(re.findall(self.style_patterns['repeated_chars'], message)),
            'question_words': len(re.findall(self.style_patterns['question_words'], message.lower())),
            'exclamations': len(re.findall(self.style_patterns['exclamations'], message)),
            'questions': len(re.findall(self.style_patterns['questions'], message)),
            'length': len(message),
            'word_count': len(message.split())
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        style_analysis['style_type'] = self._determine_style_type(style_analysis)
        
        return style_analysis
    
    def _determine_style_type(self, analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç–∏–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if analysis['meme_words'] > 0 or analysis['repeated_chars'] > 0:
            return 'meme'
        elif analysis['caps_words'] > 0 or analysis['punctuation_intensity'] > 2:
            return 'excited'
        elif analysis['crypto_terms'] > 0:
            return 'crypto'
        elif analysis['question_words'] > 0 or analysis['questions'] > 0:
            return 'question'
        elif analysis['emoji_count'] > 2:
            return 'emoji_heavy'
        elif analysis['english_words'] > analysis['word_count'] * 0.3:
            return 'mixed_language'
        else:
            return 'normal'
    
    def update_chat_style(self, message: str, chat_id: int, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        analysis = self.analyze_message_style(message, chat_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å —á–∞—Ç–∞
        if chat_id not in self.style_data["chat_styles"]:
            self.style_data["chat_styles"][chat_id] = {
                "style_patterns": defaultdict(int),
                "common_words": defaultdict(int),
                "emoji_usage": defaultdict(int),
                "punctuation_style": defaultdict(int),
                "last_updated": datetime.now().isoformat(),
                "message_count": 0,
                "active_users": []
            }
        
        chat_style = self.style_data["chat_styles"][chat_id]
        chat_style["active_users"] = list(set(chat_style["active_users"] + [user_id]))
        chat_style["message_count"] += 1
        chat_style["last_updated"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∏–ª—è
        chat_style["style_patterns"][analysis['style_type']] += 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏ —ç–º–æ–¥–∑–∏
        words = re.findall(r'\b\w+\b', message.lower())
        emojis = re.findall(self.style_patterns['emoji_usage'], message)
        punctuation = re.findall(r'[!?]{1,3}', message)
        
        for word in words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                chat_style["common_words"][word] += 1
        
        for emoji in emojis:
            chat_style["emoji_usage"][emoji] += 1
        
        for punct in punctuation:
            chat_style["punctuation_style"][punct] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if len(chat_style["common_words"]) > 1000:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
            sorted_words = sorted(chat_style["common_words"].items(), key=lambda x: x[1], reverse=True)
            chat_style["common_words"] = dict(sorted_words[:500])
        
        self._save_style_data()
    
    def get_chat_style(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å —á–∞—Ç–∞"""
        if chat_id not in self.style_data["chat_styles"]:
            return self._get_default_style()
        
        chat_style = self.style_data["chat_styles"][chat_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å
        style_patterns = chat_style["style_patterns"]
        dominant_style = max(style_patterns.items(), key=lambda x: x[1])[0] if style_patterns else "normal"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–ª–æ–≤–∞ –∏ —ç–º–æ–¥–∑–∏
        top_words = dict(sorted(chat_style["common_words"].items(), key=lambda x: x[1], reverse=True)[:20])
        top_emojis = dict(sorted(chat_style["emoji_usage"].items(), key=lambda x: x[1], reverse=True)[:10])
        top_punctuation = dict(sorted(chat_style["punctuation_style"].items(), key=lambda x: x[1], reverse=True)[:5])
        
        return {
            "dominant_style": dominant_style,
            "top_words": top_words,
            "top_emojis": top_emojis,
            "top_punctuation": top_punctuation,
            "message_count": chat_style["message_count"],
            "active_users": len(chat_style["active_users"]),
            "last_updated": chat_style["last_updated"]
        }
    
    def _get_default_style(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "dominant_style": "normal",
            "top_words": {},
            "top_emojis": {},
            "top_punctuation": {},
            "message_count": 0,
            "active_users": 0,
            "last_updated": None
        }
    
    def generate_style_based_response(self, chat_id: int, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ —á–∞—Ç–∞"""
        chat_style = self.get_chat_style(chat_id)
        
        if chat_style["message_count"] < 10:
            # –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ–º—ã
            return self._get_basic_meme_response()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è —á–∞—Ç–∞
        if chat_style["dominant_style"] == "meme":
            return self._generate_meme_response(chat_style)
        elif chat_style["dominant_style"] == "excited":
            return self._generate_excited_response(chat_style)
        elif chat_style["dominant_style"] == "crypto":
            return self._generate_crypto_response(chat_style)
        elif chat_style["dominant_style"] == "emoji_heavy":
            return self._generate_emoji_response(chat_style)
        elif chat_style["dominant_style"] == "mixed_language":
            return self._generate_mixed_response(chat_style)
        else:
            return self._generate_normal_response(chat_style)
    
    def _get_basic_meme_response(self) -> str:
        """–ë–∞–∑–æ–≤—ã–µ –º–µ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        basic_memes = [
            "–∫–µ–∫",
            "–ª–æ–ª",
            "–∞—Ö–∞—Ö–∞",
            "–æ–≥–æ",
            "–≤–∞—É",
            "–¥–µ–≥–µ–Ω",
            "–¥–µ–≥–µ–Ω—Å–∫–∏–π",
            "–¥–µ–≥–µ–Ω—á–∏–∫",
            "–¥–µ–≥–µ–Ω–∫–∞",
            "–¥–µ–≥–µ–Ω—Å—Ç–≤–æ",
            "—Ä–æ—Ñ–ª",
            "–æ–º–≥"
        ]
        import random
        return random.choice(basic_memes)
    
    def _generate_meme_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ –∏–∑ —á–∞—Ç–∞
        if chat_style["top_words"]:
            common_word = random.choice(list(chat_style["top_words"].keys()))
            meme_responses = [
                f"{common_word} –∫–µ–∫",
                f"–ª–æ–ª {common_word}",
                f"–∞—Ö–∞—Ö–∞ {common_word}",
                f"{common_word} —Ä–æ—Ñ–ª",
                f"–∫–µ–∫ {common_word}",
                f"{common_word} –¥–µ–≥–µ–Ω"
            ]
            return random.choice(meme_responses)
        
        return random.choice(["–∫–µ–∫", "–ª–æ–ª", "–∞—Ö–∞—Ö–∞", "—Ä–æ—Ñ–ª"])
    
    def _generate_excited_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        excited_responses = [
            "–û–ì–û!!!",
            "–í–ê–£!!",
            "–ö–†–£–¢–û!!!",
            "–û–§–ò–ì–ï–ù–ù–û!!",
            "–°–£–ü–ï–†!!!",
            "–ë–û–ú–ë–ê!!",
            "–û–ì–û –î–ï–ì–ï–ù!!!",
            "–î–ï–ì–ï–ù –ö–†–£–¢–û!!!",
            "–î–ï–ì–ï–ù–°–ö–ò–ô –ö–†–£–¢–û!!!"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ —á–∞—Ç–µ
        if chat_style["top_emojis"]:
            emoji = random.choice(list(chat_style["top_emojis"].keys()))
            return f"{random.choice(excited_responses)} {emoji}"
        
        return random.choice(excited_responses)
    
    def _generate_crypto_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ-–æ—Ç–≤–µ—Ç"""
        import random
        
        crypto_responses = [
            "HODL –¥–æ –ª—É–Ω—ã!",
            "Diamond hands!",
            "To the moon!",
            "WAGMI!",
            "LFG!",
            "Pump it!",
            "Moon mission!",
            "–¢–û–ù –∫ –ª—É–Ω–µ!",
            "–ö—Ä–∏–ø—Ç–∞ —Ä—É–ª–∏—Ç!",
            "–ë–ª–æ–∫—á–µ–π–Ω forever!"
        ]
        
        return random.choice(crypto_responses)
    
    def _generate_emoji_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏"""
        import random
        
        if chat_style["top_emojis"]:
            emojis = list(chat_style["top_emojis"].keys())
            return " ".join(random.choices(emojis, k=random.randint(2, 4)))
        
        return "üòÄüòÅüòÇü§£"
    
    def _generate_mixed_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        mixed_responses = [
            "lol –∫–µ–∫",
            "omg –∞—Ö–∞—Ö–∞",
            "wow –∫—Ä—É—Ç–æ",
            "damn –¥–µ–≥–µ–Ω",
            "fuck –¥–µ–≥–µ–Ω—Å–∫–∏–π",
            "shit –¥–µ–≥–µ–Ω—á–∏–∫",
            "holy –¥–µ–≥–µ–Ω–∫–∞",
            "wtf —á—Ç–æ –∑–∞ –¥–µ–≥–µ–Ω—Å—Ç–≤–æ"
        ]
        
        return random.choice(mixed_responses)
    
    def _generate_normal_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        normal_responses = [
            "–ø–æ–Ω—è—Ç–Ω–æ",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
            "–∫—Ä—É—Ç–æ",
            "–≤–∞—É",
            "–æ–≥–æ",
            "–¥–µ–≥–µ–Ω",
            "–¥–µ–≥–µ–Ω—Å–∫–∏–π",
            "–¥–µ–≥–µ–Ω—á–∏–∫",
            "–¥–µ–≥–µ–Ω–∫–∞",
            "–¥–µ–≥–µ–Ω—Å—Ç–≤–æ"
        ]
        
        return random.choice(normal_responses)
    
    def add_anger_trigger(self, trigger: str, intensity: int = 1):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –∑–ª–æ—Å—Ç–∏"""
        self.style_data["anger_triggers"][trigger.lower()] = intensity
        self._save_style_data()
    
    def check_anger_triggers(self, message: str) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∑–ª–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        message_lower = message.lower()
        anger_level = 0
        
        for trigger, intensity in self.style_data["anger_triggers"].items():
            if trigger in message_lower:
                anger_level += intensity
        
        return min(anger_level, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —É—Ä–æ–≤–µ–Ω—å –∑–ª–æ—Å—Ç–∏
    
    def get_anger_response(self, anger_level: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–ª–æ—Å—Ç–∏"""
        if anger_level == 0:
            return ""
        
        anger_responses = {
            1: "–Ω—É –æ–∫",
            2: "–ø–æ–Ω—è—Ç–Ω–æ",
            3: "—Ö–º",
            4: "–Ω—É –∏ –ª–∞–¥–Ω–æ",
            5: "–¥–µ–≥–µ–Ω",
            6: "–¥–µ–≥–µ–Ω—Å–∫–∏–π",
            7: "–¥–µ–≥–µ–Ω—á–∏–∫",
            8: "–¥–µ–≥–µ–Ω–∫–∞",
            9: "–¥–µ–≥–µ–Ω—Å—Ç–≤–æ",
            10: "–¥–µ–≥–µ–Ω –¥–µ–≥–µ–Ω"
        }
        
        return anger_responses.get(anger_level, "–¥–µ–≥–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
chat_style_analyzer = ChatStyleAnalyzer()
