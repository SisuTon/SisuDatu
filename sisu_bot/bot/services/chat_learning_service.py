import json
import logging
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from sisu_bot.core.config import DATA_DIR

logger = logging.getLogger(__name__)

class ChatLearningService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –°–∏—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è —á–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.data_dir = DATA_DIR
        self.learning_file = self.data_dir / 'chat_learning_data.json'
        self.learning_data = self._load_learning_data()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.patterns = {
            'emoji': r'[üòÄ-üôèüåÄ-üóø]',
            'caps': r'[A-Z–ê-–Ø]{3,}',
            'punctuation': r'[!?]{2,}',
            'numbers': r'\d+',
            'crypto': r'\b(—Ç–æ–Ω|ton|—Ç–æ–∫–µ–Ω|–∫—Ä–∏–ø—Ç–∞|–±–ª–æ–∫—á–µ–π–Ω|–¥–µ—Ñ–∏|–Ω—Ñ—Ç|–ø–∞–º–ø|–¥–∞–º–ø|—Ö–æ–ª–¥|hodl|moon|–ª—É–Ω–∞)\b',
            'memes': r'\b(–∫–µ–∫|–ª–æ–ª|—Ä–æ—Ñ–ª|–∞—Ö–∞—Ö–∞|—Ö–∞—Ö–∞|—Ö–µ—Ö|–æ–º–≥|–≤–∞—É|–æ–≥–æ|–ø–µ–ª—å–º–µ–Ω—å|–∫–æ—Ç|—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫|—Ç—Ä–∞–∫—Ç–æ—Ä)\b',
            'english': r'\b[a-zA-Z]+\b',
            'repeated': r'(.)\1{2,}',
            'questions': r'\b(—á—Ç–æ|–∫–∞–∫|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–æ–≥–¥–∞|–≥–¥–µ|–∫—Ç–æ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–∏–µ)\b',
            'exclamations': r'[!]{1,3}',
            'questions_mark': r'[?]{1,3}'
        }
        
    def _load_learning_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if self.learning_file.exists():
                with open(self.learning_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return {
                    "chat_styles": {},
                    "learned_phrases": {},
                    "user_patterns": {},
                    "absurd_templates": [],
                    "learning_stats": {}
                }
        except Exception as e:
            logger.error(f"Error loading learning data: {e}")
            return {"chat_styles": {}, "learned_phrases": {}, "user_patterns": {}, "absurd_templates": [], "learning_stats": {}}
    
    def _save_learning_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            with open(self.learning_file, 'w', encoding='utf-8') as f:
                json.dump(self.learning_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving learning data: {e}")
    
    def analyze_chat_message(self, message: str, chat_id: int, user_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        analysis = {
            'chat_id': chat_id,
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),
            'length': len(message),
            'word_count': len(message.split()),
            'emoji_count': len(re.findall(self.patterns['emoji'], message)),
            'caps_words': len(re.findall(self.patterns['caps'], message)),
            'punctuation_intensity': len(re.findall(self.patterns['punctuation'], message)),
            'crypto_terms': len(re.findall(self.patterns['crypto'], message.lower())),
            'meme_words': len(re.findall(self.patterns['memes'], message.lower())),
            'english_words': len(re.findall(self.patterns['english'], message)),
            'repeated_chars': len(re.findall(self.patterns['repeated'], message)),
            'question_words': len(re.findall(self.patterns['questions'], message.lower())),
            'exclamations': len(re.findall(self.patterns['exclamations'], message)),
            'questions': len(re.findall(self.patterns['questions_mark'], message))
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        analysis['style_type'] = self._determine_message_style(analysis)
        
        return analysis
    
    def _determine_message_style(self, analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if analysis['meme_words'] > 0 or analysis['repeated_chars'] > 0:
            return 'meme'
        elif analysis['caps_words'] > 0 or analysis['punctuation_intensity'] > 2:
            return 'excited'
        elif analysis['crypto_terms'] > 0:
            return 'crypto'
        elif analysis['question_words'] > 0 or analysis['questions'] > 0:
            return 'question'
        elif analysis['emoji_count'] > 2:
            return 'emoji_heavy'
        elif analysis['english_words'] > analysis['word_count'] * 0.3:
            return 'mixed_language'
        elif analysis['length'] < 10:
            return 'short'
        else:
            return 'normal'
    
    def learn_from_message(self, message: str, chat_id: int, user_id: int):
        """–û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        analysis = self.analyze_chat_message(message, chat_id, user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        if chat_id not in self.learning_data["chat_styles"]:
            self.learning_data["chat_styles"][chat_id] = {
                "style_patterns": defaultdict(int),
                "common_words": defaultdict(int),
                "emoji_usage": defaultdict(int),
                "punctuation_style": defaultdict(int),
                "message_count": 0,
                "active_users": [],
                "last_updated": datetime.now().isoformat()
            }
        
        chat_style = self.learning_data["chat_styles"][chat_id]
        chat_style["active_users"] = list(set(chat_style["active_users"] + [user_id]))
        chat_style["message_count"] += 1
        chat_style["last_updated"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∏–ª—è
        chat_style["style_patterns"][analysis['style_type']] += 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏ —ç–º–æ–¥–∑–∏
        words = re.findall(r'\b\w+\b', message.lower())
        emojis = re.findall(self.patterns['emoji'], message)
        punctuation = re.findall(r'[!?]{1,3}', message)
        
        for word in words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                chat_style["common_words"][word] += 1
        
        for emoji in emojis:
            chat_style["emoji_usage"][emoji] += 1
        
        for punct in punctuation:
            chat_style["punctuation_style"][punct] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if len(chat_style["common_words"]) > 1000:
            sorted_words = sorted(chat_style["common_words"].items(), key=lambda x: x[1], reverse=True)
            chat_style["common_words"] = dict(sorted_words[:500])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        if analysis['style_type'] == 'meme' and analysis['meme_words'] > 0:
            self._learn_absurd_phrase(message)
        
        self._save_learning_data()
    
    def _learn_absurd_phrase(self, message: str):
        """–ò–∑—É—á–∞–µ—Ç –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã"""
        # –ò—â–µ–º –∞–±—Å—É—Ä–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        absurd_patterns = [
            r'\b\w+\s+(–∞—Ç–∞–∫—É–µ—Ç|—Å—ä–µ–ª|—Å—Ç–∞–ª|–±—ã–ª)\s+\w+\b',
            r'\b\w+\s+\w+\s+(–∏ —Å—Ç–∞–ª|–∏ –±—ã–ª|–∏ –∞—Ç–∞–∫—É–µ—Ç)\s+\w+\b',
            r'\b\w+\s+–≤\s+\w+\s+—Å\s+\w+\b',
            r'\b\w+\s+\w+\s+\w+\s+\w+\b'  # 4 —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥
        ]
        
        for pattern in absurd_patterns:
            matches = re.findall(pattern, message.lower())
            for match in matches:
                if isinstance(match, tuple):
                    phrase = ' '.join(match)
                else:
                    phrase = match
                
                if phrase not in self.learning_data["absurd_templates"]:
                    self.learning_data["absurd_templates"].append(phrase)
                    if len(self.learning_data["absurd_templates"]) > 100:
                        self.learning_data["absurd_templates"] = self.learning_data["absurd_templates"][-100:]
    
    def get_chat_style(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å —á–∞—Ç–∞"""
        if chat_id not in self.learning_data["chat_styles"]:
            return self._get_default_style()
        
        chat_style = self.learning_data["chat_styles"][chat_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å
        style_patterns = chat_style["style_patterns"]
        dominant_style = max(style_patterns.items(), key=lambda x: x[1])[0] if style_patterns else "normal"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–ª–æ–≤–∞ –∏ —ç–º–æ–¥–∑–∏
        top_words = dict(sorted(chat_style["common_words"].items(), key=lambda x: x[1], reverse=True)[:20])
        top_emojis = dict(sorted(chat_style["emoji_usage"].items(), key=lambda x: x[1], reverse=True)[:10])
        top_punctuation = dict(sorted(chat_style["punctuation_style"].items(), key=lambda x: x[1], reverse=True)[:5])
        
        return {
            "dominant_style": dominant_style,
            "top_words": top_words,
            "top_emojis": top_emojis,
            "top_punctuation": top_punctuation,
            "message_count": chat_style["message_count"],
            "active_users": len(chat_style["active_users"]),
            "last_updated": chat_style["last_updated"]
        }
    
    def _get_default_style(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "dominant_style": "normal",
            "top_words": {},
            "top_emojis": {},
            "top_punctuation": {},
            "message_count": 0,
            "active_users": 0,
            "last_updated": None
        }
    
    def generate_adaptive_response(self, chat_id: int, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è —á–∞—Ç–∞"""
        chat_style = self.get_chat_style(chat_id)
        
        if chat_style["message_count"] < 5:
            # –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            return self._get_basic_absurd_response()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è —á–∞—Ç–∞
        if chat_style["dominant_style"] == "meme":
            return self._generate_meme_response(chat_style)
        elif chat_style["dominant_style"] == "excited":
            return self._generate_excited_response(chat_style)
        elif chat_style["dominant_style"] == "crypto":
            return self._generate_crypto_response(chat_style)
        elif chat_style["dominant_style"] == "emoji_heavy":
            return self._generate_emoji_response(chat_style)
        elif chat_style["dominant_style"] == "mixed_language":
            return self._generate_mixed_response(chat_style)
        else:
            return self._generate_normal_response(chat_style)
    
    def _get_basic_absurd_response(self) -> str:
        """–ë–∞–∑–æ–≤—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        import random
        basic_absurd = [
            "–∫–µ–∫",
            "–ª–æ–ª",
            "–∞—Ö–∞—Ö–∞",
            "—Ä–æ—Ñ–ª",
            "–æ–º–≥",
            "–≤–∞—É",
            "–æ–≥–æ",
            "–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
            "–∫–æ—Ç —Å—ä–µ–ª –ø–µ–ª—å–º–µ–Ω—å –∏ —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º",
            "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –±—ã–ª –±–∞—Ç—è",
            "–ø–µ–ª—å–º–µ–Ω—å —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º",
            "–∫–æ—Ç –≤ —Ñ–æ—Ç–æ—à–æ–ø–µ —Å –∫–æ–ª—ë—Å–∞–º–∏",
            "—Ä–∞–Ω–¥–æ–º–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤",
            "–∞–Ω—Ç–∏-—é–º–æ—Ä",
            "—Ç—É–ø–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º"
        ]
        return random.choice(basic_absurd)
    
    def _generate_meme_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ –∏–∑ —á–∞—Ç–∞
        if chat_style["top_words"]:
            common_word = random.choice(list(chat_style["top_words"].keys()))
            meme_responses = [
                f"{common_word} –∫–µ–∫",
                f"–ª–æ–ª {common_word}",
                f"–∞—Ö–∞—Ö–∞ {common_word}",
                f"{common_word} —Ä–æ—Ñ–ª",
                f"–∫–µ–∫ {common_word}",
                f"{common_word} –ø–µ–ª—å–º–µ–Ω—å",
                f"–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç {common_word}",
                f"–∫–æ—Ç —Å—ä–µ–ª {common_word} –∏ —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º",
                f"{common_word} —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º"
            ]
            return random.choice(meme_responses)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if self.learning_data["absurd_templates"]:
            template = random.choice(self.learning_data["absurd_templates"])
            return template
        
        return random.choice(["–∫–µ–∫", "–ª–æ–ª", "–∞—Ö–∞—Ö–∞", "—Ä–æ—Ñ–ª"])
    
    def _generate_excited_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        excited_responses = [
            "–û–ì–û!!!",
            "–í–ê–£!!",
            "–ö–†–£–¢–û!!!",
            "–û–§–ò–ì–ï–ù–ù–û!!",
            "–°–£–ü–ï–†!!!",
            "–ë–û–ú–ë–ê!!",
            "–û–ì–û –ü–ï–õ–¨–ú–ï–ù–¨!!!",
            "–ü–ï–õ–¨–ú–ï–ù–¨ –ö–†–£–¢–û!!!",
            "–ö–û–¢ –°–¢–ê–õ –¢–†–ê–ö–¢–û–†–û–ú!!!"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ —á–∞—Ç–µ
        if chat_style["top_emojis"]:
            emoji = random.choice(list(chat_style["top_emojis"].keys()))
            return f"{random.choice(excited_responses)} {emoji}"
        
        return random.choice(excited_responses)
    
    def _generate_crypto_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ-–æ—Ç–≤–µ—Ç"""
        import random
        
        crypto_responses = [
            "HODL",
            "Diamond hands",
            "To the moon",
            "WAGMI",
            "LFG",
            "Pump it",
            "Moon mission",
            "–¢–û–ù –∫ –ª—É–Ω–µ",
            "–ö—Ä–∏–ø—Ç–∞ —Ä—É–ª–∏—Ç",
            "–ë–ª–æ–∫—á–µ–π–Ω forever",
            "–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω",
            "–∫–æ—Ç —Å—Ç–∞–ª –∫—Ä–∏–ø—Ç–æ–π"
        ]
        
        return random.choice(crypto_responses)
    
    def _generate_emoji_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏"""
        import random
        
        if chat_style["top_emojis"]:
            emojis = list(chat_style["top_emojis"].keys())
            return " ".join(random.choices(emojis, k=random.randint(2, 4)))
        
        return "üòÄüòÅüòÇü§£"
    
    def _generate_mixed_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        mixed_responses = [
            "lol –∫–µ–∫",
            "omg –∞—Ö–∞—Ö–∞",
            "wow –∫—Ä—É—Ç–æ",
            "damn –ø–µ–ª—å–º–µ–Ω—å",
            "fuck –∫–æ—Ç",
            "shit —Ç—Ä–∞–∫—Ç–æ—Ä",
            "holy —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
            "wtf —á—Ç–æ –∑–∞ –ø–µ–ª—å–º–µ–Ω—å"
        ]
        
        return random.choice(mixed_responses)
    
    def _generate_normal_response(self, chat_style: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        import random
        
        normal_responses = [
            "–ø–æ–Ω—è—Ç–Ω–æ",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
            "–∫—Ä—É—Ç–æ",
            "–≤–∞—É",
            "–æ–≥–æ",
            "–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç",
            "–∫–æ—Ç —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º",
            "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –±—ã–ª –±–∞—Ç—è",
            "–ø–µ–ª—å–º–µ–Ω—å —Å—Ç–∞–ª —Ç—Ä–∞–∫—Ç–æ—Ä–æ–º",
            "–∫–æ—Ç –≤ —Ñ–æ—Ç–æ—à–æ–ø–µ"
        ]
        
        return random.choice(normal_responses)
    
    def get_learning_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        total_chats = len(self.learning_data["chat_styles"])
        total_phrases = len(self.learning_data["absurd_templates"])
        total_messages = sum(chat["message_count"] for chat in self.learning_data["chat_styles"].values())
        
        return {
            "total_chats": total_chats,
            "total_phrases": total_phrases,
            "total_messages": total_messages,
            "learning_active": total_chats > 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
chat_learning_service = ChatLearningService()
