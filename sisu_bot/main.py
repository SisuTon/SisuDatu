from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram.types import Update

# –•–µ–Ω–¥–ª–µ—Ä—ã
from sisu_bot.bot.handlers.checkin_handler import router as checkin_router
from sisu_bot.bot.handlers.donate_handler import router as donate_router
from sisu_bot.bot.handlers.media_handler import router as media_router
from sisu_bot.bot.handlers.message_handler import router as message_router
from sisu_bot.bot.handlers.ref_handler import router as ref_router
from sisu_bot.bot.handlers.admin_handler import router as admin_router
from sisu_bot.bot.handlers.ai_handler import router as ai_router
from sisu_bot.bot.handlers.common import router as common_router
from sisu_bot.bot.handlers.help_handler import router as help_router
from sisu_bot.bot.handlers.market_handler import router as market_router
from sisu_bot.bot.handlers.myrank_handler import router as myrank_router
from sisu_bot.bot.handlers.top_handler import router as top_router
from sisu_bot.bot.handlers.dialog_handler import dialog_router
from sisu_bot.bot.handlers.start_handler import router as start_router
from sisu_bot.bot.handlers.superadmin_handler import router as superadmin_router

# Middlewares
from sisu_bot.bot.middlewares.preprocess import PreprocessMiddleware
from sisu_bot.bot.middlewares.antifraud import AntiFraudMiddleware
from sisu_bot.bot.middlewares.allowed_chats_middleware import AllowedChatsMiddleware
from sisu_bot.bot.middlewares.user_sync import UserSyncMiddleware
from sisu_bot.bot.middlewares.rate_limit import RateLimitMiddleware

# –°–µ—Ä–≤–∏—Å—ã
from sisu_bot.bot.services.command_menu_service import setup_command_menus

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from sisu_bot.core.config import LOG_LEVEL, LOG_FILE, SUPERADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=LOG_LEVEL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE)
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("No token provided. Set TELEGRAM_BOT_TOKEN or BOT_TOKEN environment variable.")

async def main():
    logger.info("Starting bot...")
    
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    logger.info("Registering middlewares...")
    dp.message.middleware(PreprocessMiddleware())
    dp.message.middleware(AntiFraudMiddleware())
    dp.message.middleware(AllowedChatsMiddleware())
    dp.message.middleware(UserSyncMiddleware())
    dp.message.middleware(RateLimitMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    logger.info("Registering routers...")
    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(superadmin_router)
    dp.include_router(start_router)     # –ö–æ–º–∞–Ω–¥–∞ /start
    dp.include_router(help_router)      # –ö–æ–º–∞–Ω–¥–∞ /help
    dp.include_router(checkin_router)   # –ö–æ–º–∞–Ω–¥–∞ /checkin
    dp.include_router(donate_router)    # –ö–æ–º–∞–Ω–¥–∞ /donate
    dp.include_router(ref_router)       # –ö–æ–º–∞–Ω–¥–∞ /ref
    dp.include_router(market_router)    # –ö–æ–º–∞–Ω–¥–∞ /market
    dp.include_router(myrank_router)    # –ö–æ–º–∞–Ω–¥–∞ /myrank
    dp.include_router(top_router)       # –ö–æ–º–∞–Ω–¥–∞ /top
    
    # 2. –ó–∞—Ç–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(admin_router)     # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    
    # 3. –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
    dp.include_router(media_router)     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    
    # 4. –ó–∞—Ç–µ–º AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.include_router(ai_router)        # AI –¥–∏–∞–ª–æ–≥–∏
    dp.include_router(dialog_router)    # –î–∏–∞–ª–æ–≥–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–µ-–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    
    # 5. –í –∫–æ–Ω—Ü–µ –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(common_router)    # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(message_router)   # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    @dp.errors()
    async def errors_handler(exception: Exception, update: Update):
        logger.exception(f"Unhandled exception in update {update.update_id}: {exception}")
        # –û–ø–æ–≤–µ—â–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        for admin_id in SUPERADMIN_IDS:
            try:
                await bot.send_message(admin_id, f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!\n\nUpdate ID: {update.update_id}\n–û—à–∏–±–∫–∞: {exception}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ CallbackQuery)
        if update.message:
            await update.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º! üò¢")
        elif update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º! üò¢", show_alert=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    logger.info("Setting up command menus...")
    if await setup_command_menus(bot):
        logger.info("Command menus set up successfully")
    else:
        logger.warning("Some command menus were not set up successfully")

    logger.info("Bot started successfully! üöÄ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user.")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {e}", exc_info=True)