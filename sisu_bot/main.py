from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
import os
from dotenv import load_dotenv

# –•–µ–Ω–¥–ª–µ—Ä—ã
from bot.handlers.checkin_handler import router as checkin_router
from bot.handlers.donate_handler import router as donate_router
from bot.handlers.media_handler import router as media_router
from bot.handlers.message_handler import router as message_router
from bot.handlers.ref_handler import router as ref_router
from bot.handlers.admin_handler import router as admin_router
from bot.handlers.ai_handler import router as ai_router
from bot.handlers.commands import router as commands_router
from bot.handlers.common import router as common_router
from bot.handlers.help_handler import router as help_router
from bot.handlers.market_handler import router as market_router
from bot.handlers.myrank_handler import router as myrank_router
from bot.handlers.start_handler import router as start_router
from bot.handlers.top_handler import router as top_router
from bot.handlers.dialog_handler import dialog_router

# Middlewares
from bot.middlewares.preprocess import PreprocessMiddleware
from bot.middlewares.antifraud import AntiFraudMiddleware
from bot.middlewares.allowed_chats_middleware import AllowedChatsMiddleware
from bot.middlewares.user_sync import UserSyncMiddleware

# –°–µ—Ä–≤–∏—Å—ã
from bot.services.command_menu_service import setup_command_menus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("No token provided. Set TELEGRAM_BOT_TOKEN or BOT_TOKEN environment variable.")

async def main():
    logger.info("Starting bot...")
    
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    logger.info("Registering middlewares...")
    dp.message.middleware(PreprocessMiddleware())
    dp.message.middleware(AntiFraudMiddleware())
    dp.message.middleware(AllowedChatsMiddleware())
    dp.message.middleware(UserSyncMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    logger.info("Registering routers...")
    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(commands_router)  # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(start_router)     # –ö–æ–º–∞–Ω–¥–∞ /start
    dp.include_router(help_router)      # –ö–æ–º–∞–Ω–¥–∞ /help
    dp.include_router(checkin_router)   # –ö–æ–º–∞–Ω–¥–∞ /checkin
    dp.include_router(donate_router)    # –ö–æ–º–∞–Ω–¥–∞ /donate
    dp.include_router(ref_router)       # –ö–æ–º–∞–Ω–¥–∞ /ref
    dp.include_router(market_router)    # –ö–æ–º–∞–Ω–¥–∞ /market
    dp.include_router(myrank_router)    # –ö–æ–º–∞–Ω–¥–∞ /myrank
    dp.include_router(top_router)       # –ö–æ–º–∞–Ω–¥–∞ /top
    
    # 2. –ó–∞—Ç–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(admin_router)     # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    
    # 3. –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
    dp.include_router(media_router)     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    
    # 4. –ó–∞—Ç–µ–º AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.include_router(ai_router)        # AI –¥–∏–∞–ª–æ–≥–∏
    dp.include_router(dialog_router)    # –î–∏–∞–ª–æ–≥–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–µ-–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    
    # 5. –í –∫–æ–Ω—Ü–µ –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(common_router)    # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(message_router)   # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    logger.info("Setting up command menus...")
    if await setup_command_menus(bot):
        logger.info("Command menus set up successfully")
    else:
        logger.warning("Some command menus were not set up successfully")

    logger.info("Bot started successfully! üöÄ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user.")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {e}", exc_info=True)