#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –Ω–∞–π–¥–µ–º –≥–¥–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def diagnose_bot():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê SISU")
    print("="*50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
    try:
        from sisu_bot.bot.handlers import (
            start_handler, help_handler, admin_handler, superadmin_handler,
            ai_handler, dialog_handler, games_handler, button_handler
        )
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        handlers = [
            start_handler, help_handler, admin_handler, superadmin_handler,
            button_handler, ai_handler, dialog_handler, games_handler
        ]
        
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handlers)}")
        for i, handler in enumerate(handlers):
            print(f"  {i}: {handler.__name__} -> router: {hasattr(handler, 'router')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º button_handler
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º button_handler:")
    try:
        print(f"Router: {button_handler.router}")
        print(f"Handlers –≤ router: {len(button_handler.router._handlers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        button_texts = [
            "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "üìä –ú–æ–π —Ä–∞–Ω–≥", "‚úÖ –ß–µ–∫-–∏–Ω", 
            "üíé –î–æ–Ω–∞—Ç", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "‚ùì –ü–æ–º–æ—â—å", "üéÆ –ò–≥—Ä—ã"
        ]
        
        for text in button_texts:
            print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{text}'...")
            # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ router
            found = False
            for handler in button_handler.router._handlers:
                if hasattr(handler, 'filters'):
                    for filter_obj in handler.filters:
                        if hasattr(filter_obj, 'text') and filter_obj.text == text:
                            found = True
                            break
            print(f"    {'‚úÖ' if found else '‚ùå'} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {found}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ button_handler: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ai_handler
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ai_handler:")
    try:
        print(f"Router: {ai_handler.router}")
        print(f"Handlers –≤ router: {len(ai_handler.router._handlers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã AI handler
        for handler in ai_handler.router._handlers:
            if hasattr(handler, 'filters'):
                print(f"  –§–∏–ª—å—Ç—Ä—ã: {[str(f) for f in handler.filters]}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ai_handler: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä:")
    try:
        from sisu_bot.bot.bot import get_dispatcher
        dp = get_dispatcher()
        print(f"Dispatcher: {dp}")
        print(f"Routers –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ: {len(dp._routers)}")
        
        for i, router in enumerate(dp._routers):
            print(f"  {i}: {router} -> handlers: {len(router._handlers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:")
    try:
        from aiogram.types import Message, User, Chat
        from aiogram import Bot
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_user = User(id=446318189, is_bot=False, first_name="Test")
        test_chat = Chat(id=446318189, type="private")
        test_message = Message(
            message_id=1,
            from_user=test_user,
            chat=test_chat,
            date=1234567890,
            text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
        )
        
        print(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{test_message.text}'")
        print(f"–¢–∏–ø —á–∞—Ç–∞: {test_message.chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ä–∞–±–æ—Ç–∞—é—Ç
        matching_handlers = []
        for router in dp._routers:
            for handler in router._handlers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if hasattr(handler, 'filters'):
                        for filter_obj in handler.filters:
                            if hasattr(filter_obj, '__call__'):
                                try:
                                    if filter_obj(test_message):
                                        matching_handlers.append((router, handler, filter_obj))
                                        break
                                except:
                                    pass
                except:
                    pass
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(matching_handlers)}")
        for router, handler, filter_obj in matching_handlers:
            print(f"  Router: {router}, Filter: {filter_obj}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("\n" + "="*50)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    diagnose_bot()
