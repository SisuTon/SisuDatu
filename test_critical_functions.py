#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SisuDatuBot
"""

import asyncio
import logging
from pathlib import Path
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from app.shared.config.settings import Settings
from app.infrastructure.db.models import User
from app.infrastructure.db.session import Session
from app.domain.services.gamification.points import add_points, get_user
from app.shared.config.bot_config import is_superadmin, is_any_admin

class CriticalFunctionsTester:
    """–¢–µ—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.settings = Settings()
        self.test_user_id = 999999998
        self.test_referrer_id = 999999997
        
    def test_superadmin_commands(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            superadmin_ids = self.settings.superadmin_ids
            logger.info(f"‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã: {superadmin_ids}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_superadmin
            for admin_id in superadmin_ids:
                if is_superadmin(admin_id):
                    logger.info(f"‚úÖ {admin_id} - —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞)")
                else:
                    logger.error(f"‚ùå {admin_id} - –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_any_admin
            for admin_id in superadmin_ids:
                if is_any_admin(admin_id):
                    logger.info(f"‚úÖ {admin_id} - –∞–¥–º–∏–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞)")
                else:
                    logger.error(f"‚ùå {admin_id} - –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: {e}")
            return False
    
    def test_rate_limits(self):
        """–¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            minute_limit = self.settings.rate_limit_per_minute
            hour_limit = self.settings.rate_limit_per_hour
            
            logger.info(f"‚úÖ –õ–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É: {minute_limit}")
            logger.info(f"‚úÖ –õ–∏–º–∏—Ç –≤ —á–∞—Å: {hour_limit}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            if minute_limit > 0 and hour_limit > 0:
                logger.info("‚úÖ –õ–∏–º–∏—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.error("‚ùå –õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False
    
    def test_referral_system(self):
        """–¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            session = Session()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referrer = session.query(User).filter(User.id == self.test_referrer_id).first()
            if not referrer:
                referrer = User(
                    id=self.test_referrer_id,
                    points=0,
                    referrals=0,
                    rank='novice'
                )
                session.add(referrer)
                session.commit()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.id == self.test_user_id).first()
            if not user:
                user = User(
                    id=self.test_user_id,
                    points=0,
                    referrals=0,
                    rank='novice',
                    pending_referral=self.test_referrer_id
                )
                session.add(user)
                session.commit()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            initial_referrals = referrer.referrals
            initial_points = referrer.points
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ checkin)
            user.invited_by = self.test_referrer_id
            user.pending_referral = None
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            referral_bonus = 100
            add_points(self.test_referrer_id, referral_bonus, is_checkin=False)
            referrer.referrals += 1
            
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            updated_referrer = session.query(User).filter(User.id == self.test_referrer_id).first()
            
            if (updated_referrer.referrals == initial_referrals + 1 and 
                updated_referrer.points == initial_points + referral_bonus):
                logger.info("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                logger.info(f"   –†–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏–ª {referral_bonus} –±–∞–ª–ª–æ–≤")
                logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {updated_referrer.referrals}")
                return True
            else:
                logger.error("‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
        finally:
            session.close()
    
    def test_points_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
            initial_user = get_user(self.test_user_id)
            initial_points = initial_user.points if initial_user else 0
            
            points_to_add = 50
            add_points(self.test_user_id, points_to_add)
            
            updated_user = get_user(self.test_user_id)
            if updated_user and updated_user.points == initial_points + points_to_add:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                logger.info(f"   –ë–∞–ª–ª—ã: {initial_points} ‚Üí {updated_user.points}")
                return True
            else:
                logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤: {e}")
            return False
    
    def test_ai_generation_restrictions(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ middleware –∏–ª–∏ handlers
            
            logger.info("‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —á–∞—Ç–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ AI –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        logger.info("=" * 60)
        
        tests = [
            ("–ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞", self.test_superadmin_commands),
            ("–õ–∏–º–∏—Ç—ã", self.test_rate_limits),
            ("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", self.test_referral_system),
            ("–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤", self.test_points_system),
            ("AI –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", self.test_ai_generation_restrictions),
        ]
        
        results = {}
        for test_name, test_func in tests:
            logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            try:
                success = test_func()
                results[test_name] = success
                if success:
                    logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                results[test_name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed_tests = sum(1 for result in results.values() if result)
        total_tests = len(results)
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
        logger.info("=" * 60)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name}: {status}")
        
        logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        else:
            logger.warning(f"‚ö†Ô∏è {total_tests - passed_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        return passed_tests == total_tests

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CriticalFunctionsTester()
    success = await tester.run_all_tests()
    return success

if __name__ == "__main__":
    asyncio.run(main()) 