#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service
from sisu_bot.bot.services.chat_activity_service import chat_activity_service
from sisu_bot.bot.services.chat_style_analyzer import chat_style_analyzer
from sisu_bot.bot.services.chat_learning_service import chat_learning_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_sisu_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –°–∏—Å—É"""
    print("üêâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –°–∏—Å—É")
    print("=" * 60)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –°–∏—Å—É –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç
    test_messages = [
        "–°–∏—Å—É –∫–∞–∫ –¥–µ–ª–∞?",
        "–°–∏—Å—É –æ—Ç–≤–µ—Ç—å –º–Ω–µ", 
        "–°–∏—Å—É –ª–æ—Ö",
        "–ë–∏—Ç–æ–∫ —É–ø–∞–ª",
        "–°–∏—Å—É –∫–∞–∫ —Ç—ã?",
        "–°–∏—Å—É —á—Ç–æ –¥—É–º–∞–µ—à—å?",
        "–°–∏—Å—É –ø—Ä–∏–≤–µ—Ç",
        "–°–∏—Å—É –ø–æ–∫–∞"
    ]
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –°–∏—Å—É –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:")
    for message in test_messages:
        response = meme_persona_service.get_meme_response(message, user_id, chat_id)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response) if response else 0}")
        print("-" * 30)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(5):
        response = meme_persona_service._get_basic_absurd_response()
        print(f"–ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç {i+1}: {response}")

async def test_crypto_reactions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π")
    print("=" * 50)
    
    chat_id = -1001234567890
    user_id = 12345
    
    crypto_messages = [
        "–ë–∏—Ç–æ–∫ —É–ø–∞–ª",
        "–ö—É–¥–∞ —Ä—ã–Ω–æ–∫?",
        "–í–∑—è–ª —à–æ—Ä—Ç", 
        "–•–æ–ª–¥–∏–º?",
        "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ?",
        "–£ –º–µ–Ω—è –º–∏–Ω—É—Å",
        "–Ø –≤ –ø–ª—é—Å–µ!",
        "–ö–æ–≥–¥–∞ –ø–∞–º–ø?",
        "–°–ª–∏–ª –≤—Å—ë",
        "–Ø –∏–Ω–≤–µ—Å—Ç–æ—Ä"
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏:")
    for message in crypto_messages:
        response = meme_persona_service.get_meme_response(message, user_id, chat_id)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)

async def test_anger_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∑–ª–æ—Å—Ç–∏"""
    print("\nüò° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–ª–æ—Å—Ç–∏")
    print("=" * 50)
    
    chat_id = -1001234567890
    user_id = 12345
    
    anger_messages = [
        "–°–∏—Å—É –ª–æ—Ö",
        "–°–∏—Å—É –¥—É—Ä–∞–∫",
        "–°–∏—Å—É –∏–¥–∏–æ—Ç", 
        "–°–∏—Å—É —Ç—É–ø–æ–π",
        "–°–∏—Å—É –∑–∞—Ç–∫–Ω–∏—Å—å",
        "–°–∏—Å—É –Ω–∞–¥–æ–µ–ª"
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–ª–æ—Å—Ç–∏:")
    for message in anger_messages:
        response = meme_persona_service.get_meme_response(message, user_id, chat_id)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print(f"–£—Ä–æ–≤–µ–Ω—å –∑–ª–æ—Å—Ç–∏: {meme_persona_service.anger_level}")
        print("-" * 30)

async def test_learning_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 50)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –û–±—É—á–∞–µ–º –°–∏—Å—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    learning_messages = [
        "—É–ø–∞–ª –Ω–µ –±–∏—Ç–æ–∫, –∞ –º–æ—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "–Ω–∞ –¥–Ω–æ. —è —É–∂–µ —Ç–∞–º, –º–æ–≥—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å",
        "—à–æ—Ä—Ç–∞–Ω—É–ª —à—Ç–∞–Ω—ã —Ç–æ–∂–µ?",
        "—è –Ω–µ —Ö–æ–ª–¥–µ—Ä, —è –∑–∞–ª–æ–∂–Ω–∏–∫",
        "–º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ª–µ–≥—á–µ –≤–æ–∑–¥—É—Ö–∞"
    ]
    
    print("–û–±—É—á–∞–µ–º –°–∏—Å—É:")
    for message in learning_messages:
        chat_learning_service.learn_from_message(message, chat_id, user_id)
        print(f"–ò–∑—É—á–µ–Ω–æ: {message}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å —á–∞—Ç–∞
    chat_style = chat_learning_service.get_chat_style(chat_id)
    print(f"\n–°—Ç–∏–ª—å —á–∞—Ç–∞: {chat_style}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    print("\n–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(5):
        response = chat_learning_service.generate_adaptive_response(chat_id)
        print(f"–û—Ç–≤–µ—Ç {i+1}: {response}")

async def test_fallback_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É fallback"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã fallback")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∞–±—Å—É—Ä–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("–ë–∞–∑–æ–≤—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
    for i in range(10):
        response = meme_persona_service._get_basic_absurd_response()
        print(f"{i+1}. {response}")
    
    # –¢–µ—Å—Ç –∞–±—Å—É—Ä–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ –±–∞–∑—ã
    print("\n–ê–±—Å—É—Ä–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –±–∞–∑—ã:")
    absurd_phrases = meme_persona_service.persona_data["meme_responses"]["absurd_humor"]
    for i, phrase in enumerate(absurd_phrases[:10], 1):
        print(f"{i}. {phrase}")

async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    chat_id = -1001234567890
    user_id = 12345
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    test_messages = [
        "–°–∏—Å—É –ø—Ä–∏–≤–µ—Ç!",
        "–ë–∏—Ç–æ–∫ —É–ø–∞–ª",
        "–°–∏—Å—É –∫–∞–∫ –¥–µ–ª–∞?",
        "–°–∏—Å—É –ª–æ—Ö",
        "–¢–û–ù –∫ –ª—É–Ω–µ!",
        "–°–∏—Å—É —á—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É?"
    ]
    
    print("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:")
    for message in test_messages:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        chat_activity_service.record_message(chat_id, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = meme_persona_service.get_meme_response(message, user_id, chat_id)
        
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {meme_persona_service.get_mood_status()}")
        print(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞: {chat_activity_service.get_chat_stats(chat_id)}")
        print("-" * 30)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_sisu_responses()
        await test_crypto_reactions()
        await test_anger_system()
        await test_learning_system()
        await test_fallback_system()
        await test_integration()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –¥–µ–≥–µ–Ω—Å–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
