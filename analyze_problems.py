#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º SisuDatuBot
"""

import asyncio
import logging
from pathlib import Path
import sys
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from app.shared.config.settings import Settings, REQUIRED_SUBSCRIPTIONS, DONATION_TIERS
from app.infrastructure.db.models import User
from app.infrastructure.db.session import Session

class ProblemAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self):
        self.settings = Settings()
        
    def analyze_donation_limits(self):
        """–ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DONATION_TIERS
            logger.info("üìã –£—Ä–æ–≤–Ω–∏ –¥–æ–Ω–∞—Ç–∞:")
            for tier, config in DONATION_TIERS.items():
                logger.info(f"  {tier}:")
                logger.info(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {config.get('title', 'N/A')}")
                logger.info(f"    TTS –ª–∏–º–∏—Ç: {config.get('tts_limit', 'N/A')}")
                logger.info(f"    –ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–∞–ª–ª–æ–≤: {config.get('points_multiplier', 'N/A')}")
                logger.info(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.get('duration_days', 'N/A')} –¥–Ω–µ–π")
                logger.info(f"    –ë–æ–Ω—É—Å—ã: {', '.join(config.get('benefits', []))}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤: {e}")
            return False
    
    def analyze_subscription_check(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
        
        try:
            logger.info(f"üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(REQUIRED_SUBSCRIPTIONS)}")
            for sub in REQUIRED_SUBSCRIPTIONS:
                logger.info(f"  - {sub['title']}: {sub['chat_id']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ start_handler")
            logger.info("‚úÖ –ï—Å—Ç—å callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            logger.info("‚úÖ –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def analyze_top_problems(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–ø–∞–º–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–ø–∞–º–∏...")
        
        try:
            session = Session()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
            users = session.query(User).limit(10).all()
            logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}")
            
            problems = []
            for user in users:
                if not user.username and not user.first_name:
                    problems.append(f"User {user.id}: –Ω–µ—Ç username –∏ first_name")
                elif not user.username:
                    problems.append(f"User {user.id}: –Ω–µ—Ç username")
                elif not user.first_name:
                    problems.append(f"User {user.id}: –Ω–µ—Ç first_name")
            
            if problems:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for problem in problems:
                    logger.warning(f"  {problem}")
            else:
                logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –∏–º–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø
            logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (–≤ –ª–∏—á–∫–µ)")
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (–≤ —á–∞—Ç–∞—Ö)")
            
            session.close()
            return len(problems) == 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ø–æ–≤: {e}")
            return False
    
    def analyze_games(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å –∏–≥—Ä–∞–º–∏
            games_file = Path("data/games_data.json")
            if games_file.exists():
                with open(games_file, 'r', encoding='utf-8') as f:
                    games_data = json.load(f)
                games_count = len(games_data.get('games', {}))
                logger.info(f"üìã –ò–≥—Ä –≤ —Ñ–∞–π–ª–µ: {games_count}")
                
                if games_count > 0:
                    logger.info("‚úÖ –ò–≥—Ä—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
                    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–≥—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª games_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            logger.warning("‚ö†Ô∏è –ò–≥—Ä—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä: {e}")
            return False
    
    def analyze_voice(self):
        """–ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SpeechKit
            api_key = self.settings.yandex_speechkit_api_key
            folder_id = self.settings.yandex_speechkit_folder_id
            
            if api_key == "dummy_speechkit_key":
                logger.error("‚ùå YANDEX_SPEECHKIT_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            if not folder_id:
                logger.error("‚ùå YANDEX_SPEECHKIT_FOLDER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            logger.info("‚úÖ SpeechKit –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            logger.info("‚úÖ TTS —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã TTS –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤
            logger.info("üìã TTS –ª–∏–º–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:")
            for tier, config in DONATION_TIERS.items():
                tts_limit = config.get('tts_limit', 'N/A')
                logger.info(f"  {tier}: {tts_limit} —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–∞: {e}")
            return False
    
    def analyze_learning(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è
            learning_file = Path("data/learning_data.json")
            if learning_file.exists():
                with open(learning_file, 'r', encoding='utf-8') as f:
                    learning_data = json.load(f)
                
                triggers = learning_data.get('triggers', {})
                responses = learning_data.get('responses', {})
                
                logger.info(f"üìã –¢—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏: {len(triggers)}")
                logger.info(f"üìã –û—Ç–≤–µ—Ç–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏: {len(responses)}")
                
                if triggers:
                    logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:")
                    for trigger, responses_list in list(triggers.items())[:3]:
                        logger.info(f"  '{trigger}' ‚Üí {responses_list}")
                
                logger.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –≤ —á–∞—Ç–∞—Ö –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
                logger.warning("‚ö†Ô∏è –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å per-chat –æ–±—É—á–µ–Ω–∏–µ")
                
            else:
                logger.error("‚ùå –§–∞–π–ª learning_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    async def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º SisuDatuBot")
        logger.info("=" * 60)
        
        analyses = [
            ("–õ–∏–º–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤", self.analyze_donation_limits),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", self.analyze_subscription_check),
            ("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–ø–∞–º–∏", self.analyze_top_problems),
            ("–ò–≥—Ä—ã", self.analyze_games),
            ("–ì–æ–ª–æ—Å", self.analyze_voice),
            ("–û–±—É—á–µ–Ω–∏–µ –≤ —á–∞—Ç–∞—Ö", self.analyze_learning),
        ]
        
        results = {}
        for analysis_name, analysis_func in analyses:
            logger.info(f"\nüìã –ê–Ω–∞–ª–∏–∑: {analysis_name}")
            try:
                success = analysis_func()
                results[analysis_name] = success
                if success:
                    logger.info(f"‚úÖ {analysis_name}: –û–ö")
                else:
                    logger.warning(f"‚ö†Ô∏è {analysis_name}: –ü–†–û–ë–õ–ï–ú–´")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ {analysis_name}: {e}")
                results[analysis_name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed_analyses = sum(1 for result in results.values() if result)
        total_analyses = len(results)
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–ë–õ–ï–ú")
        logger.info("=" * 60)
        
        for analysis_name, result in results.items():
            status = "‚úÖ –û–ö" if result else "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´"
            logger.info(f"{analysis_name}: {status}")
        
        logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_analyses}/{total_analyses} –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        if passed_analyses == total_analyses:
            logger.info("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!")
        else:
            logger.warning(f"‚ö†Ô∏è {total_analyses - passed_analyses} –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        return passed_analyses == total_analyses

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = ProblemAnalyzer()
    success = await analyzer.run_analysis()
    return success

if __name__ == "__main__":
    asyncio.run(main()) 