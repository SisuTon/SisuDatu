#!/usr/bin/env python3
"""
–ú–ï–ì–ê-–ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–†–û–ë–õ–ï–ú SisuDatuBot
–í—ã—è–≤–ª—è–µ—Ç –í–°–ï: –±–∞–≥–∏, –∫–æ—Å—Ç—ã–ª–∏, –¥—É–±–ª–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
"""

import asyncio
import logging
import ast
import importlib
import inspect
import os
import re
from pathlib import Path
import sys
import json
import traceback
from collections import defaultdict, Counter
from typing import Dict, List, Set, Any, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

try:
    from app.shared.config.settings import Settings, REQUIRED_SUBSCRIPTIONS, DONATION_TIERS
    from app.infrastructure.db.models import User
    from app.infrastructure.db.session import Session
except ImportError as e:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    sys.exit(1)

class MegaProblemAnalyzer:
    """–ú–ï–ì–ê-–ê–ù–ê–õ–ò–ó–ê–¢–û–† –í–°–ï–• –ü–†–û–ë–õ–ï–ú"""
    
    def __init__(self):
        self.settings = Settings()
        self.problems = defaultdict(list)
        self.duplicates = []
        self.architecture_issues = []
        self.business_logic_issues = []
        self.code_quality_issues = []
        self.dependencies = defaultdict(set)
        self.import_errors = []
        self.syntax_errors = []
        
    def analyze_syntax_errors(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–∞—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...")
        
        python_files = list(Path("app").rglob("*.py"))
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                ast.parse(content)
            except SyntaxError as e:
                error_msg = f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}:{e.lineno}: {e.msg}"
                self.syntax_errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}"
                self.syntax_errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")
        
        return len(self.syntax_errors) == 0
    
    def analyze_import_errors(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞...")
        
        critical_modules = [
            'app.core.container',
            'app.domain.services.gamification.points',
            'app.domain.services.gamification.top',
            'app.domain.services.gamification.checkin',
            'app.presentation.bot.handlers.checkin',
            'app.presentation.bot.handlers.top_handler',
            'app.presentation.bot.handlers.myrank',
            'app.infrastructure.ai.yandex_gpt',
            'app.infrastructure.ai.speechkit_tts',
        ]
        
        for module_name in critical_modules:
            try:
                importlib.import_module(module_name)
                logger.info(f"‚úÖ {module_name}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            except ImportError as e:
                error_msg = f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_name}: {e}"
                self.import_errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}"
                self.import_errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")
        
        return len(self.import_errors) == 0
    
    def analyze_duplicate_code(self):
        """–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
        
        python_files = list(Path("app").rglob("*.py"))
        code_blocks = defaultdict(list)
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –ø–æ 5+ —Å—Ç—Ä–æ–∫
                for i in range(len(lines) - 4):
                    block = tuple(lines[i:i+5])
                    if any(line.strip() for line in block):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
                        code_blocks[block].append(f"{file_path}:{i+1}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for block, locations in code_blocks.items():
            if len(locations) > 1:
                self.duplicates.append({
                    'block': block,
                    'locations': locations,
                    'count': len(locations)
                })
                logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∫–æ–¥–∞ –≤ {len(locations)} –º–µ—Å—Ç–∞—Ö: {locations[0]}")
        
        return len(self.duplicates) == 0
    
    def analyze_architecture_violations(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
        violations = []
        
        # Domain –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç Infrastructure
        domain_files = list(Path("app/domain").rglob("*.py"))
        for file_path in domain_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º AST –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
                tree = ast.parse(content)
                for node in ast.walk(tree):
                    if isinstance(node, ast.ImportFrom) and node.module and 'app.infrastructure' in node.module:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                        is_inside_function = False
                        for parent in ast.walk(tree):
                            if isinstance(parent, ast.FunctionDef):
                                if (hasattr(node, 'lineno') and hasattr(parent, 'lineno') and 
                                    hasattr(parent, 'end_lineno') and 
                                    parent.lineno <= node.lineno <= parent.end_lineno):
                                    is_inside_function = True
                                    break
                        
                        if not is_inside_function:
                            violations.append(f"Domain –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Infrastructure: {file_path}")
                            logger.error(f"‚ùå –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {file_path}")
                            break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # Presentation –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ Infrastructure
        presentation_files = list(Path("app/presentation").rglob("*.py"))
        for file_path in presentation_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î
                if 'session.query(' in content or 'Session()' in content:
                    violations.append(f"–ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –≤ Presentation: {file_path}")
                    logger.error(f"‚ùå –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        self.architecture_issues.extend(violations)
        return len(violations) == 0
    
    def analyze_business_logic(self):
        """–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            checkin_handler = Path("app/presentation/bot/handlers/checkin.py")
            if checkin_handler.exists():
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ checkin –Ω–∞–π–¥–µ–Ω")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ checkin")
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ checkin")
            
            top_handler = Path("app/presentation/bot/handlers/top_handler.py")
            if top_handler.exists():
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ top –Ω–∞–π–¥–µ–Ω")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ top")
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ top")
            
            myrank_handler = Path("app/presentation/bot/handlers/myrank.py")
            if myrank_handler.exists():
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ myrank –Ω–∞–π–¥–µ–Ω")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ myrank")
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ myrank")
                
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        try:
            points_service = Path("app/domain/services/gamification/points.py")
            if points_service.exists():
                with open(points_service, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                required_methods = ['get_user_points', 'add_points', 'get_rank_by_points', 'create_user']
                for method in required_methods:
                    if f"def {method}" not in content:
                        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method} –≤ PointsService")
                        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method} –≤ PointsService")
                    else:
                        logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω –≤ PointsService")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PointsService")
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PointsService")
                
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PointsService: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PointsService: {e}")
        
        self.business_logic_issues.extend(issues)
        return len(issues) == 0
    
    def analyze_code_quality(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        issues = []
        python_files = list(Path("app").rglob("*.py"))
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    lines = content.split('\n')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Å—Ç—ã–ª–∏
                if 'TODO' in content or 'FIXME' in content or 'HACK' in content:
                    issues.append(f"–ö–æ—Å—Ç—ã–ª–∏ –≤ {file_path}")
                    logger.warning(f"‚ö†Ô∏è –ö–æ—Å—Ç—ã–ª–∏ –≤ {file_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ bare except
                if 'except:' in content:
                    issues.append(f"Bare except –≤ {file_path}")
                    logger.warning(f"‚ö†Ô∏è Bare except –≤ {file_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (>50 —Å—Ç—Ä–æ–∫)
                in_function = False
                function_start = 0
                for i, line in enumerate(lines):
                    if line.strip().startswith('def ') and not line.strip().startswith('def _'):
                        in_function = True
                        function_start = i
                    elif in_function and line.strip() and not line.startswith(' ') and not line.startswith('\t'):
                        if i - function_start > 50:
                            issues.append(f"–î–ª–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ {file_path}:{function_start+1}")
                            logger.warning(f"‚ö†Ô∏è –î–ª–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ {file_path}:{function_start+1}")
                        in_function = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                try:
                    tree = ast.parse(content)
                    imported_names = set()
                    used_names = set()
                    
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Import):
                            for alias in node.names:
                                imported_names.add(alias.name.split('.')[0])
                        elif isinstance(node, ast.ImportFrom):
                            if node.module:
                                imported_names.add(node.module.split('.')[0])
                        elif isinstance(node, ast.Name):
                            used_names.add(node.id)
                    
                    unused_imports = imported_names - used_names
                    if unused_imports:
                        issues.append(f"–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ {file_path}: {unused_imports}")
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ {file_path}: {unused_imports}")
                        
                except SyntaxError:
                    pass  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ analyze_syntax_errors
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
        
        self.code_quality_issues.extend(issues)
        return len(issues) == 0
    
    def analyze_database_issues(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        issues = []
        
        try:
            session = Session()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            users = session.query(User).limit(1).all()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            user = session.query(User).first()
            if user:
                required_attrs = ['id', 'username', 'first_name', 'points', 'referrals', 'active_days']
                for attr in required_attrs:
                    if not hasattr(user, attr):
                        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç {attr} –≤ –º–æ–¥–µ–ª–∏ User")
                        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç {attr} –≤ –º–æ–¥–µ–ª–∏ User")
                    else:
                        logger.info(f"‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr} –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥–µ–ª–∏ User")
            
            session.close()
            
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        
        return len(issues) == 0
    
    def analyze_configuration(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            required_settings = [
                'telegram_bot_token',
                'yandex_api_key', 
                'yandex_folder_id',
                'yandex_speechkit_api_key',
                'yandex_speechkit_folder_id'
            ]
            
            for setting in required_settings:
                value = getattr(self.settings, setting, None)
                if not value or value in ['dummy_key', 'dummy_speechkit_key', '']:
                    issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting}")
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting}")
                else:
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting}: OK")
                    
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return len(issues) == 0
    
    async def run_analysis(self):
        """–ú–ï–ì–ê-–ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–†–û–ë–õ–ï–ú"""
        logger.info("üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•")
        logger.info("üî•                    –ú–ï–ì–ê-–ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–†–û–ë–õ–ï–ú SisuDatuBot                    üî•")
        logger.info("üî•                    –í–´–Ø–í–õ–Ø–ï–¢ –í–°–ï: –ë–ê–ì–ò, –ö–û–°–¢–´–õ–ò, –î–£–ë–õ–ò, –ê–†–•–ò–¢–ï–ö–¢–£–†–£          üî•")
        logger.info("üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•")
        
        analyses = [
            ("–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏", self.analyze_syntax_errors),
            ("–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞", self.analyze_import_errors),
            ("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥", self.analyze_duplicate_code),
            ("–ù–∞—Ä—É—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã", self.analyze_architecture_violations),
            ("–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞", self.analyze_business_logic),
            ("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", self.analyze_code_quality),
            ("–ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î", self.analyze_database_issues),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.analyze_configuration),
        ]
        
        results = {}
        for analysis_name, analysis_func in analyses:
            logger.info(f"\nüìã –ê–Ω–∞–ª–∏–∑: {analysis_name}")
            try:
                success = analysis_func()
                results[analysis_name] = success
                if success:
                    logger.info(f"‚úÖ {analysis_name}: –û–ö")
                else:
                    logger.warning(f"‚ö†Ô∏è {analysis_name}: –ü–†–û–ë–õ–ï–ú–´")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ {analysis_name}: {e}")
                results[analysis_name] = False
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 80)
        logger.info("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –í–°–ï–• –ü–†–û–ë–õ–ï–ú")
        logger.info("=" * 80)
        
        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if self.syntax_errors:
            logger.error(f"‚ùå –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(self.syntax_errors)}):")
            for error in self.syntax_errors:
                logger.error(f"  ‚Ä¢ {error}")
        
        # –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        if self.import_errors:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ò –ò–ú–ü–û–†–¢–ê ({len(self.import_errors)}):")
            for error in self.import_errors:
                logger.error(f"  ‚Ä¢ {error}")
        
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        if self.duplicates:
            logger.warning(f"‚ö†Ô∏è –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î ({len(self.duplicates)} –±–ª–æ–∫–æ–≤):")
            for dup in self.duplicates[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                logger.warning(f"  ‚Ä¢ {dup['count']} –∫–æ–ø–∏–π –≤: {', '.join(dup['locations'][:3])}")
            if len(self.duplicates) > 10:
                logger.warning(f"  ... –∏ –µ—â–µ {len(self.duplicates) - 10} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.architecture_issues:
            logger.error(f"‚ùå –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.architecture_issues)}):")
            for issue in self.architecture_issues:
                logger.error(f"  ‚Ä¢ {issue}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        if self.business_logic_issues:
            logger.error(f"‚ùå –ü–†–û–ë–õ–ï–ú–´ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò ({len(self.business_logic_issues)}):")
            for issue in self.business_logic_issues:
                logger.error(f"  ‚Ä¢ {issue}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        if self.code_quality_issues:
            logger.warning(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê ({len(self.code_quality_issues)}):")
            for issue in self.code_quality_issues[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                logger.warning(f"  ‚Ä¢ {issue}")
            if len(self.code_quality_issues) > 20:
                logger.warning(f"  ... –∏ –µ—â–µ {len(self.code_quality_issues) - 20} –ø—Ä–æ–±–ª–µ–º")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_problems = (
            len(self.syntax_errors) + 
            len(self.import_errors) + 
            len(self.duplicates) + 
            len(self.architecture_issues) + 
            len(self.business_logic_issues) + 
            len(self.code_quality_issues)
        )
        
        passed_analyses = sum(1 for result in results.values() if result)
        total_analyses = len(results)
        
        logger.info("\n" + "=" * 80)
        logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 80)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {passed_analyses}/{total_analyses}")
        logger.info(f"‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {total_problems}")
        logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–¥–∞: {len(self.duplicates)}")
        logger.info(f"üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(self.architecture_issues)}")
        logger.info(f"üíº –ü—Ä–æ–±–ª–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: {len(self.business_logic_issues)}")
        
        if total_problems == 0:
            logger.info("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´! –ü–†–û–ï–ö–¢ –ò–î–ï–ê–õ–ï–ù!")
        else:
            logger.error(f"üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –ù–ê–ô–î–ï–ù–û {total_problems} –ü–†–û–ë–õ–ï–ú!")
        
        return total_problems == 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = MegaProblemAnalyzer()
    success = await analyzer.run_analysis()
    return success

if __name__ == "__main__":
    asyncio.run(main()) 