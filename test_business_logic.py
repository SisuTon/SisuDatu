#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ SisuDatuBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–º–∞–Ω–¥—ã, AI, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
import sqlite3
from pathlib import Path
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.shared.config.settings import Settings, REQUIRED_SUBSCRIPTIONS
from app.infrastructure.db.models import User
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.shared.config import DB_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class BusinessLogicTester:
    def __init__(self):
        self.settings = Settings()
        self.test_results = {}
        
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            engine = create_engine(f'sqlite:///{DB_PATH}')
            Session = sessionmaker(bind=engine)
            with Session() as session:
                users = session.query(User).limit(5).all()
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                self.test_results['database'] = True
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.test_results['database'] = False
            return False
    
    def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            required_settings = [
                'telegram_bot_token',
                'yandex_api_key', 
                'yandex_folder_id',
                'superadmin_ids',
                'admin_ids'
            ]
            
            for setting in required_settings:
                value = getattr(self.settings, setting, None)
                if value is None or value == "":
                    logger.warning(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    logger.info(f"‚úÖ {setting}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            logger.info(f"‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(REQUIRED_SUBSCRIPTIONS)} –∫–∞–Ω–∞–ª–æ–≤")
            for sub in REQUIRED_SUBSCRIPTIONS:
                logger.info(f"   - {sub['title']}: {sub['chat_id']}")
            
            self.test_results['configuration'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['configuration'] = False
            return False
    
    def test_data_files(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            data_dir = self.settings.data_dir
            required_files = [
                'phrases.json',
                'troll_triggers.json', 
                'learning_data.json',
                'sisu_persona.json',
                'games_data.json',
                'adminlog.json',
                'allowed_chats.json'
            ]
            
            missing_files = []
            for file in required_files:
                file_path = data_dir / file
                if file_path.exists():
                    logger.info(f"‚úÖ {file}: –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è {file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    missing_files.append(file)
            
            if missing_files:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
                self.test_results['data_files'] = False
                return False
            else:
                logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
                self.test_results['data_files'] = True
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            self.test_results['data_files'] = False
            return False
    
    def test_database_schema(self):
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            engine = create_engine(f'sqlite:///{DB_PATH}')
            Session = sessionmaker(bind=engine)
            with Session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
                users = session.query(User).limit(1).all()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if users:
                    user = users[0]
                    required_fields = ['id', 'username', 'first_name', 'points', 'rank', 'active_days', 'referrals']
                    for field in required_fields:
                        if hasattr(user, field):
                            logger.info(f"‚úÖ –ü–æ–ª–µ {field}: –¥–æ—Å—Ç—É–ø–Ω–æ")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                self.test_results['database_schema'] = True
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã –ë–î: {e}")
            self.test_results['database_schema'] = False
            return False
    
    def test_user_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        try:
            from app.domain.services.user_service import UserService
            
            user_service = UserService()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user_id = 999999999
            user_service.update_user_info(
                user_id=test_user_id,
                username="test_user",
                first_name="Test User"
            )
            logger.info("‚úÖ UserService.update_user_info: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.test_results['user_service'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ UserService: {e}")
            self.test_results['user_service'] = False
            return False
    
    def test_points_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–ª–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–ª–æ–≤...")
        try:
            from app.domain.services.gamification import points as points_service
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = points_service.get_user("999999999")
            if test_user:
                logger.info(f"‚úÖ PointsService.get_user: —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω)")
            else:
                logger.info("‚úÖ PointsService.get_user: —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            self.test_results['points_service'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PointsService: {e}")
            self.test_results['points_service'] = False
            return False
    
    def test_top_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–ø–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–ø–∞...")
        try:
            from app.domain.services.gamification import top as top_service
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞
            top_users = top_service.get_top_users(limit=5)
            logger.info(f"‚úÖ TopService.get_top_users: —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ {len(top_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            
            self.test_results['top_service'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ TopService: {e}")
            self.test_results['top_service'] = False
            return False
    
    def test_ai_services(self):
        """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç AI –º–æ–¥—É–ª–µ–π
            from app.infrastructure.ai.providers.yandex_gpt import generate_sisu_reply
            logger.info("‚úÖ YandexGPT: –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            from app.infrastructure.ai.providers.yandex_speechkit_tts import synthesize_sisu_voice
            logger.info("‚úÖ SpeechKit TTS: –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.test_results['ai_services'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            self.test_results['ai_services'] = False
            return False
    
    def test_middleware_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ middleware"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ middleware...")
        try:
            from app.presentation.bot.middlewares.subscription_check import SubscriptionCheckMiddleware
            from app.presentation.bot.middlewares.allowed_chats import AllowedChatsMiddleware
            from app.presentation.bot.middlewares.user_sync import UserSyncMiddleware
            from app.presentation.bot.middlewares.rate_limiter import RateLimitMiddleware
            
            logger.info("‚úÖ –í—Å–µ middleware: –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results['middleware_imports'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ middleware: {e}")
            self.test_results['middleware_imports'] = False
            return False
    
    def test_handler_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        try:
            from app.presentation.bot.handlers.start_handler import router as start_router
            from app.presentation.bot.handlers.checkin import router as checkin_router
            from app.presentation.bot.handlers.top_handler import router as top_router
            from app.presentation.bot.handlers.myrank import router as myrank_router
            from app.presentation.bot.handlers.donate import router as donate_router
            
            logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results['handler_imports'] = True
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            self.test_results['handler_imports'] = False
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ SisuDatuBot")
        logger.info("=" * 60)
        
        tests = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration),
            ("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", self.test_data_files),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", self.test_database_connection),
            ("–°—Ö–µ–º–∞ –ë–î", self.test_database_schema),
            ("UserService", self.test_user_service),
            ("PointsService", self.test_points_service),
            ("TopService", self.test_top_service),
            ("AI —Å–µ—Ä–≤–∏—Å—ã", self.test_ai_services),
            ("Middleware", self.test_middleware_imports),
            ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", self.test_handler_imports),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            try:
                if test_func():
                    passed += 1
                    logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 60)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name}: {status}")
        
        logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BusinessLogicTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main()) 