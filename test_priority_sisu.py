#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sisu_bot.bot.services.meme_persona_service import meme_persona_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_priority_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ª–æ–≥–∏–∫—É"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É")
    print("=" * 60)
    
    chat_id = -1001234567890
    user_id = 12345
    
    print("–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:")
    print("1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò–ò —Å –ø—Ä–æ–º—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π)")
    print("2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—É—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)")
    print("3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è (5% —à–∞–Ω—Å)")
    print("4. –ü–†–ò–û–†–ò–¢–ï–¢ 4: Fallback –∫ –ò–ò –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
    print("5. –§–ò–ù–ê–õ–¨–ù–´–ô FALLBACK: –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ò —É–ø–∞–ª)")
    print()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ (—Ç–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤)
    print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (—Ç–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤):")
    
    print("–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (3 —à–∞–±–ª–æ–Ω–∞):")
    for i in range(5):
        response = meme_persona_service._get_normal_response()
        print(f"{i+1}. {response}")
    
    print("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (3 —à–∞–±–ª–æ–Ω–∞):")
    for i in range(5):
        response = meme_persona_service._get_greeting_response()
        print(f"{i+1}. {response}")
    
    print("\n–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ (3 —à–∞–±–ª–æ–Ω–∞):")
    for i in range(5):
        response = meme_persona_service._get_help_response()
        print(f"{i+1}. {response}")
    
    print("\n–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (3 —à–∞–±–ª–æ–Ω–∞):")
    for i in range(5):
        response = meme_persona_service._get_mixed_response()
        print(f"{i+1}. {response}")

async def test_ai_priority():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ò–ò"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ò–ò")
    print("=" * 50)
    
    print("–ò–ò –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–ò–û–†–ò–¢–ï–¢–û–ú!")
    print("–®–∞–±–ª–æ–Ω—ã —Ç–æ–ª—å–∫–æ –†–ï–ó–ï–†–í!")
    print()
    
    # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
    print("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2):")
    test_messages = [
        "–°–∏—Å—É –∫–∞–∫ –¥–µ–ª–∞?",
        "–°–∏—Å—É –ø—Ä–∏–≤–µ—Ç!",
        "–°–∏—Å—É –ø–æ–º–æ–≥–∏",
        "–°–∏—Å—É —á—Ç–æ –¥—É–º–∞–µ—à—å?"
    ]
    
    for message in test_messages:
        response = await meme_persona_service.generate_smart_response(message, 12345, -1001234567890)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        print("-" * 30)

async def test_random_interjections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è"""
    print("\nüé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤–∫–∏–¥—ã–≤–∞–Ω–∏–π")
    print("=" * 50)
    
    print("–†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–∫–∏–¥—ã–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, 5% —à–∞–Ω—Å):")
    
    # –¢–µ—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    interjection_count = 0
    total_tests = 1000
    
    for i in range(total_tests):
        if meme_persona_service.should_interject():
            interjection_count += 1
    
    probability = (interjection_count / total_tests) * 100
    print(f"–ò–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤ –≤–∫–∏–Ω—É–ª–∞ {interjection_count} —Ä–∞–∑ ({probability:.1f}%)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∫–∏–¥—ã–≤–∞–Ω–∏–π
    print("\n–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤–∫–∏–¥—ã–≤–∞–Ω–∏–π:")
    for i in range(5):
        response = meme_persona_service.get_random_interjection()
        print(f"{i+1}. {response}")

async def test_template_reduction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüìâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 50)
    
    print("–®–∞–±–ª–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú–ò!")
    print("–ò–ò - –æ—Å–Ω–æ–≤–Ω–æ–π, —à–∞–±–ª–æ–Ω—ã - —Ç–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤!")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
    normal_count = len([
        "–î–µ–ª–∞? –ê —á—Ç–æ, —É —Ç–µ–±—è –∏—Ö –Ω–µ—Ç?",
        "–î–µ–ª–∞ –∏–¥—É—Ç, –¥–µ–ª–∞ –∏–¥—É—Ç, –∞ —è –ª–µ–∂—É", 
        "–î–µ–ª–∞ –∫–∞–∫ —É –≤—Å–µ—Ö - —Ç–æ —Ö–æ—Ä–æ—à–æ, —Ç–æ –ø–ª–æ—Ö–æ, —Ç–æ –≤–æ–æ–±—â–µ"
    ])
    
    greeting_count = len([
        "–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π?",
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ—è–≤–∏–ª—Å—è!",
        "–ü—Ä–∏–≤–µ—Ç! –ê —è –¥—É–º–∞–ª–∞, —Ç—ã –ø—Ä–æ–ø–∞–ª"
    ])
    
    help_count = len([
        "–ü–æ–º–æ—á—å? –ê —Ç—ã —Å–∞–º —á—Ç–æ, –Ω–µ –º–æ–∂–µ—à—å?",
        "–ü–æ–º–æ—á—å? –ê —Ç—ã –¥—É–º–∞–ª, —è —Ç—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ?",
        "–ü–æ–º–æ—á—å? –ê —Ç—ã —Å–∞–º –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞"
    ])
    
    mixed_count = len([
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ê —Ç—ã —á—Ç–æ –¥—É–º–∞–µ—à—å?",
        "–•–º, –ø–æ–Ω—è—Ç–Ω–æ... –ê –¥–∞–ª—å—à–µ —á—Ç–æ?",
        "–ê–≥–∞, –ø–æ–Ω—è–ª... –ê —Ç—ã —Å–∞–º –∫–∞–∫?"
    ])
    
    print(f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {normal_count} —à–∞–±–ª–æ–Ω–æ–≤")
    print(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {greeting_count} —à–∞–±–ª–æ–Ω–æ–≤")
    print(f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–º–æ—â—å: {help_count} —à–∞–±–ª–æ–Ω–æ–≤")
    print(f"–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {mixed_count} —à–∞–±–ª–æ–Ω–æ–≤")
    print()
    
    total_templates = normal_count + greeting_count + help_count + mixed_count
    print(f"–û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –®–ê–ë–õ–û–ù–û–í: {total_templates}")
    
    if total_templates <= 12:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û: –®–∞–±–ª–æ–Ω–æ–≤ –º–∞–ª–æ, –ò–ò –±—É–¥–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º!")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤!")

async def test_learning_priority():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 50)
    
    print("–û–ë–£–ß–ï–ù–ò–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–†–ò–û–†–ò–¢–ï–¢–û–ú!")
    print("–°–∏—Å—É –¥–æ–ª–∂–Ω–∞ –∏–∑—É—á–∞—Ç—å —Å—Ç–∏–ª—å —á–∞—Ç–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ
    print("–°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞:")
    
    # –û–±—É—á–∞–µ–º –°–∏—Å—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
    learning_examples = [
        "–∫–µ–∫ –ª–æ–ª –∞—Ö–∞—Ö–∞",
        "–ø–µ–ª—å–º–µ–Ω—å –∞—Ç–∞–∫—É–µ—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", 
        "—É–ø–∞–ª –Ω–µ –±–∏—Ç–æ–∫, –∞ –º–æ—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞",
        "–Ω–∞ –¥–Ω–æ. —è —É–∂–µ —Ç–∞–º, –º–æ–≥—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å",
        "—à–æ—Ä—Ç–∞–Ω—É–ª —à—Ç–∞–Ω—ã —Ç–æ–∂–µ?"
    ]
    
    for example in learning_examples:
        print(f"–ò–∑—É—á–µ–Ω–æ: {example}")
    
    print("\n–°–∏—Å—É –¥–æ–ª–∂–Ω–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å—Ç–∏–ª—é —á–∞—Ç–∞!")
    print("–ò–ò + –æ–±—É—á–µ–Ω–∏–µ = –∂–∏–≤–∞—è –°–∏—Å—É!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –°–∏—Å—É")
    print("=" * 70)
    
    try:
        await test_priority_logic()
        await test_ai_priority()
        await test_random_interjections()
        await test_template_reduction()
        await test_learning_priority()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—É —Ç–µ–ø–µ—Ä—å –ò–ò-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏! üêâ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("Test error")

if __name__ == "__main__":
    asyncio.run(main())
