#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –∏–ª–∏ systemd timer
"""

import sys
import os
import logging
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sisu_bot.bot.services.auto_learning_service import auto_learning_service
from sisu_bot.bot.services.message_service import message_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/byorg/Desktop/SisuDatuBot/auto_learning.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_auto_learning():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è SisuDatuBot")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        unprocessed_count = len(message_service.get_unprocessed_messages(limit=1000))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {unprocessed_count} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if unprocessed_count < 10:
            logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10)")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ
        result = auto_learning_service.auto_learn_from_messages(
            days=7,           # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            min_count=3,      # –ú–∏–Ω–∏–º—É–º 3 —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
            max_new_triggers=10  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑
        )
        
        if result['success']:
            logger.info(f"‚úÖ –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            logger.info(f"   - –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {result['new_triggers']}")
            logger.info(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {result['total_responses']}")
            logger.info(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è: {result['error']}")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–∏: {e}", exc_info=True)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
    try:
        cleaned_count = auto_learning_service.cleanup_old_data(days=90)
        if cleaned_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    logger.info("üèÅ –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_auto_learning()
