import os
import sys
import json
import sqlite3
import subprocess
from pathlib import Path
from typing import List

import requests
from dotenv import load_dotenv, find_dotenv


def header(title: str):
    print("\n" + "=" * 80)
    print(title)
    print("=" * 80)


def load_env():
    dotenv_path = find_dotenv(usecwd=False)
    load_dotenv(dotenv_path=dotenv_path, override=False)
    return dotenv_path


def check_env(required: List[str]):
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    missing = []
    for var in required:
        val = os.getenv(var)
        print(f"{var}={'***' if val else '‚Äî'}")
        if not val:
            missing.append(var)
    if missing:
        print(f"‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {', '.join(missing)}")
    else:
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")


def pip_check():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (pip check)")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "check"]) 
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: pip install -r requirements.txt")


def check_imports(mods: List[str]):
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π")
    for m in mods:
        try:
            __import__(m)
            print(f"‚úÖ {m}")
        except Exception as e:
            print(f"‚ùå {m}: {e}")


def check_telegram_api():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API (/getMe, /getWebhookInfo)")
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    try:
        r = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
        ok = r.status_code == 200 and r.json().get("ok")
        print(f"getMe: {'‚úÖ' if ok else '‚ùå'} {r.text[:200]}")
    except Exception as e:
        print(f"‚ùå getMe error: {e}")
    try:
        r = requests.get(f"https://api.telegram.org/bot{token}/getWebhookInfo", timeout=10)
        ok = r.status_code == 200
        print(f"getWebhookInfo: {'‚úÖ' if ok else '‚ùå'} {r.text[:200]}")
    except Exception as e:
        print(f"‚ùå getWebhookInfo error: {e}")


def check_config_and_data():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    try:
        from sisu_bot.core.config import config, PHRASES_PATH, TROLL_PATH, LEARNING_PATH, SISU_PERSONA_PATH, DB_PATH
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"DB_PATH: {DB_PATH}")
        for p in [PHRASES_PATH, TROLL_PATH, LEARNING_PATH, SISU_PERSONA_PATH]:
            exists = Path(p).exists()
            print(f"{p.name}: {'‚úÖ' if exists else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ({p})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")


def check_whitelist():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist —á–∞—Ç–æ–≤")
    p = Path("data/static/allowed_chats.json")
    if not p.exists():
        print("‚ö†Ô∏è allowed_chats.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    try:
        data = json.loads(p.read_text(encoding="utf-8"))
        wl = data.get("allowed_chats", [])
        print(f"allowed_chats: {wl}")
        print("‚úÖ whitelist –ø—Ä–æ—á–∏—Ç–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è whitelist: {e}")


def check_db():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    try:
        from sisu_bot.core.config import DB_PATH
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' LIMIT 5")
        rows = cur.fetchall()
        print(f"–¢–∞–±–ª–∏—Ü—ã: {rows}")
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")


def check_handlers_and_middlewares():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ –º–∏–¥–¥–ª–≤–∞—Ä–µ–π")
    root = Path("sisu_bot/bot")
    handlers_dir = root / "handlers"
    middlewares_dir = root / "middlewares"

    # –•–µ–Ω–¥–ª–µ—Ä—ã: –ø–µ—Ä–µ—á–∏—Å–ª–∏–º –º–æ–¥—É–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ router
    found = []
    if handlers_dir.exists():
        for f in handlers_dir.glob("*_handler.py"):
            mod = f"sisu_bot.bot.handlers.{f.stem}"
            try:
                m = __import__(mod, fromlist=["router"]) 
                has_router = hasattr(m, "router")
                found.append((f.name, "‚úÖ router" if has_router else "‚ö†Ô∏è –±–µ–∑ router"))
            except Exception as e:
                found.append((f.name, f"‚ùå import: {e}"))
    for name, status in found:
        print(f"{name}: {status}")

    # –ú–∏–¥–¥–ª–≤–∞—Ä—ã: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏–º
    if middlewares_dir.exists():
        mids = sorted(p.name for p in middlewares_dir.glob("*.py") if p.name != "__init__.py")
        print(f"middlewares: {mids}")
    else:
        print("middlewares: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def check_roles_and_ux():
    header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π, –∫–æ–º–∞–Ω–¥ –∏ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç")
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚è© –ü—Ä–æ–ø—É—Å–∫ (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)")
        return

    # getMyCommands
    try:
        r = requests.get(f"https://api.telegram.org/bot{token}/getMyCommands", timeout=10)
        if r.ok and r.json().get("ok"):
            cmds = [c.get("command") for c in r.json().get("result", [])]
            print(f"–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {cmds}")
        else:
            print(f"‚ö†Ô∏è getMyCommands: {r.text[:200]}")
    except Exception as e:
        print(f"‚ùå getMyCommands error: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ whitelisted —á–∞—Ç—É
    try:
        wl_path = Path("data/static/allowed_chats.json")
        chat_id = None
        if wl_path.exists():
            data = json.loads(wl_path.read_text(encoding="utf-8"))
            lst = data.get("allowed_chats", [])
            chat_id = lst[0] if lst else None
        if chat_id:
            r = requests.get(f"https://api.telegram.org/bot{token}/getChat", params={"chat_id": chat_id}, timeout=10)
            print(f"getChat({chat_id}): {'‚úÖ' if r.ok else '‚ö†Ô∏è'} {r.text[:120]}")
        else:
            print("‚ö†Ô∏è –í whitelist –Ω–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ getChat")
    except Exception as e:
        print(f"‚ùå getChat error: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    try:
        from sisu_bot.core.config import SUPERADMIN_IDS
        print(f"SUPERADMIN_IDS: {SUPERADMIN_IDS}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SUPERADMIN_IDS: {e}")


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n")
    env_path = load_env()
    print(f".env: {env_path or '–Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ find_dotenv'}")

    required_env = [
        "TELEGRAM_BOT_TOKEN",
        "YANDEX_SPEECHKIT_API_KEY",
        "YANDEX_SPEECHKIT_FOLDER_ID",
        "YANDEXGPT_API_KEY",
        "YANDEXGPT_FOLDER_ID",
        "SUPERADMIN_IDS",
    ]
    check_env(required_env)
    pip_check()
    # –ú–æ–¥—É–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è dotenv, –Ω–µ python-dotenv
    check_imports(["aiogram", "requests", "dotenv", "sisu_bot.core.config"])
    check_telegram_api()
    check_config_and_data()
    check_whitelist()
    check_db()
    check_handlers_and_middlewares()
    check_roles_and_ux()
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()


