from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json
from app.shared.config.settings import DB_PATH, Settings
from pathlib import Path

DATA_DIR = Settings().data_dir
if isinstance(DATA_DIR, str):
    DATA_DIR = Path(DATA_DIR)
from app.infrastructure.system.allowed_chats import list_allowed_chats, remove_allowed_chat, add_allowed_chat
from app.domain.services.gamification import points as points_service
from app.infrastructure.system.adminlog import get_admin_logs
from app.domain.services.triggers.stats import get_trigger_stats, suggest_new_triggers, auto_add_suggested_triggers
from app.domain.services.state import get_state, update_state, get_mood, set_mood
import logging
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
def get_user_model():
    from app.infrastructure.db.models import User
    return User
from app.shared.config.bot_config import SUPERADMIN_IDS, is_superadmin
from app.domain.services.motivation import add_motivation, send_voice_motivation, load_motivation_pool
from app.domain.services.excuse import add_excuse, add_voice_excuse, list_excuses, list_voice_excuses, remove_excuse, remove_voice_excuse
from app.infrastructure.ai.persona import add_name_joke, add_name_variant, list_name_jokes, list_name_variants, remove_name_joke, remove_name_variant, add_micro_legend, remove_micro_legend, list_micro_legends, add_easter_egg, remove_easter_egg, list_easter_eggs, add_magic_phrase, remove_magic_phrase, list_magic_phrases
from app.presentation.bot.handlers.message import SISU_PATTERN
import asyncio
from app.domain.services.command_menu import setup_command_menus

AI_DIALOG_ENABLED = False
PRIVATE_ENABLED = False

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

SUPERADMIN_COMMANDS = {
    '/ai_dialog_on': '–í–∫–ª—é—á–∏—Ç—å AI-–¥–∏–∞–ª–æ–≥',
    '/ai_dialog_off': '–í—ã–∫–ª—é—á–∏—Ç—å AI-–¥–∏–∞–ª–æ–≥',
    '/enable_private': '–í–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ',
    '/disable_private': '–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ',
    '/superadmin_help': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞',
    '/ban': '–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '/unban': '–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '/addadmin': '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞',
    '/removeadmin': '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞',
    '/sendto': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã',
    '/allow_chat': '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö',
    '/list_chats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤',
    '/disallow_chat': '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö',
    '/stats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞',
    '/adminlog': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤',
    '/trigger_stats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞',
    '/suggest_triggers': '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    '/auto_add_triggers': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    '/remove_trigger': '–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä',
    '/get_mood': '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É',
    '/set_mood': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É',
    '/voice_motivation': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ—Ç–∏–≤–∞—à–∫—É –≤ —á–∞—Ç',
    '/send_motivation': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—à–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç (–∏–∑ –ª–∏—á–∫–∏)',
    '–°–∏—Å—É, –∑–∞–ø–æ–º–Ω–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –æ–∑–≤—É—á–∫–∏: "—Ç–µ–∫—Å—Ç"': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ—Ç–∏–≤–∞—à–∫—É (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)',
    '/add_excuse': '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É',
    '/add_voice_excuse': '–î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É',
    '/add_name_joke': '–î–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É –ø—Ä–æ –∏–º—è',
    '/add_name_variant': '–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è',
    '/list_excuses': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–º–∞–∑–æ–∫',
    '/list_voice_excuses': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–º–∞–∑–æ–∫',
    '/list_name_jokes': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à—É—Ç–æ–∫ –ø—Ä–æ –∏–º—è',
    '/list_name_variants': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏—è',
    '/remove_excuse': '–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É',
    '/remove_voice_excuse': '–£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É',
    '/remove_name_joke': '–£–¥–∞–ª–∏—Ç—å —à—É—Ç–∫—É –ø—Ä–æ –∏–º—è',
    '/remove_name_variant': '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è',
    '/add_micro_legend': '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–π–±–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é',
    '/remove_micro_legend': '–£–¥–∞–ª–∏—Ç—å –≤–∞–π–±–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é',
    '/list_micro_legends': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–π–±–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏',
    '/add_easter_egg': '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Ö–∞–ª–∫—É',
    '/remove_easter_egg': '–£–¥–∞–ª–∏—Ç—å –ø–∞—Å—Ö–∞–ª–∫—É',
    '/list_easter_eggs': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Å—Ö–∞–ª–∫–∏',
    '/add_magic_phrase': '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É',
    '/remove_magic_phrase': '–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É',
    '/list_magic_phrases': '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã'
}

router = Router()

BANS_PATH = DATA_DIR / 'bans.json'
ADMINS_PATH = DATA_DIR / 'admins.json'

def load_bans():
    if BANS_PATH.exists():
        with open(BANS_PATH, encoding='utf-8') as f:
            return json.load(f)["banned"]
    return []

def save_bans(banned):
    with open(BANS_PATH, 'w', encoding='utf-8') as f:
        json.dump({"banned": banned}, f, ensure_ascii=False, indent=2)

def load_admins():
    if ADMINS_PATH.exists():
        with open(ADMINS_PATH, encoding='utf-8') as f:
            return json.load(f)["admins"]
    return []

def save_admins(admins):
    with open(ADMINS_PATH, 'w', encoding='utf-8') as f:
        json.dump({"admins": admins}, f, ensure_ascii=False, indent=2)

def clean_admins():
    admins = load_admins()
    cleaned = [a for a in admins if str(a).isdigit()]
    if cleaned != admins:
        save_admins(cleaned)
    return cleaned

async def notify_admins(text: str, bot):
    for admin_id in SUPERADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logging.error(f"Error notifying admin {admin_id}: {e}")

class SuperAdminStates(StatesGroup):
    waiting_sendto = State()

@router.message(Command("superadmin_help"))
async def superadmin_help(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    text = "üëë –®–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ SisuDatuBot\n\n"
    text += "/addpoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
    text += "/removepoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã\n"
    text += "/setstreak [user_id|@username] [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é\n"
    text += "/broadcast [—Ç–µ–∫—Å—Ç] ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n"
    text += "/challenge [—Ç–µ–∫—Å—Ç] ‚Äî —á–µ–ª–ª–µ–Ω–¥–∂ –≤—Å–µ–º\n"
    text += "/list_games ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä\n"
    text += "/games_admin ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏ (bulk, delete, stats)\n"
    text += "/market ‚Äî —Ä—ã–Ω–æ–∫ —Ä–∞–Ω–≥–æ–≤ –∏ NFT\n"
    text += "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
    text += "/set_required_subs [—Å—Å—ã–ª–∫–∏] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
    text += "/check_subs ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    text += "/ref ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    text += "/allow_chat ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç–µ\n"
    text += "/disallow_chat ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —á–∞—Ç–µ\n"
    text += "/list_chats ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
    text += "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
    text += "/adminlog ‚Äî –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤\n"
    text += "/addadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "/removeadmin ‚Äî —É–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
    text += "/auto_add_triggers ‚Äî –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
    text += "/remove_trigger ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä\n"
    text += "/get_mood ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É\n"
    text += "/set_mood ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É\n"
    text += "/add_excuse [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É\n"
    text += "/add_voice_excuse [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É\n"
    text += "/add_name_joke [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É –ø—Ä–æ –∏–º—è\n"
    text += "/add_name_variant [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
    text += "/list_excuses ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–º–∞–∑–æ–∫\n"
    text += "/list_voice_excuses ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–º–∞–∑–æ–∫\n"
    text += "/list_name_jokes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à—É—Ç–æ–∫ –ø—Ä–æ –∏–º—è\n"
    text += "/list_name_variants ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
    text += "/remove_excuse [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É\n"
    text += "/remove_voice_excuse [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –æ—Ç–º–∞–∑–∫—É\n"
    text += "/remove_name_joke [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å —à—É—Ç–∫—É –ø—Ä–æ –∏–º—è\n"
    text += "/remove_name_variant [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
    text += "/add_micro_legend [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–π–±–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é\n"
    text += "/remove_micro_legend [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –≤–∞–π–±–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é\n"
    text += "/list_micro_legends ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–π–±–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
    text += "/add_easter_egg [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Ö–∞–ª–∫—É\n"
    text += "/remove_easter_egg [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Å—Ö–∞–ª–∫—É\n"
    text += "/list_easter_eggs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Å—Ö–∞–ª–∫–∏\n"
    text += "/add_magic_phrase [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É\n"
    text += "/remove_magic_phrase [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É\n"
    text += "/list_magic_phrases ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã\n"
    await msg.answer(text)

@router.message(Command("ai_dialog_on"))
async def ai_dialog_on(msg: Message):
    logging.info(f"Command /ai_dialog_on from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(ai_dialog_enabled=True)
    await msg.answer("AI-–¥–∏–∞–ª–æ–≥ –≤–∫–ª—é—á—ë–Ω!")

@router.message(Command("ai_dialog_off"))
async def ai_dialog_off(msg: Message):
    logging.info(f"Command /ai_dialog_off from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(ai_dialog_enabled=False)
    await msg.answer("AI-–¥–∏–∞–ª–æ–≥ –≤—ã–∫–ª—é—á–µ–Ω!")

@router.message(Command("enable_private"))
async def enable_private(msg: Message):
    logging.info(f"Command /enable_private from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(private_enabled=True)
    await msg.answer("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ –≤–∫–ª—é—á–µ–Ω–∞!")

@router.message(Command("disable_private"))
async def disable_private(msg: Message):
    logging.info(f"Command /disable_private from user {msg.from_user.id} in chat {msg.chat.id}")
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    update_state(private_enabled=False)
    await msg.answer("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

@router.message(Command("ban"))
async def ban_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /ban –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /ban [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    banned = load_bans()
    if user_id in banned:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –±–∞–Ω–µ.")
        return
    banned.append(user_id)
    save_bans(banned)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")

@router.message(Command("unban"))
async def unban_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /unban –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /unban [user_id|@username]")
        return
    user_id = args[1].lstrip('@')
    banned = load_bans()
    if user_id not in banned:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ –±–∞–Ω–µ.")
        return
    banned.remove(user_id)
    save_bans(banned)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

@router.message(Command("addadmin"))
async def addadmin_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /addadmin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addadmin [user_id]")
        return
    user_id = args[1].lstrip('@')
    if not user_id.isdigit():
        await msg.answer("–î–æ–±–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É user_id!")
        return
    admins = clean_admins()
    if user_id in admins:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–¥–º–∏–Ω.")
        return
    admins.append(user_id)
    save_admins(admins)
    await setup_command_menus(msg.bot)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã –∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

@router.message(Command("removeadmin"))
async def removeadmin_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /removeadmin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /removeadmin [user_id]")
        return
    user_id = args[1].lstrip('@')
    if not user_id.isdigit():
        await msg.answer("–£–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É user_id!")
        return
    admins = clean_admins()
    if user_id not in admins:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω.")
        return
    admins.remove(user_id)
    save_admins(admins)
    await setup_command_menus(msg.bot)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

@router.message(Command("sendto"))
async def sendto_start(msg: Message, state: FSMContext):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /sendto –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /sendto [chat_id1] [chat_id2] ... (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
        return
    chat_ids = args[1:]
    await state.update_data(sendto_chat_ids=chat_ids)
    await msg.answer(f"–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Å—ã–ª–∫—É), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {', '.join(chat_ids)}.")
    await state.set_state(SuperAdminStates.waiting_sendto)

@router.message(StateFilter(SuperAdminStates.waiting_sendto))
async def sendto_send(msg: Message, state: FSMContext):
    data = await state.get_data()
    chat_ids = data.get("sendto_chat_ids", [])
    await state.clear()
    count = 0
    for chat_id in chat_ids:
        try:
            if msg.text:
                await msg.bot.send_message(chat_id, msg.text)
            elif msg.photo:
                await msg.bot.send_photo(chat_id, msg.photo[-1].file_id, caption=msg.caption or "")
            elif msg.video:
                await msg.bot.send_video(chat_id, msg.video[-1].file_id, caption=msg.caption or "")
            elif msg.document:
                await msg.bot.send_document(chat_id, msg.document.file_id, caption=msg.caption or "")
        except Exception as e:
            await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {e}")
            continue
        count += 1
    await msg.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

@router.message(Command("allow_chat"))
async def allow_chat_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /allow_chat –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /allow_chat [chat_id]")
        return
    chat_id = args[1]
    add_allowed_chat(chat_id)
    await msg.answer(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")

@router.message(Command("list_chats"))
async def list_chats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    chats = list_allowed_chats()
    if not chats:
        await msg.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        text = "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n" + "\n".join(chats)
        await msg.answer(text)

@router.message(Command("disallow_chat"))
async def disallow_chat_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await notify_admins(f"‚ùóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /disallow_chat –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} (@{msg.from_user.username}) –≤ —á–∞—Ç–µ {msg.chat.id}", msg.bot)
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /disallow_chat [chat_id]")
        return
    chat_id = args[1]
    remove_allowed_chat(chat_id)
    await msg.answer(f"‚úÖ –ß–∞—Ç {chat_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")

@router.message(Command("stats"))
async def stats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    session = Session()
    total_users = session.query(get_user_model()).count()
    total_points = session.query(get_user_model()).with_entities(func.sum(get_user_model().points)).scalar() or 0
    total_messages = session.query(get_user_model()).with_entities(func.sum(get_user_model().message_count)).scalar() or 0
    session.close()
    text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üíé –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points}\n"
    text += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
    await msg.answer(text)

@router.message(Command("adminlog"))
async def adminlog_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    logs = get_admin_logs()
    if not logs:
        await msg.answer("–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
    else:
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤:\n\n"
        for log in logs:
            # log ‚Äî —ç—Ç–æ dict
            t = f"üïí <b>{log.get('time','')}</b>\n"
            t += f"üë§ <b>{log.get('username','-')}</b> (<code>{log.get('user_id','')}</code>)\n"
            t += f"üí¨ <b>{log.get('command','')}</b>\n"
            params = log.get('params')
            if params:
                t += f"üì¶ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b> <code>{params}</code>\n"
            result = log.get('result')
            if result:
                t += f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>{result}</code>\n"
            t += "\n"
            text += t
        await msg.answer(text, parse_mode="HTML")

@router.message(Command("trigger_stats"))
async def trigger_stats_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    stats = get_trigger_stats()
    if not stats:
        await msg.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
    else:
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
        for trigger, count in stats.items():
            text += f"{trigger}: {count}\n"
        await msg.answer(text)

@router.message(Command("suggest_triggers"))
async def suggest_triggers_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    triggers = suggest_new_triggers()
    if not triggers:
        await msg.answer("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.")
    else:
        text = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n"
        for trigger in triggers:
            text += f"{trigger}\n"
        await msg.answer(text)

@router.message(Command("auto_add_triggers"))
async def auto_add_triggers_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    added = auto_add_suggested_triggers()
    if not added:
        await msg.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    else:
        text = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n"
        for trigger in added:
            text += f"{trigger}\n"
        await msg.answer(text)

@router.message(Command("remove_trigger"))
async def remove_trigger_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remove_trigger [trigger]")
        return
    trigger = " ".join(args[1:])
    # TODO: Implement trigger removal
    await msg.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É–¥–∞–ª—ë–Ω.")

@router.message(Command("get_mood"))
async def get_mood_handler(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    mood = get_mood()
    await msg.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É: {mood}")

@router.message(Command("set_mood"))
async def set_mood_handler(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /set_mood <mood>")
        return
    new_mood = args[1].strip()
    set_mood(new_mood)
    await msg.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–∏—Å—É –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_mood}")

@router.message(Command("voice_motivation"))
async def cmd_voice_motivation(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    await send_voice_motivation(msg.bot, msg.chat.id)

@router.message(Command("send_motivation"))
async def send_motivation_to_chat(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /send_motivation <chat_id> –∏–ª–∏ /send_motivation <all>")
        return
    target_id_raw = args[1].strip()
    
    if target_id_raw.lower() == "all":
        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —á–∞—Ç–∞–º
        allowed_chats = list_allowed_chats()
        for chat_id in allowed_chats:
            try:
                await send_voice_motivation(msg.bot, int(chat_id))
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        await msg.answer("–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã!")
    else:
        try:
            target_chat_id = int(target_id_raw)
            await send_voice_motivation(msg.bot, target_chat_id)
            await msg.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {target_chat_id}!")
        except ValueError:
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞.")
        except Exception as e:
            await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")

@router.message(lambda msg: msg.chat.type == 'private' and SISU_PATTERN.match(msg.text or "") and "–∑–∞–ø–æ–º–Ω–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –æ–∑–≤—É—á–∫–∏" in (msg.text or "").lower())
async def superadmin_add_motivation_tts(msg: Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    text_to_add = msg.text.lower().replace("—Å–∏—Å—É, –∑–∞–ø–æ–º–Ω–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –æ–∑–≤—É—á–∫–∏:", "").strip().strip('"')
    if not text_to_add:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")
        return

    if add_motivation(text_to_add):
        await msg.answer("–ó–∞–ø–æ–º–Ω–∏–ª–∞! –¢–µ–ø–µ—Ä—å –±—É–¥—É –∏–Ω–æ–≥–¥–∞ –æ–∑–≤—É—á–∏–≤–∞—Ç—å —ç—Ç—É –º–æ—Ç–∏–≤–∞—Ü–∏—é!")
    else:
        await msg.answer("–û–π, —è —É–∂–µ –∑–Ω–∞—é —ç—Ç—É –º–æ—Ç–∏–≤–∞—Ü–∏—é! ü§î")

@router.message(Command("add_excuse"))
async def superadmin_add_excuse(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –æ—Ç–º–∞–∑–∫–∏: /add_excuse [—Ç–µ–∫—Å—Ç]")
        return
    if add_excuse(text):
        await msg.answer("–û—Ç–º–∞–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è –æ—Ç–º–∞–∑–∫–∞ —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("add_voice_excuse"))
async def superadmin_add_voice_excuse(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–º–∞–∑–∫–∏: /add_voice_excuse [—Ç–µ–∫—Å—Ç]")
        return
    if add_voice_excuse(text):
        await msg.answer("–ì–æ–ª–æ—Å–æ–≤–∞—è –æ—Ç–º–∞–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –æ—Ç–º–∞–∑–∫–∞ —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("add_name_joke"))
async def superadmin_add_name_joke(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if "{name}" not in text:
        await msg.answer("–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {name}!")
        return
    if add_name_joke(text):
        await msg.answer("–®—É—Ç–∫–∞ –ø—Ä–æ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è —à—É—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("add_name_variant"))
async def superadmin_add_name_variant(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if "{name}" not in text:
        await msg.answer("–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {name}!")
        return
    if add_name_variant(text):
        await msg.answer("–í–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await msg.answer("–¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("list_excuses"))
async def superadmin_list_excuses(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    excuses = list_excuses()
    await msg.answer("–¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–º–∞–∑–∫–∏:\n" + "\n".join(excuses))

@router.message(Command("list_voice_excuses"))
async def superadmin_list_voice_excuses(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    excuses = list_voice_excuses()
    await msg.answer("–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–º–∞–∑–∫–∏:\n" + "\n".join(excuses))

@router.message(Command("list_name_jokes"))
async def superadmin_list_name_jokes(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    jokes = list_name_jokes()
    await msg.answer("–®—É—Ç–∫–∏ –ø—Ä–æ –∏–º—è:\n" + "\n".join(jokes))

@router.message(Command("list_name_variants"))
async def superadmin_list_name_variants(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    variants = list_name_variants()
    await msg.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏—è:\n" + "\n".join(variants))

@router.message(Command("remove_excuse"))
async def superadmin_remove_excuse(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –æ—Ç–º–∞–∑–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_excuse [—Ç–µ–∫—Å—Ç]")
        return
    if remove_excuse(text):
        await msg.answer("–û—Ç–º–∞–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–æ–π –æ—Ç–º–∞–∑–∫–∏ –Ω–µ—Ç!")

@router.message(Command("remove_voice_excuse"))
async def superadmin_remove_voice_excuse(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–º–∞–∑–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_voice_excuse [—Ç–µ–∫—Å—Ç]")
        return
    if remove_voice_excuse(text):
        await msg.answer("–ì–æ–ª–æ—Å–æ–≤–∞—è –æ—Ç–º–∞–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–º–∞–∑–∫–∏ –Ω–µ—Ç!")

@router.message(Command("remove_name_joke"))
async def superadmin_remove_name_joke(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç —à—É—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_name_joke [—Ç–µ–∫—Å—Ç]")
        return
    if remove_name_joke(text):
        await msg.answer("–®—É—Ç–∫–∞ –ø—Ä–æ –∏–º—è —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–æ–π —à—É—Ç–∫–∏ –Ω–µ—Ç!")

@router.message(Command("remove_name_variant"))
async def superadmin_remove_name_variant(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_name_variant [—Ç–µ–∫—Å—Ç]")
        return
    if remove_name_variant(text):
        await msg.answer("–í–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω!")
    else:
        await msg.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç!")

@router.message(Command("add_micro_legend"))
async def superadmin_add_micro_legend(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏: /add_micro_legend [—Ç–µ–∫—Å—Ç]")
        return
    if add_micro_legend(text):
        await msg.answer("–í–∞–π–±–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("remove_micro_legend"))
async def superadmin_remove_micro_legend(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_micro_legend [—Ç–µ–∫—Å—Ç]")
        return
    if remove_micro_legend(text):
        await msg.answer("–í–∞–π–±–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç!")

@router.message(Command("list_micro_legends"))
async def superadmin_list_micro_legends(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    legends = list_micro_legends()
    await msg.answer("–í–∞–π–±–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏:\n" + "\n".join(legends))

@router.message(Command("add_easter_egg"))
async def superadmin_add_easter_egg(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–∞—Å—Ö–∞–ª–∫–∏: /add_easter_egg [—Ç–µ–∫—Å—Ç]")
        return
    if add_easter_egg(text):
        await msg.answer("–ü–∞—Å—Ö–∞–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è –ø–∞—Å—Ö–∞–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("remove_easter_egg"))
async def superadmin_remove_easter_egg(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–∞—Å—Ö–∞–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_easter_egg [—Ç–µ–∫—Å—Ç]")
        return
    if remove_easter_egg(text):
        await msg.answer("–ü–∞—Å—Ö–∞–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–æ–π –ø–∞—Å—Ö–∞–ª–∫–∏ –Ω–µ—Ç!")

@router.message(Command("list_easter_eggs"))
async def superadmin_list_easter_eggs(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    eggs = list_easter_eggs()
    await msg.answer("–ü–∞—Å—Ö–∞–ª–∫–∏:\n" + "\n".join(eggs))

@router.message(Command("add_magic_phrase"))
async def superadmin_add_magic_phrase(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã: /add_magic_phrase [—Ç–µ–∫—Å—Ç]")
        return
    if add_magic_phrase(text):
        await msg.answer("–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await msg.answer("–¢–∞–∫–∞—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ —É–∂–µ –µ—Å—Ç—å!")

@router.message(Command("remove_magic_phrase"))
async def superadmin_remove_magic_phrase(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    text = msg.text.split(maxsplit=1)[1] if len(msg.text.split()) > 1 else ""
    if not text:
        await msg.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_magic_phrase [—Ç–µ–∫—Å—Ç]")
        return
    if remove_magic_phrase(text):
        await msg.answer(f"–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ \'{text}\' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await msg.answer(f"–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ \'{text}\' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.message(Command("list_magic_phrases"))
async def superadmin_list_magic_phrases(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        return
    phrases = list_magic_phrases()
    await msg.answer("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã:\n" + "\n".join(phrases))

@router.message(Command("list_admins"))
async def list_admins_handler(msg: Message):
    if not is_superadmin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("–ù–µ—Ç –ø—Ä–∞–≤!")
        return
    admins = clean_admins()
    if not admins:
        await msg.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
    else:
        text = "üëÆ‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([str(a) for a in admins])
        await msg.answer(text) 