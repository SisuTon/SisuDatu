"""
AI Handler - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏.
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AI-—Ñ—É–Ω–∫—Ü–∏–π.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import Dict, Any
import random


router = Router()


@router.message(Command("ai"))
async def ai_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai."""
    ai_responses = [
        "ü§ñ –Ø –¥—É–º–∞—é –æ–± —ç—Ç–æ–º...",
        "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
        "üí≠ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!",
        "ü§î –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ...",
        "üéØ –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º..."
    ]
    
    response = random.choice(ai_responses)
    await message.answer(response)


@router.message(Command("chat"))
async def chat_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI."""
    if not message.text or len(message.text.split()) < 2:
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /chat")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    user_text = " ".join(message.text.split()[1:])
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI-–æ—Ç–≤–µ—Ç–∞
    ai_response = f"ü§ñ –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_text}'\n\n–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI-–æ—Ç–≤–µ—Ç."
    
    await message.answer(ai_response)


@router.message(Command("motivation"))
async def motivation_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /motivation."""
    motivational_phrases = [
        "üåü –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "üöÄ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
        "üí™ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å–æ –≤—Å–µ–º!",
        "üéØ –í–µ—Ä—å –≤ —Å–µ–±—è!",
        "üåà –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ü–µ–ª—è–º!",
        "üî• –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
        "‚≠ê –ù–µ —Å–¥–∞–≤–∞–π—Å—è!",
        "üéâ –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
        "üèÜ –£—Å–ø–µ—Ö –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏!",
        "üíé –¢—ã –¥–µ–ª–∞–µ—à—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É!"
    ]
    
    response = random.choice(motivational_phrases)
    await message.answer(response)


@router.callback_query(F.data.startswith("ai_"))
async def ai_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ AI."""
    action = callback.data.split("_")[1]
    
    if action == "chat":
        await callback.message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI")
    elif action == "motivation":
        await motivation_handler(callback.message)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ AI-–¥–µ–π—Å—Ç–≤–∏–µ")
    
    await callback.answer()


@router.message()
async def general_ai_handler(message: Message):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è AI
    ai_keywords = ["–±–æ—Ç", "ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ø–æ–º–æ–≥–∏", "—Å–æ–≤–µ—Ç"]
    
    if any(keyword in message.text.lower() for keyword in ai_keywords):
        await message.answer("ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å AI. –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.") 