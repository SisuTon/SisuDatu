from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, InputMediaDocument
from aiogram.filters import Command
from app.shared.config.bot_config import ADMIN_IDS
from app.shared.config.settings import DONATION_TIERS
from app.domain.services.gamification import points as points_service
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import logging

router = Router()

# TON –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
TON_WALLET = "UQDpKfZQy_gFnsZxwE2A6FeTQUXimR9VWjnd1C_8R5Cn0hnv"

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
SUPPORTER_ANNOUNCE_CHAT_ID = -1002565290281  # –ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–æ–≤: user_id -> (message_id, chat_id)
pending_donations = {}

BOT_USERNAME = "SisuDatuBot"  # –£–∫–∞–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π

class DonateStates(StatesGroup):
    waiting_proof = State()

def get_donate_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π TON deeplink –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    buttons = []
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–Ω–∞—Ç–∞
    for tier_code, tier_info in DONATION_TIERS.items():
        amount_nano = str(int(tier_info["min_amount_ton"] * 1_000_000_000))
        url = f"ton://transfer/{TON_WALLET}?amount={amount_nano}"
        buttons.append(InlineKeyboardButton(
            text=f"üíé {tier_info['min_amount_ton']} TON - {tier_info['title']}",
            url=url
        ))
    
    # –ö–Ω–æ–ø–∫–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    buttons.append(InlineKeyboardButton(
        text="üíé –î—Ä—É–≥–∞—è —Å—É–º–º–∞",
        url=f"ton://transfer/{TON_WALLET}"
    ))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    copy_button = InlineKeyboardButton(
        text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å TON-–∫–æ—à–µ–ª–µ–∫",
        callback_data="copy_ton_wallet"
    )
    # –ö–Ω–æ–ø–∫–∞ '–Ø –∑–∞–¥–æ–Ω–∞—Ç–∏–ª!'
    confirm_button = InlineKeyboardButton(
        text="‚úÖ –Ø –∑–∞–¥–æ–Ω–∞—Ç–∏–ª!",
        callback_data="donate_confirm"
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —É—Ä–æ–≤–Ω–∏ –ø–æ 1 –≤ —Ä—è–¥, –∑–∞—Ç–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞, –∑–∞—Ç–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∑–∞—Ç–µ–º '–Ø –∑–∞–¥–æ–Ω–∞—Ç–∏–ª!'
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [btn] for btn in buttons
        ] + [[copy_button], [confirm_button]]
    )
    return keyboard

@router.callback_query(lambda c: c.data == "copy_ton_wallet")
async def copy_wallet_callback(call):
    await call.answer("TON-–∫–æ—à–µ–ª–µ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    await call.message.answer(f"TON-–∫–æ—à–µ–ª–µ–∫ –¥–ª—è –¥–æ–Ω–∞—Ç–∞: <code>{TON_WALLET}</code>", parse_mode="HTML")

@router.callback_query(lambda c: c.data == "donate_confirm")
async def donate_confirm_callback(call, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ TON —Å—é–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å Supporter!"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(user_id_awaiting_proof=call.from_user.id)
    await state.set_state(DonateStates.waiting_proof)

@router.message(Command("donate"))
async def donate_handler(msg: Message):
    if msg.chat.type in ("group", "supergroup"):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üíé –î–æ–Ω–∞—Ç–∏—Ç—å –≤ –ª–∏—á–∫–µ –±–æ—Ç—É",
                    url=f"https://t.me/{BOT_USERNAME}?start=donate"
                )]
            ]
        )
        await msg.answer(
            "üíé <b>–°–¥–µ–ª–∞–π Sisu Datu Bot –∫—Ä—É—á–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç!</b>\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –≤ –ª–∏—á–∫–µ!\n\n"
            "<i>–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–æ–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º!</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    keyboard = get_donate_keyboard()
    benefits_text = (
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "<b>üî• –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
        "ü•â <b>Bronze</b> ‚Äî 1 TON\n"
        "–¢—ã –≤ –∫–ª—É–±–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö! –ü–æ–ª—É—á–∞–µ—à—å –º–∞–≥–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫ –∏ +1000 –±–∞–ª–ª–æ–≤. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—å –∑–∞–≤–∏–¥—É—é—Ç!\n\n"
        "ü•à <b>Silver</b> ‚Äî 5 TON\n"
        "–°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –±–ª–∏–∂–µ –∫ —Å–µ—Ä–¥—Ü—É –¥—Ä–∞–∫–æ–Ω–∞! –ï—â—ë –±–æ–ª—å—à–µ –º–∞–≥–∏–∏ –∏ +3000 –±–∞–ª–ª–æ–≤.\n\n"
        "ü•á <b>Gold</b> ‚Äî 10 TON\n"
        "–¢—ã ‚Äî –ª–µ–≥–µ–Ω–¥–∞! –¢–≤–æ–π –Ω–∏–∫ —Å–∏—è–µ—Ç –≤ —Ç–æ–ø–µ, +7000 –±–∞–ª–ª–æ–≤ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –≤—Å–µ–π –¥—Ä–∞–∫–æ–Ω—å–µ–π –±—Ä–∞—Ç–∏–∏.\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )
    await msg.answer(
        "üíé <b>–°–¥–µ–ª–∞–π Sisu Datu Bot –∫—Ä—É—á–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç!</b>\n\n"
        "üîó TON-–∫–æ—à–µ–ª–µ–∫:\n"
        f"<code>{TON_WALLET}</code>\n\n"
        "üì± <i>–î–æ–Ω–∞—Ç—å —É–¥–æ–±–Ω–æ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π TON-–∫–æ—à–µ–ª–µ–∫!</i>\n\n"
        f"{benefits_text}\n\n"
        "üêâ –ü–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞ —Ç—ã –ø–æ—è–≤–∏—à—å—Å—è –≤ —Ç–æ–ø–µ –∫–∞–∫ <b>–î–æ–Ω–∞—Ç–µ—Ä</b> (–í–æ–∏–Ω –¥—Ä–∞–∫–æ–Ω–∞)!\n\n"
        "üëá –ñ–º–∏ <b>–Ø –∑–∞–¥–æ–Ω–∞—Ç–∏–ª!</b> –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(DonateStates.waiting_proof)
async def handle_donate_proof(msg: Message, state: FSMContext):
    data = await state.get_data()
    user_id_awaiting_proof = data.get("user_id_awaiting_proof")
    if not user_id_awaiting_proof:
        logging.error(f"handle_donate_proof: No user_id_awaiting_proof in state for {msg.from_user.id}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–Ω–∞—Ç–∞ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É(–∞–º) —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–æ–Ω–∞—Ç–∞
    keyboard_buttons = []
    for tier_code, tier_info in DONATION_TIERS.items():
        keyboard_buttons.append(InlineKeyboardButton(
            text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {tier_info['title']}",
            callback_data=f"approve_donate_{user_id_awaiting_proof}_{tier_code}"
        ))
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 2
    tier_keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons[i:i + 2] for i in range(0, len(keyboard_buttons), 2)])

    for admin_id in ADMIN_IDS:
        caption_text = f"–î–æ–Ω–∞—Ç –æ—Ç @{msg.from_user.username or msg.from_user.id}\nID: {user_id_awaiting_proof}\n\n–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: [–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥–º–∏–Ω—É]"
        if msg.photo:
            await msg.bot.send_photo(admin_id, msg.photo[-1].file_id, caption=caption_text,
                                     reply_markup=tier_keyboard)
        elif msg.document:
            await msg.bot.send_document(admin_id, msg.document.file_id, caption=caption_text,
                                        reply_markup=tier_keyboard)
        else:
            await msg.bot.send_message(admin_id, f"{caption_text}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}",
                                      reply_markup=tier_keyboard)
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Supporter.")
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("approve_donate_"))
async def approve_donate_tier_callback(call: CallbackQuery):
    parts = call.data.split("_")
    user_id = int(parts[2])
    tier_code = parts[3]

    if tier_code not in DONATION_TIERS:
        logging.error(f"approve_donate_tier_callback: Invalid tier_code {tier_code}")
        await call.answer("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–Ω–∞—Ç–∞.", show_alert=True)
        return

    tier_info = DONATION_TIERS[tier_code]
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –¥–æ–Ω–∞—Ç
    fixed_points = {"bronze": 1000, "silver": 3000, "gold": 7000}.get(tier_code, 1000)
    duration_days = tier_info["duration_days"]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Supporter –∏ –±–∞–ª–ª—ã
    session = points_service.Session() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –∏–∑ points_service –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    user = session.query(points_service.User).filter(points_service.User.id == user_id).first()

    if not user:
        user = points_service.User(id=user_id)
        session.add(user)

    user.is_supporter = True
    user.supporter_tier = tier_code
    user.supporter_until = datetime.utcnow() + timedelta(days=duration_days)
    # –ù–∞—á–∏—Å–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã
    points_service.add_points(user_id, fixed_points)
    # –í–∞–∂–Ω–æ: ChatPoints –±–∞–ª–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –¥–æ–Ω–∞—Ç–∞, —ç—Ç–æ –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
    supporter_until_str = user.supporter_until.strftime('%d.%m.%Y')
    username = user.username
    name = username and f"@{username}" or f"ID {user_id}"
    
    session.commit()
    session.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await call.bot.send_message(user_id, 
            f"üéâ –¢–≤–æ–π –¥–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"\
            f"–¢—ã –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å <b>{tier_info['title']}</b> –¥–æ {supporter_until_str}!\n"\
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {fixed_points} –±–∞–ª–ª–æ–≤.\n"\
            f"<b>–ü–ª—é—à–∫–∏:</b> {', '.join(tier_info['benefits'])}"
            , parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞: {e}", exc_info=True)

    # –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        await call.bot.send_message(
            SUPPORTER_ANNOUNCE_CHAT_ID,
            f"üéâ {name} –ø–æ–¥–¥–µ—Ä–∂–∞–ª –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç–∞–ª <b>{tier_info['title']}</b>!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ Sisu Datu Bot! üêâüíé",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ: {e}", exc_info=True)

    await call.answer(f"–î–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è {user_id} –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {tier_info['title']}!", show_alert=True) 