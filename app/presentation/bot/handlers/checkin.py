import json
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.domain.services.gamification import points as points_service
from app.shared.config.settings import DB_PATH, Settings
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
def get_user_model():
    from app.infrastructure.db.models import User
    return User
from pathlib import Path

router = Router()

FIRST_CHECKIN_POINTS = 50
REGULAR_CHECKIN_POINTS = 10
DATA_DIR = Settings().data_dir
if isinstance(DATA_DIR, str):
    DATA_DIR = Path(DATA_DIR)
PHRASES_PATH = DATA_DIR / 'phrases.json'
with open(PHRASES_PATH, encoding='utf-8') as f:
    PHRASES = json.load(f)

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

async def check_and_activate_referral(user_id: int, bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    """
    with Session() as session:
        user = session.query(get_user_model()).filter(get_user_model().id == user_id).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª
        if not user or not user.pending_referral:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if (user.message_count >= 5 and  # –ú–∏–Ω–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            user.last_checkin):  # –ë—ã–ª —á–µ–∫-–∏–Ω
            
            ref_id = user.pending_referral
            ref_user = session.query(get_user_model()).filter(get_user_model().id == ref_id).first()
            if ref_user:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                user.invited_by = ref_id
                user.pending_referral = None
                
                # –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
                base_points = 100
                ref_user.points += base_points
                ref_user.referrals += 1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                if ref_user.referrals == 5:
                    ref_user.points += 500  # –ë–æ–Ω—É—Å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    bonus_msg = "\nüéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! +500 –±–∞–ª–ª–æ–≤"
                elif ref_user.referrals == 10:
                    ref_user.points += 1000  # –ë–æ–Ω—É—Å –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    bonus_msg = "\nüåü –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! +1000 –±–∞–ª–ª–æ–≤"
                else:
                    bonus_msg = ""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try:
                    await bot.send_message(ref_id, 
                        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                        f"‚Ä¢ +{base_points} –±–∞–ª–ª–æ–≤{bonus_msg}\n"
                        "‚Ä¢ +1 –∫ —Å—á—ë—Ç—á–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
                    )
                    await bot.send_message(user_id,
                        "üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        "–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                
                return True
    
    return False

@router.message(Command("checkin"))
async def checkin_handler(msg: Message):
    if msg.chat.type == "private":
        phrase = random.choice(PHRASES["checkin"])
        await msg.answer(f"{phrase}\n\n–ß–µ–∫-–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ! –ó–∞—Ö–æ–¥–∏ –∏ –æ—Ç–º–µ—á–∞–π—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∏ —Å—Ç–∞—Ç—É—Å.")
        return
    
    user_id = msg.from_user.id
    with Session() as session:
        user = session.query(get_user_model()).filter(get_user_model().id == user_id).first()
        
        if not user:
            user = get_user_model()(id=user_id)
            session.add(user)
        
        now = datetime.utcnow()
        
        # –ï—Å–ª–∏ –±—ã–ª —á–µ–∫-–∏–Ω —Ä–∞–Ω–µ–µ
        if user.last_checkin:
            # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if now - user.last_checkin > timedelta(hours=48):
                user.active_days = 0
            # –ï—Å–ª–∏ —á–µ–∫-–∏–Ω —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è
            if now - user.last_checkin < timedelta(hours=24):
                phrase = random.choice(PHRASES["checkin"])
                await msg.answer(f"{phrase}\n\n–¢—ã —É–∂–µ —á–µ–∫-–∏–Ω–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞.")
                return
            # –û–±—ã—á–Ω—ã–π —á–µ–∫-–∏–Ω
            points = REGULAR_CHECKIN_POINTS
        else:
            # –ü–µ—Ä–≤—ã–π —á–µ–∫-–∏–Ω
            points = FIRST_CHECKIN_POINTS
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ points_service.add_points
        points_service.add_points(
            user_id,
            points,
            username=msg.from_user.username,
            is_checkin=True,
            chat_id=msg.chat.id # –ü–µ—Ä–µ–¥–∞–µ–º chat_id
        )
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º user, —Ç–∞–∫ –∫–∞–∫ points_service.add_points –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user, 
        # –Ω–æ —Å–µ—Å—Å–∏—è –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è (–∏–ª–∏ –æ–±—ä–µ–∫—Ç user –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ points_service)
        user = session.query(get_user_model()).filter(get_user_model().id == user_id).first()
        user.last_checkin = now
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await check_and_activate_referral(user_id, msg.bot)
        
        phrase = random.choice(PHRASES["checkin"])
        builder = InlineKeyboardBuilder()
        builder.button(text="–ß–µ–∫-–∏–Ω ‚òëÔ∏è", callback_data="checkin_done")
        await msg.answer(
            f"{phrase}\n\n"
            f"+{points} –±–∞–ª–ª–æ–≤\n"
            f"–¢–≤–æ–π —Ä–∞–Ω–≥: {points_service.RANKS[user.rank]['title']}\n"
            f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user.points}", 
            reply_markup=builder.as_markup()
        )

        if msg.from_user.first_name:
            user.first_name = msg.from_user.first_name
        
        session.commit() 