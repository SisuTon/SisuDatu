from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import json
import random
import logging
from pathlib import Path
from app.shared.config.settings import Settings
from app.domain.services.gamification import points as points_service

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä
DATA_DIR = Settings().data_dir
GAMES_FILE = DATA_DIR / 'games_data.json'

def load_games_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä"""
    try:
        with open(GAMES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: {e}")
        return {"games": {}, "emoji_movies": {}, "word_games": {}, "trivia_questions": {}}

@router.message(Command("games"))
async def games_handler(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"""
    games_data = load_games_data()
    games = games_data.get("games", {})
    
    text = "üéÆ <b>–î–û–°–¢–£–ü–ù–´–ï –ò–ì–†–´:</b>\n\n"
    
    for game_id, game_info in games.items():
        if game_info.get("enabled", False):
            name = game_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")
            description = game_info.get("description", "")
            points = game_info.get("points_reward", 0)
            
            text += f"üéØ <b>{name}</b>\n"
            text += f"üìù {description}\n"
            text += f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {points} –±–∞–ª–ª–æ–≤\n\n"
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
    text += "/emoji_game - –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏\n"
    text += "/word_game - –°–ª–æ–≤–µ—Å–Ω–∞—è –∏–≥—Ä–∞\n"
    text += "/trivia - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫—Ä–∏–ø—Ç–µ\n"
    
    await msg.answer(text, parse_mode="HTML")

@router.message(Command("emoji_game"))
async def emoji_game_handler(msg: Message):
    """–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏"""
    games_data = load_games_data()
    emoji_movies = games_data.get("emoji_movies", {})
    
    if not emoji_movies:
        await msg.answer("üé¨ –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
    emoji, correct_answer = random.choice(list(emoji_movies.items()))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    all_answers = list(emoji_movies.values())
    wrong_answers = [ans for ans in all_answers if ans != correct_answer]
    options = [correct_answer] + random.sample(wrong_answers, min(3, len(wrong_answers)))
    random.shuffle(options)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option, callback_data=f"emoji_answer:{option}:{correct_answer}")]
        for option in options
    ])
    
    text = f"üé¨ <b>–£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏:</b>\n\n{emoji}\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    
    await msg.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(lambda c: c.data.startswith("emoji_answer:"))
async def emoji_answer_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ —É–≥–∞–¥–∞–π —Ñ–∏–ª—å–º"""
    try:
        _, user_answer, correct_answer = call.data.split(":", 2)
        
        if user_answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            points = 10
            await points_service.add_points(call.from_user.id, points)
            
            await call.message.edit_text(
                f"üéâ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
                f"–§–∏–ª—å–º: <b>{correct_answer}</b>\n"
                f"üèÜ +{points} –±–∞–ª–ª–æ–≤!",
                parse_mode="HTML"
            )
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await call.message.edit_text(
                f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n"
                f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_answer}",
                parse_mode="HTML"
            )
        
        await call.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ emoji_answer_callback: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@router.message(Command("word_game"))
async def word_game_handler(msg: Message):
    """–°–ª–æ–≤–µ—Å–Ω–∞—è –∏–≥—Ä–∞"""
    games_data = load_games_data()
    word_games = games_data.get("word_games", {})
    
    if not word_games:
        await msg.answer("üìù –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    word, answers = random.choice(list(word_games.items()))
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±—É–∫–≤—ã
    shuffled = list(word)
    random.shuffle(shuffled)
    shuffled_word = ''.join(shuffled)
    
    text = f"üìù <b>–°–ª–æ–≤–µ—Å–Ω–∞—è –∏–≥—Ä–∞:</b>\n\n"
    text += f"–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤: <b>{shuffled_word}</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç!"
    
    await msg.answer(text, parse_mode="HTML")

@router.message(Command("trivia"))
async def trivia_handler(msg: Message):
    """–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫—Ä–∏–ø—Ç–µ"""
    games_data = load_games_data()
    trivia_questions = games_data.get("trivia_questions", {})
    
    if not trivia_questions:
        await msg.answer("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    question, answers = random.choice(list(trivia_questions.items()))
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=answer, callback_data=f"trivia_answer:{answer}:{answers[0]}")]
        for answer in answers
    ])
    
    text = f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫—Ä–∏–ø—Ç–µ:</b>\n\n{question}\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    
    await msg.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(lambda c: c.data.startswith("trivia_answer:"))
async def trivia_answer_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    try:
        _, user_answer, correct_answer = call.data.split(":", 2)
        
        if user_answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            points = 20
            await points_service.add_points(call.from_user.id, points)
            
            await call.message.edit_text(
                f"üéâ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
                f"–û—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n"
                f"üèÜ +{points} –±–∞–ª–ª–æ–≤!",
                parse_mode="HTML"
            )
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await call.message.edit_text(
                f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n"
                f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {user_answer}",
                parse_mode="HTML"
            )
        
        await call.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ trivia_answer_callback: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!") 