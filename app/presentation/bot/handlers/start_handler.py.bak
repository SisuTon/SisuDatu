from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sisu_bot.bot.services.user_service import update_user_info, get_user
from sisu_bot.bot.services import points_service
import logging
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sisu_bot.bot.db.models import User
from sisu_bot.core.config import DB_PATH, REQUIRED_SUBSCRIPTIONS, SUBSCRIPTION_GREETING, SUBSCRIPTION_DENY
from sisu_bot.bot.config import is_superadmin
from sisu_bot.bot.handlers.donate_handler import get_donate_keyboard, TON_WALLET
from aiogram.exceptions import TelegramBadRequest

router = Router()

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
# DB_PATH = Path(__file__).parent.parent.parent.parent / 'data' / 'bot.sqlite3'
engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

REQUIRED_CHANNELS = [
    {'title': '–ö–∞–Ω–∞–ª SISU', 'url': 'https://t.me/SisuDatuTon'},
    {'title': '–ß–∞—Ç SISU', 'url': 'https://t.me/+F_kH9rcBxL02ZWFi'}
]

async def check_user_subs(user_id, bot=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –∏–∑ REQUIRED_SUBSCRIPTIONS
    # bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    if bot is None:
        return False
    for ch in REQUIRED_SUBSCRIPTIONS:
        chat_id = ch.get("chat_id")
        try:
            member = await bot.get_chat_member(chat_id, user_id)
            if member.status in ("left", "kicked"):
                return False
        except TelegramBadRequest:
            return False
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    return True

@router.message(Command("start"))
async def start_handler(msg: Message):
    args = msg.text.split(maxsplit=1)[1] if len(msg.text.split(maxsplit=1)) > 1 else ""
    user_id = msg.from_user.id
    session = Session()
    user = session.query(User).filter(User.id == user_id).first()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
    is_subscribed = await check_user_subs(user_id, bot=msg.bot)
    if not is_subscribed:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=ch['title'], url=ch['url'])] for ch in REQUIRED_SUBSCRIPTIONS
            ] + [[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")]]
        )
        await msg.answer(SUBSCRIPTION_GREETING, reply_markup=kb, parse_mode="HTML")
        session.close()
        return

    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        user = User(
            id=user_id,
            points=0,
            rank='novice',
            active_days=0,
            referrals=0,
            message_count=0,
            last_checkin=None,
            pending_referral=None
        )
        session.add(user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if args and args.startswith("ref"):
        ref_id = int(args[3:])  # –£–±–∏—Ä–∞–µ–º "ref" –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        if ref_id != user_id:
            if not user.invited_by:
                user.pending_referral = ref_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≥–ª–∞—à—ë–Ω {ref_id}, –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                await msg.answer(
                    "üéØ –¢—ã –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ SisuDatuBot!\n\n"
                    "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:\n"
                    "1. –°–¥–µ–ª–∞–π —á–µ–∫-–∏–Ω –≤ –≥—Ä—É–ø–ø–µ (/checkin)\n"
                    "2. –û—Ç–ø—Ä–∞–≤—å –º–∏–Ω–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç –Ω–∞–≥—Ä–∞–¥—É!"
                )
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω {user.invited_by}")

    update_user_info(user_id, msg.from_user.username, msg.from_user.first_name)
    session.commit()
    session.close()
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ SisuDatuBot. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "check_subs")
async def check_subs_callback(call):
    user_id = call.from_user.id
    is_subscribed = await check_user_subs(user_id, bot=call.bot)
    if is_subscribed:
        await call.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help.")
    else:
        await call.answer(SUBSCRIPTION_DENY, show_alert=True)

# --- –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---

REQUIRED_SUBS_STORAGE = "required_subs.json"

def load_required_subs():
    import json, os
    if os.path.exists(REQUIRED_SUBS_STORAGE):
        with open(REQUIRED_SUBS_STORAGE, "r", encoding="utf-8") as f:
            return json.load(f)
    return REQUIRED_SUBSCRIPTIONS

def save_required_subs(subs):
    import json
    with open(REQUIRED_SUBS_STORAGE, "w", encoding="utf-8") as f:
        json.dump(subs, f, ensure_ascii=False, indent=2)

@router.message(Command("set_required_subs"))
async def set_required_subs(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    lines = msg.text.split("\n")[1:]
    subs = []
    for line in lines:
        parts = line.strip().split("|", 1)
        if len(parts) == 2:
            subs.append({"title": parts[0].strip(), "url": parts[1].strip()})
    if not subs:
        await msg.answer("–§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ|—Å—Å—ã–ª–∫–∞")
        return
    save_required_subs(subs)
    await msg.answer("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

@router.message(Command("list_required_subs"))
async def list_required_subs(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    subs = load_required_subs()
    text = "–¢–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"{ch['title']}: {ch['url']}" for ch in subs])
    await msg.answer(text)

@router.message(Command("remove_required_sub"))
async def remove_required_sub(msg: Message):
    if not is_superadmin(msg.from_user.id):
        return
    url = msg.text.split(" ", 1)[1].strip() if " " in msg.text else None
    if not url:
        await msg.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_required_sub <—Å—Å—ã–ª–∫–∞>")
        return
    subs = load_required_subs()
    new_subs = [ch for ch in subs if ch['url'] != url]
    save_required_subs(new_subs)
    await msg.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.") 