from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.shared.config.bot_config import ADMIN_IDS
from app.domain.services.gamification import points as points_service
from app.infrastructure.system.adminlog import log_admin_action
import json
from app.shared.config.settings import DB_PATH, DATA_DIR
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.infrastructure.db.models import User

router = Router()

engine = create_engine(f'sqlite:///{DB_PATH}')
Session = sessionmaker(bind=engine)

def is_superadmin(user_id):
    return user_id in ADMIN_IDS

def is_any_admin(user_id):
    return is_superadmin(user_id) or str(user_id) in load_admins()

def load_admins():
    ADMINS_PATH = DATA_DIR / 'admins.json'
    if ADMINS_PATH.exists():
        with open(ADMINS_PATH, encoding='utf-8') as f:
            return json.load(f)["admins"]
    return []

class AdminStates(StatesGroup):
    waiting_broadcast = State()
    waiting_challenge = State()

@router.message(Command("admin"))
async def admin_handler(msg: Message):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    text = "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
    text += "/admin_help ‚Äî —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
    text += "/addpoints [user_id|@username] [–±–∞–ª–ª—ã]\n"
    text += "/removepoints [user_id|@username] [–±–∞–ª–ª—ã]\n"
    text += "/setstreak [user_id|@username] [—á–∏—Å–ª–æ]\n"
    text += "/broadcast [—Ç–µ–∫—Å—Ç]\n"
    text += "/challenge [—Ç–µ–∫—Å—Ç]\n"
    await msg.answer(text)

@router.message(Command("admin_help"))
async def admin_help(msg: Message):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    text = "üõ°Ô∏è –®–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ SisuDatuBot\n\n"
    text += "/addpoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
    text += "/removepoints [user_id|@username] [–±–∞–ª–ª—ã] ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã\n"
    text += "/setstreak [user_id|@username] [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é\n"
    text += "/broadcast [—Ç–µ–∫—Å—Ç] ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n"
    text += "/challenge [—Ç–µ–∫—Å—Ç] ‚Äî —á–µ–ª–ª–µ–Ω–¥–∂ –≤—Å–µ–º\n"
    await msg.answer(text)

@router.message(Command("addpoints"))
async def addpoints_handler(msg: Message):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    args = msg.text.split()
    if len(args) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addpoints [user_id|@username] [–±–∞–ª–ª—ã]")
        return
    user_id = args[1].lstrip('@')
    try:
        points = float(args[2])
    except ValueError:
        await msg.answer("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    user = points_service.add_points(user_id, points, msg.from_user.username)
    log_admin_action(msg.from_user.id, msg.from_user.username, "/addpoints", params={"user_id": user_id, "points": points}, result=user)
    await msg.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.points} –±–∞–ª–ª–æ–≤, —Ä–∞–Ω–≥: {user.rank}")

@router.message(Command("removepoints"))
async def removepoints_handler(msg: Message):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    args = msg.text.split()
    if len(args) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /removepoints [user_id|@username] [–±–∞–ª–ª—ã]")
        return
    user_id = args[1].lstrip('@')
    try:
        points = float(args[2])
    except ValueError:
        await msg.answer("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    user = points_service.add_points(user_id, -points, msg.from_user.username)
    log_admin_action(msg.from_user.id, msg.from_user.username, "/removepoints", params={"user_id": user_id, "points": points}, result=user)
    await msg.answer(f"‚úÖ –°–Ω—è—Ç–æ {points} –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.points} –±–∞–ª–ª–æ–≤, —Ä–∞–Ω–≥: {user.rank}")

@router.message(Command("setstreak"))
async def setstreak_handler(msg: Message):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    args = msg.text.split()
    if len(args) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /setstreak [user_id|@username] [—á–∏—Å–ª–æ]")
        return
    user_id = args[1].lstrip('@')
    try:
        streak = int(args[2])
    except ValueError:
        await msg.answer("–°–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    session = Session()
    user = session.query(User).filter(User.id == user_id).first()
    if not user:
        user = User(id=user_id)
        session.add(user)
    user.active_days = streak
    session.commit()
    log_admin_action(msg.from_user.id, msg.from_user.username, "/setstreak", params={"user_id": user_id, "streak": streak})
    await msg.answer(f"‚úÖ –°–µ—Ä–∏—è —á–µ–∫-–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {streak} –¥–Ω–µ–π.")
    session.close()

@router.message(Command("broadcast"))
async def broadcast_start(msg: Message, state: FSMContext):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    log_admin_action(msg.from_user.id, msg.from_user.username, "/broadcast", params={})
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Å—ã–ª–∫—É), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.set_state(AdminStates.waiting_broadcast)

@router.message(StateFilter(AdminStates.waiting_broadcast))
async def broadcast_send(msg: Message, state: FSMContext):
    await state.clear()
    session = Session()
    users = session.query(User).all()
    count = 0
    for user in users:
        try:
            if msg.text:
                await msg.bot.send_message(user.id, msg.text)
            elif msg.photo:
                await msg.bot.send_photo(user.id, msg.photo[-1].file_id, caption=msg.caption or "")
            elif msg.video:
                await msg.bot.send_video(user.id, msg.video[-1].file_id, caption=msg.caption or "")
            elif msg.document:
                await msg.bot.send_document(user.id, msg.document.file_id, caption=msg.caption or "")
        except Exception:
            continue
        count += 1
    session.close()
    log_admin_action(msg.from_user.id, msg.from_user.username, "/broadcast_send", params={}, result=f"{count} users")
    await msg.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@router.message(Command("challenge"))
async def challenge_start(msg: Message, state: FSMContext):
    if not is_any_admin(msg.from_user.id) or msg.chat.type != "private":
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    log_admin_action(msg.from_user.id, msg.from_user.username, "/challenge", params={})
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å —á–µ–ª–ª–µ–Ω–¥–∂ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å—Å—ã–ª–∫—É), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.set_state(AdminStates.waiting_challenge)

@router.message(StateFilter(AdminStates.waiting_challenge))
async def challenge_send(msg: Message, state: FSMContext):
    await state.clear()
    session = Session()
    users = session.query(User).all()
    count = 0
    for user in users:
        try:
            if msg.text:
                await msg.bot.send_message(user.id, f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂!\n{msg.text}")
            elif msg.photo:
                await msg.bot.send_photo(user.id, msg.photo[-1].file_id, caption=f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂!\n{msg.caption or ''}")
            elif msg.video:
                await msg.bot.send_video(user.id, msg.video[-1].file_id, caption=f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂!\n{msg.caption or ''}")
            elif msg.document:
                await msg.bot.send_document(user.id, msg.document.file_id, caption=f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂!\n{msg.caption or ''}")
        except Exception:
            continue
        count += 1
    session.close()
    log_admin_action(msg.from_user.id, msg.from_user.username, "/challenge_send", params={}, result=f"{count} users")
    await msg.answer(f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")