from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import random
import re

from app.shared.utils.bot_utils import load_json_safe, save_json_safe
try:
    from fuzzywuzzy import fuzz
except ImportError:
    from rapidfuzz import fuzz

router = Router()

TRIGGER_MAP = load_json_safe((router.__module__.split('.')[0] + "/data/triggers.json"), {})
PHRASES = load_json_safe((router.__module__.split('.')[0] + "/data/phrases.json"), {})
EXCUSES = load_json_safe((router.__module__.split('.')[0] + "/data/excuses.json"), {}).get("excuses", [])

user_preferences = {}
last_answers = {}
sisu_mood = {}

# === –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===

# @router.message(Command("start"))
# async def cmd_start(msg: Message):
#     await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –°–∏—Å—É ‚Äî –¥—Ä–∞–∫–æ–Ω-–ø–æ–º–æ—â–Ω–∏–∫. –°–ø—Ä–∞—à–∏–≤–∞–π –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å üêâ")

@router.message(Command("help"))
async def cmd_help(msg: Message):
    await msg.answer("–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —à—É—Ç–∫–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã\n- –†–∏—Å–æ–≤–∞—Ç—å\n- –†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!")

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===

#@router.message()
#async def handle_message(msg: Message):
#    text = msg.text or ""
#    text_lower = text.lower()
#    mood = sisu_mood.get(msg.chat.id, 0)
#
#    phrase = None
#
#    # --- –ñ—ë—Å—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ ---
#    question_map = [
#        (re.compile(r"–¥—Ä—É–≥|–¥—Ä—É–∂–±–∞|–ø–æ–¥—Ä—É–≥–∞|–¥—Ä—É–∑—å—è"), "positive"),
#        (re.compile(r"–∞–Ω–µ–∫–¥–æ—Ç|—à—É—Ç–∫|–ø—Ä–∏–∫–æ–ª"), "sisu_pattern"),
#        (re.compile(r"—Ä–∏—Å–æ–≤–∞—Ç—å|–∞—Ä—Ç|–±–æ—Ç-—Ä–∏—Å–æ–≤–∞–ª–∫–∞"), "draw"),
#        (re.compile(r"–ª—É–Ω–∞|–ø–∞–º–ø|–≥—Ä–∞—Ñ–∏–∫|moon"), "moon"),
#        (re.compile(r"nft"), "nft"),
#        (re.compile(r"—Ç–æ–Ω|—Ç–æ–∫–µ–Ω|—Ç–æ–Ω–∫–æ–∏–Ω"), "token"),
#        (re.compile(r"–∏–Ω–≤–µ—Å—Ç|–∫—É–¥–∞|–¥–µ—Ä–∂–∞—Ç—å|–∫—É–ø–∏—Ç—å"), "signal"),
#        (re.compile(r"–ø—Ä–∞–∑–¥–Ω–∏–∫|–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è|—é–±–∏–ª–µ–π"), "holiday"),
#        (re.compile(r"—Å–ø–∞—Å–∏–±–æ|–ª—é–±–ª—é|–æ–±–Ω—è–ª|—Ä–µ—Å–ø–µ–∫—Ç|—Ç–æ–ø"), "positive"),
#    ]
#
#    for pattern, name in question_map:
#        if pattern.search(text_lower):
#            phrase = get_trigger_response(name, text_lower, msg.chat.id, mood)
#            break
#
#    # --- Fuzzy –ø–æ–∏—Å–∫ ---
#    if not phrase:
#        best_score = 0
#        best_name = None
#        for name, trig in TRIGGER_MAP.items():
#            for t in trig.get("triggers", []):
#                score = fuzz.partial_ratio(text_lower, t)
#                if score > best_score:
#                    best_score = score
#                    best_name = name
#        if best_score >= 75 and best_name:
#            phrase = get_trigger_response(best_name, text_lower, msg.chat.id, mood)
#
#    # --- Fallback: excuses –∏–ª–∏ —à—É—Ç–∫–∞ ---
#    if not phrase:
#        phrase = random.choice(EXCUSES or PHRASES.get("sisu_pattern", ["–Ø –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ, –¥—Ä—É–∂–∏—â–µ!"]))
#        if mood <= -2:
#            phrase = "ü•∂ " + phrase + " (–°–∏—Å—É –æ–±–∏–¥–µ–ª–∞—Å—å)"
#        elif mood >= 2:
#            phrase = phrase + " ü•≥"
#
#    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ---
#    await msg.answer(phrase)

def get_trigger_response(name: str, text: str, chat_id: int, mood: int) -> str:
    responses = TRIGGER_MAP.get(name, {}).get("responses", [])
    if not responses:
        return None
    last = last_answers.get((chat_id, name))
    candidates = [r for r in responses if r != last]
    phrase = random.choice(candidates or responses)
    last_answers[(chat_id, name)] = phrase

    if mood <= -2:
        phrase = "ü•∂ " + phrase + " (–°–∏—Å—É –æ–±–∏–¥–µ–ª–∞—Å—å)"
    elif mood >= 2:
        phrase = phrase + " ü•≥"
    return phrase 