#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ Sisu
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-01-02
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from typing import Dict, List, Any, Optional
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_functionality_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BotFunctionalityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_results = {}
        self.errors = []
        self.warnings = []
        self.start_time = time.time()
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ Sisu...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await self.test_configuration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.test_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
        await self.test_ai_services()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —Å–µ—Ä–≤–∏—Å—ã
        await self.test_tts_services()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        await self.test_command_handlers()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º middleware
        await self.test_middleware()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        await self.test_file_system()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_report()
        
    async def test_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        try:
            from sisu_bot.core.config import (
                TELEGRAM_BOT_TOKEN, YANDEXGPT_API_KEY, YANDEXGPT_FOLDER_ID,
                YANDEX_SPEECHKIT_FOLDER_ID, SUPERADMIN_IDS, ADMIN_IDS
            )
            
            config_tests = {
                "telegram_token": bool(TELEGRAM_BOT_TOKEN),
                "yandexgpt_api_key": bool(YANDEXGPT_API_KEY),
                "yandexgpt_folder_id": bool(YANDEXGPT_FOLDER_ID),
                "speechkit_folder_id": bool(YANDEX_SPEECHKIT_FOLDER_ID),
                "superadmin_ids": len(SUPERADMIN_IDS) > 0,
                "admin_ids": len(ADMIN_IDS) > 0
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ folder ID
            if YANDEXGPT_FOLDER_ID and YANDEX_SPEECHKIT_FOLDER_ID:
                if YANDEXGPT_FOLDER_ID != YANDEX_SPEECHKIT_FOLDER_ID:
                    self.warnings.append(f"‚ö†Ô∏è Folder ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: GPT={YANDEXGPT_FOLDER_ID}, SpeechKit={YANDEX_SPEECHKIT_FOLDER_ID}")
            
            self.test_results["configuration"] = config_tests
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def test_database(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from sisu_bot.bot.db.session import get_session
            from sisu_bot.bot.db.models import User
            
            db_tests = {}
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            try:
                with get_session() as session:
                    users_count = session.query(User).count()
                    db_tests["connection"] = True
                    db_tests["users_count"] = users_count
                    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
            except Exception as e:
                db_tests["connection"] = False
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            
            self.test_results["database"] = db_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
    
    async def test_ai_services(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã...")
        
        try:
            from sisu_bot.bot.services.yandexgpt_service import generate_sisu_reply
            from sisu_bot.bot.services.ai_memory_service import add_to_memory, get_recent_messages
            
            ai_tests = {}
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            try:
                test_prompt = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
                response = await generate_sisu_reply(test_prompt)
                ai_tests["response_generation"] = bool(response and len(response) > 0)
                ai_tests["response_length"] = len(response) if response else 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if response and test_prompt in response:
                    self.warnings.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ AI")
                
            except Exception as e:
                ai_tests["response_generation"] = False
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            
            # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
            try:
                test_chat_id = 12345
                add_to_memory(test_chat_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                recent = get_recent_messages(test_chat_id)
                ai_tests["memory_service"] = len(recent) > 0
            except Exception as e:
                ai_tests["memory_service"] = False
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏: {e}")
            
            self.test_results["ai_services"] = ai_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    async def test_tts_services(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —Å–µ—Ä–≤–∏—Å—ã...")
        
        try:
            from sisu_bot.bot.services.yandex_speechkit_tts import synthesize_sisu_voice
            
            tts_tests = {}
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ –≥–æ–ª–æ—Å–∞
            try:
                test_text = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞"
                voice_data = await synthesize_sisu_voice(test_text)
                tts_tests["voice_synthesis"] = bool(voice_data and len(voice_data) > 0)
                tts_tests["voice_data_size"] = len(voice_data) if voice_data else 0
                
            except Exception as e:
                tts_tests["voice_synthesis"] = False
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ TTS —Å–∏–Ω—Ç–µ–∑–∞: {e}")
                logger.error(f"TTS –æ—à–∏–±–∫–∞: {e}")
            
            self.test_results["tts_services"] = tts_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    async def test_command_handlers(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥...")
        
        try:
            from sisu_bot.bot.handlers import admin_handler, ai_handler, trigger_handler
            
            command_tests = {
                "admin_handler": True,
                "ai_handler": True,
                "trigger_handler": True
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            handlers_imported = all([
                admin_handler is not None,
                ai_handler is not None,
                trigger_handler is not None
            ])
            
            command_tests["handlers_imported"] = handlers_imported
            
            self.test_results["command_handlers"] = command_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def test_middleware(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º middleware...")
        
        try:
            from sisu_bot.bot.middlewares import (
                rate_limit_middleware, antifraud_middleware, 
                subscription_middleware, logging_middleware
            )
            
            middleware_tests = {
                "rate_limit": True,
                "antifraud": True,
                "subscription": True,
                "logging": True
            }
            
            self.test_results["middleware"] = middleware_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è middleware: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è middleware: {e}")
    
    async def test_file_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É...")
        
        try:
            from sisu_bot.core.config import DATA_DIR, DB_PATH
            
            fs_tests = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            fs_tests["data_dir_exists"] = DATA_DIR.exists()
            fs_tests["db_file_exists"] = DB_PATH.exists()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            try:
                test_file = DATA_DIR / "test_write.tmp"
                test_file.write_text("test")
                test_file.unlink()
                fs_tests["data_dir_writable"] = True
            except Exception:
                fs_tests["data_dir_writable"] = False
                self.warnings.append("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö")
            
            self.test_results["file_system"] = fs_tests
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        
        end_time = time.time()
        duration = end_time - self.start_time
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "duration_seconds": round(duration, 2),
            "test_results": self.test_results,
            "errors": self.errors,
            "warnings": self.warnings,
            "summary": {
                "total_tests": sum(len(tests) for tests in self.test_results.values()),
                "passed_tests": sum(
                    sum(1 for test in tests.values() if test is True) 
                    for tests in self.test_results.values()
                ),
                "failed_tests": len(self.errors),
                "warnings_count": len(self.warnings)
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = Path("bot_test_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ë–û–¢–ê SISU")
        print("="*60)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {report['summary']['passed_tests']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {report['summary']['failed_tests']}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {report['summary']['warnings_count']}")
        
        if self.errors:
            print("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        print("="*60)
        
        return report

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotFunctionalityTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
